/*
 * Copyright 2021 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
syntax = "proto3";

package clouditor;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "evidence.proto";

option go_package = "api/orchestrator";

message AssessmentResult {
  // the ID in a uuid format
  string id = 1;

  // the ID of the metric it refers to
  string metric_id = 2;

  enum ComplianceStatus {
    COMPLIANT = 0;
    NON_COMPLIANT = 1;
  }

  ComplianceStatus result = 3;

  string target_value = 4;

  Evidence evidence = 5;
}

// Represents an external tool or service that offers assessments according to
// certain metrics
message AssessmentTool {
  string id = 1;

  string name = 2;

  // TODO: we might change this to just an identifier, if we only allow tools to
  // refer to existing IDs
  repeated Metric available_metrics = 3;
}

message RegisterAssessmentToolRequest { AssessmentTool tool = 1; }

message ListAssessmentToolsRequest {
  // filter tools by metric id
  string metric_id = 1;
}

message ListAssessmentToolsResponse { repeated AssessmentTool tools = 1; }

message GetAssessmentToolRequest { string id = 1; }

message UpdateAssessmentToolRequest {
  string id = 1;
  AssessmentTool tool = 2;
}

message DeregisterAssessmentToolRequest { string id = 1; }

service Orchestrator {

  rpc RegisterAssessmentTool(RegisterAssessmentToolRequest)
      returns (AssessmentTool) {
    option (google.api.http) = {
      post : "/v1/orchestator/assessment_tools"
      body : "tool"
    };
  }

  rpc ListAssessmentTools(ListAssessmentToolsRequest)
      returns (ListAssessmentToolsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestator/assessment_tools/"
      additional_bindings {get : "/v1/orchestator/{metric_id}/assessment_tools"}
    };
  }

  rpc GetAssessmentTool(GetAssessmentToolRequest) returns (AssessmentTool) {
    option (google.api.http) = {
      get : "/v1/orchestator/assessment_tools/{id}"
    };
  }

  rpc UpdateAssessmentTool(UpdateAssessmentToolRequest)
      returns (AssessmentTool) {
    option (google.api.http) = {
      put : "/v1/orchestator/assessment_tools/{id}"
      body : "tool"
    };
  }

  rpc DeregisterAssessmentTool(DeregisterAssessmentToolRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestator/assessment_tools/{id}"
    };
  }
}
