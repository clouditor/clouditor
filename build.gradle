/*
 * Copyright 2016-2019 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *            $$\                           $$\ $$\   $$\
 *            $$ |                          $$ |\__|  $$ |
 *   $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 *  $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 *  $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ |  \__|
 *  $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 *  \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *   \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */

plugins {
    id 'org.sonarqube' version '2.8'
    id 'org.owasp.dependencycheck' version '4.0.2'
    id 'com.diffplug.gradle.spotless' version '3.30.0'
    id "com.github.ben-manes.versions" version '0.28.0'
    id 'com.github.jk1.dependency-license-report' version '1.2'
    id 'maven-publish'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

sonarqube {
    properties {
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'kotlin'

    group = 'io.clouditor'

    jacoco {
        toolVersion = "0.8.6"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

    spotless {
        java {
            target project.fileTree(project.rootDir) {
                include '**/*.java'
                exclude '**/generated-src/**/*.*'
            }
            googleJavaFormat()
        }
    }

    tasks.named("compileJava") {
        it.dependsOn(":spotlessApply")
    }

    sonarqube {
        properties {
            property 'sonar.jacoco.reportPath', null
            property 'sonar.jacoco.reportPaths', null
        }
    }

    // Get dependencies from Maven central repository
    repositories {
        mavenLocal() // needed currently for the eu-sec client
        mavenCentral()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "13"
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "13"
        }
    }

    compileJava {
        options.compilerArgs += ['-parameters']
    }

    sourceCompatibility = 1.13
    targetCompatibility = 1.13

    // Set library versions - useful for libraries with multiple packages
    ext.libraryVersions = [
            azure                : '1.21.0',
            aws2                 : '2.4.4',
            adal4j               : '1.6.3',
            dockerjava           : '3.0.14',
            commonsLang3         : '3.8.1',
            commonsConfiguration2: '2.7',
            geoip2               : '2.12.0',
            guava                : '27.1-jre',
            hk2                  : '2.6.1',
            log4j                : '2.14.1',
            slf4j                : '1.8.0-beta4',
            jwt                  : '3.14.0',
            jackson              : '2.12.2',
            jersey               : '2.33',
            JUnit                : '5.4.0',
            jetty                : '9.4.12.v20180830',
            mockito              : '3.8.0',
            swaggerJersey2       : '1.5.21',
            postgresql           : '42.2.18',
            hibernate            : '5.4.30.Final'
    ]

    dependencies {
        implementation "org.apache.commons:commons-lang3:${libraryVersions.commonsLang3}"

        // add JUnit5 dependencies for all projects
        testImplementation "org.junit.jupiter:junit-jupiter-api:${libraryVersions.JUnit}"
        testCompile "org.junit.jupiter:junit-jupiter-params:${libraryVersions.JUnit}"
        testCompile "org.mockito:mockito-core:${libraryVersions.mockito}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${libraryVersions.JUnit}"
    }

    test {
        failFast = true
        // Uncomment next line when you want to see each individual test while debugging
        // beforeTest { descriptor -> logger.lifecycle("Running test: ${descriptor}")}

        useJUnitPlatform()
    }

    version = rootProject.file('version.txt').text.trim()
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn(subprojects.test)

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
}

configure(subprojects.findAll {
    !it.name.contains('commons') &&
            !it.name.contains('core') &&
            !it.name.contains('-aws') &&
            !it.name.contains('-k8s') &&
            !it.name.contains('-azure') &&
            !it.name.contains('-eu-sec')
}) {
    task docker(type: Exec) {
        description 'Builds a docker image based on the Dockerfile.'
        dependsOn build

        executable 'docker'
        args 'build',
                '-t', 'clouditor/' + project.name.split('-')[1] + ':' + gitCommit(),
                '-t', 'clouditor/' + project.name.split('-')[1],
                '.'
    }
}

task docker(type: Exec) {
    description 'Builds a docker image based on the Dockerfile.'
    // make sure, engine and dashboard are built
    dependsOn ':clouditor-engine:docker'

    executable 'docker'
    args 'build',
            '-t', 'clouditor/' + project.name + ':' + gitCommit(),
            '-t', 'clouditor/' + project.name,
            '--build-arg', 'TAG=' + gitCommit(),
            '.'
}

task combinedJavadoc(type: Javadoc) {
    source subprojects.collect { project -> project.sourceSets.main.allJava }
    classpath = files(subprojects.collect { project ->
        [project.sourceSets.main.compileClasspath, project.sourceSets
                .main.output]
    })
}

tasks.javadoc.dependsOn(combinedJavadoc)

task version() {
    doLast {
        print version
    }
}

static def gitCommit() {
    def commit = 'HEAD'

    if (System.getenv('CIRCLE_SHA1')) {
        commit = System.getenv('CIRCLE_SHA1')
    } else {
        def proc = 'git rev-parse HEAD'.execute()
        proc.in.eachLine { line -> commit = line }
        proc.err.eachLine { line -> println line }
        proc.waitFor()
    }

    if (commit != 'HEAD') {
        commit.substring(0, 8)
    }
}
