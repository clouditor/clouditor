// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/runtime/runtime.proto

package runtime

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Runtime struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// release_version is the latest Clouditor release version for this commit
	ReleaseVersion *string `protobuf:"bytes,1,opt,name=release_version,json=releaseVersion,proto3,oneof" json:"release_version,omitempty"`
	// vcs is the used version control system
	Vcs string `protobuf:"bytes,2,opt,name=vcs,proto3" json:"vcs,omitempty"`
	// commit_hash is the current Clouditor commit hash
	CommitHash string `protobuf:"bytes,3,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// commit_time is the time of the Clouditor commit
	CommitTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=commit_time,json=commitTime,proto3" json:"commit_time,omitempty"`
	// golang_version is the used golang version
	GolangVersion string `protobuf:"bytes,5,opt,name=golang_version,json=golangVersion,proto3" json:"golang_version,omitempty"`
	// dependency is a list of used runtime dependencies
	Dependencies  []*Dependency `protobuf:"bytes,6,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	mi := &file_api_runtime_runtime_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_api_runtime_runtime_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_api_runtime_runtime_proto_rawDescGZIP(), []int{0}
}

func (x *Runtime) GetReleaseVersion() string {
	if x != nil && x.ReleaseVersion != nil {
		return *x.ReleaseVersion
	}
	return ""
}

func (x *Runtime) GetVcs() string {
	if x != nil {
		return x.Vcs
	}
	return ""
}

func (x *Runtime) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *Runtime) GetCommitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitTime
	}
	return nil
}

func (x *Runtime) GetGolangVersion() string {
	if x != nil {
		return x.GolangVersion
	}
	return ""
}

func (x *Runtime) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type Dependency struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	mi := &file_api_runtime_runtime_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_api_runtime_runtime_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_api_runtime_runtime_proto_rawDescGZIP(), []int{1}
}

func (x *Dependency) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Dependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetRuntimeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuntimeInfoRequest) Reset() {
	*x = GetRuntimeInfoRequest{}
	mi := &file_api_runtime_runtime_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuntimeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuntimeInfoRequest) ProtoMessage() {}

func (x *GetRuntimeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_runtime_runtime_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuntimeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetRuntimeInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_runtime_runtime_proto_rawDescGZIP(), []int{2}
}

var File_api_runtime_runtime_proto protoreflect.FileDescriptor

const file_api_runtime_runtime_proto_rawDesc = "" +
	"\n" +
	"\x19api/runtime/runtime.proto\x12\x14clouditor.runtime.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa8\x02\n" +
	"\aRuntime\x12,\n" +
	"\x0frelease_version\x18\x01 \x01(\tH\x00R\x0ereleaseVersion\x88\x01\x01\x12\x10\n" +
	"\x03vcs\x18\x02 \x01(\tR\x03vcs\x12\x1f\n" +
	"\vcommit_hash\x18\x03 \x01(\tR\n" +
	"commitHash\x12;\n" +
	"\vcommit_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"commitTime\x12%\n" +
	"\x0egolang_version\x18\x05 \x01(\tR\rgolangVersion\x12D\n" +
	"\fdependencies\x18\x06 \x03(\v2 .clouditor.runtime.v1.DependencyR\fdependenciesB\x12\n" +
	"\x10_release_version\":\n" +
	"\n" +
	"Dependency\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"\x17\n" +
	"\x15GetRuntimeInfoRequestB/Z-clouditor.io/clouditor/v2/api/runtime;runtimeb\x06proto3"

var (
	file_api_runtime_runtime_proto_rawDescOnce sync.Once
	file_api_runtime_runtime_proto_rawDescData []byte
)

func file_api_runtime_runtime_proto_rawDescGZIP() []byte {
	file_api_runtime_runtime_proto_rawDescOnce.Do(func() {
		file_api_runtime_runtime_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_runtime_runtime_proto_rawDesc), len(file_api_runtime_runtime_proto_rawDesc)))
	})
	return file_api_runtime_runtime_proto_rawDescData
}

var file_api_runtime_runtime_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_runtime_runtime_proto_goTypes = []any{
	(*Runtime)(nil),               // 0: clouditor.runtime.v1.Runtime
	(*Dependency)(nil),            // 1: clouditor.runtime.v1.Dependency
	(*GetRuntimeInfoRequest)(nil), // 2: clouditor.runtime.v1.GetRuntimeInfoRequest
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_api_runtime_runtime_proto_depIdxs = []int32{
	3, // 0: clouditor.runtime.v1.Runtime.commit_time:type_name -> google.protobuf.Timestamp
	1, // 1: clouditor.runtime.v1.Runtime.dependencies:type_name -> clouditor.runtime.v1.Dependency
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_runtime_runtime_proto_init() }
func file_api_runtime_runtime_proto_init() {
	if File_api_runtime_runtime_proto != nil {
		return
	}
	file_api_runtime_runtime_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_runtime_runtime_proto_rawDesc), len(file_api_runtime_runtime_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_runtime_runtime_proto_goTypes,
		DependencyIndexes: file_api_runtime_runtime_proto_depIdxs,
		MessageInfos:      file_api_runtime_runtime_proto_msgTypes,
	}.Build()
	File_api_runtime_runtime_proto = out.File
	file_api_runtime_runtime_proto_goTypes = nil
	file_api_runtime_runtime_proto_depIdxs = nil
}
