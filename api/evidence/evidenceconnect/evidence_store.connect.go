// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/evidence/evidence_store.proto

package evidenceconnect

import (
	evidence "clouditor.io/clouditor/v2/api/evidence"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EvidenceStoreName is the fully-qualified name of the EvidenceStore service.
	EvidenceStoreName = "clouditor.evidence.v1.EvidenceStore"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvidenceStoreStoreEvidenceProcedure is the fully-qualified name of the EvidenceStore's
	// StoreEvidence RPC.
	EvidenceStoreStoreEvidenceProcedure = "/clouditor.evidence.v1.EvidenceStore/StoreEvidence"
	// EvidenceStoreStoreEvidencesProcedure is the fully-qualified name of the EvidenceStore's
	// StoreEvidences RPC.
	EvidenceStoreStoreEvidencesProcedure = "/clouditor.evidence.v1.EvidenceStore/StoreEvidences"
	// EvidenceStoreListEvidencesProcedure is the fully-qualified name of the EvidenceStore's
	// ListEvidences RPC.
	EvidenceStoreListEvidencesProcedure = "/clouditor.evidence.v1.EvidenceStore/ListEvidences"
	// EvidenceStoreGetEvidenceProcedure is the fully-qualified name of the EvidenceStore's GetEvidence
	// RPC.
	EvidenceStoreGetEvidenceProcedure = "/clouditor.evidence.v1.EvidenceStore/GetEvidence"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	evidenceStoreServiceDescriptor              = evidence.File_api_evidence_evidence_store_proto.Services().ByName("EvidenceStore")
	evidenceStoreStoreEvidenceMethodDescriptor  = evidenceStoreServiceDescriptor.Methods().ByName("StoreEvidence")
	evidenceStoreStoreEvidencesMethodDescriptor = evidenceStoreServiceDescriptor.Methods().ByName("StoreEvidences")
	evidenceStoreListEvidencesMethodDescriptor  = evidenceStoreServiceDescriptor.Methods().ByName("ListEvidences")
	evidenceStoreGetEvidenceMethodDescriptor    = evidenceStoreServiceDescriptor.Methods().ByName("GetEvidence")
)

// EvidenceStoreClient is a client for the clouditor.evidence.v1.EvidenceStore service.
type EvidenceStoreClient interface {
	// Stores an evidence to the evidence storage. Part of the public API, also
	// exposed as REST.
	StoreEvidence(context.Context, *connect.Request[evidence.StoreEvidenceRequest]) (*connect.Response[evidence.StoreEvidenceResponse], error)
	// Stores a stream of evidences to the evidence storage and returns a response
	// stream. Part of the public API, not exposed as REST.
	StoreEvidences(context.Context) *connect.BidiStreamForClient[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse]
	// Returns all stored evidences. Part of the public API, also exposed as REST.
	ListEvidences(context.Context, *connect.Request[evidence.ListEvidencesRequest]) (*connect.Response[evidence.ListEvidencesResponse], error)
	// Returns a particular stored evidence. Part of the public API, also exposed
	// as REST.
	GetEvidence(context.Context, *connect.Request[evidence.GetEvidenceRequest]) (*connect.Response[evidence.Evidence], error)
}

// NewEvidenceStoreClient constructs a client for the clouditor.evidence.v1.EvidenceStore service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvidenceStoreClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EvidenceStoreClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evidenceStoreClient{
		storeEvidence: connect.NewClient[evidence.StoreEvidenceRequest, evidence.StoreEvidenceResponse](
			httpClient,
			baseURL+EvidenceStoreStoreEvidenceProcedure,
			connect.WithSchema(evidenceStoreStoreEvidenceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storeEvidences: connect.NewClient[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse](
			httpClient,
			baseURL+EvidenceStoreStoreEvidencesProcedure,
			connect.WithSchema(evidenceStoreStoreEvidencesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listEvidences: connect.NewClient[evidence.ListEvidencesRequest, evidence.ListEvidencesResponse](
			httpClient,
			baseURL+EvidenceStoreListEvidencesProcedure,
			connect.WithSchema(evidenceStoreListEvidencesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvidence: connect.NewClient[evidence.GetEvidenceRequest, evidence.Evidence](
			httpClient,
			baseURL+EvidenceStoreGetEvidenceProcedure,
			connect.WithSchema(evidenceStoreGetEvidenceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// evidenceStoreClient implements EvidenceStoreClient.
type evidenceStoreClient struct {
	storeEvidence  *connect.Client[evidence.StoreEvidenceRequest, evidence.StoreEvidenceResponse]
	storeEvidences *connect.Client[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse]
	listEvidences  *connect.Client[evidence.ListEvidencesRequest, evidence.ListEvidencesResponse]
	getEvidence    *connect.Client[evidence.GetEvidenceRequest, evidence.Evidence]
}

// StoreEvidence calls clouditor.evidence.v1.EvidenceStore.StoreEvidence.
func (c *evidenceStoreClient) StoreEvidence(ctx context.Context, req *connect.Request[evidence.StoreEvidenceRequest]) (*connect.Response[evidence.StoreEvidenceResponse], error) {
	return c.storeEvidence.CallUnary(ctx, req)
}

// StoreEvidences calls clouditor.evidence.v1.EvidenceStore.StoreEvidences.
func (c *evidenceStoreClient) StoreEvidences(ctx context.Context) *connect.BidiStreamForClient[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse] {
	return c.storeEvidences.CallBidiStream(ctx)
}

// ListEvidences calls clouditor.evidence.v1.EvidenceStore.ListEvidences.
func (c *evidenceStoreClient) ListEvidences(ctx context.Context, req *connect.Request[evidence.ListEvidencesRequest]) (*connect.Response[evidence.ListEvidencesResponse], error) {
	return c.listEvidences.CallUnary(ctx, req)
}

// GetEvidence calls clouditor.evidence.v1.EvidenceStore.GetEvidence.
func (c *evidenceStoreClient) GetEvidence(ctx context.Context, req *connect.Request[evidence.GetEvidenceRequest]) (*connect.Response[evidence.Evidence], error) {
	return c.getEvidence.CallUnary(ctx, req)
}

// EvidenceStoreHandler is an implementation of the clouditor.evidence.v1.EvidenceStore service.
type EvidenceStoreHandler interface {
	// Stores an evidence to the evidence storage. Part of the public API, also
	// exposed as REST.
	StoreEvidence(context.Context, *connect.Request[evidence.StoreEvidenceRequest]) (*connect.Response[evidence.StoreEvidenceResponse], error)
	// Stores a stream of evidences to the evidence storage and returns a response
	// stream. Part of the public API, not exposed as REST.
	StoreEvidences(context.Context, *connect.BidiStream[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse]) error
	// Returns all stored evidences. Part of the public API, also exposed as REST.
	ListEvidences(context.Context, *connect.Request[evidence.ListEvidencesRequest]) (*connect.Response[evidence.ListEvidencesResponse], error)
	// Returns a particular stored evidence. Part of the public API, also exposed
	// as REST.
	GetEvidence(context.Context, *connect.Request[evidence.GetEvidenceRequest]) (*connect.Response[evidence.Evidence], error)
}

// NewEvidenceStoreHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvidenceStoreHandler(svc EvidenceStoreHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	evidenceStoreStoreEvidenceHandler := connect.NewUnaryHandler(
		EvidenceStoreStoreEvidenceProcedure,
		svc.StoreEvidence,
		connect.WithSchema(evidenceStoreStoreEvidenceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evidenceStoreStoreEvidencesHandler := connect.NewBidiStreamHandler(
		EvidenceStoreStoreEvidencesProcedure,
		svc.StoreEvidences,
		connect.WithSchema(evidenceStoreStoreEvidencesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evidenceStoreListEvidencesHandler := connect.NewUnaryHandler(
		EvidenceStoreListEvidencesProcedure,
		svc.ListEvidences,
		connect.WithSchema(evidenceStoreListEvidencesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evidenceStoreGetEvidenceHandler := connect.NewUnaryHandler(
		EvidenceStoreGetEvidenceProcedure,
		svc.GetEvidence,
		connect.WithSchema(evidenceStoreGetEvidenceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.evidence.v1.EvidenceStore/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EvidenceStoreStoreEvidenceProcedure:
			evidenceStoreStoreEvidenceHandler.ServeHTTP(w, r)
		case EvidenceStoreStoreEvidencesProcedure:
			evidenceStoreStoreEvidencesHandler.ServeHTTP(w, r)
		case EvidenceStoreListEvidencesProcedure:
			evidenceStoreListEvidencesHandler.ServeHTTP(w, r)
		case EvidenceStoreGetEvidenceProcedure:
			evidenceStoreGetEvidenceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEvidenceStoreHandler returns CodeUnimplemented from all methods.
type UnimplementedEvidenceStoreHandler struct{}

func (UnimplementedEvidenceStoreHandler) StoreEvidence(context.Context, *connect.Request[evidence.StoreEvidenceRequest]) (*connect.Response[evidence.StoreEvidenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evidence.v1.EvidenceStore.StoreEvidence is not implemented"))
}

func (UnimplementedEvidenceStoreHandler) StoreEvidences(context.Context, *connect.BidiStream[evidence.StoreEvidenceRequest, evidence.StoreEvidencesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evidence.v1.EvidenceStore.StoreEvidences is not implemented"))
}

func (UnimplementedEvidenceStoreHandler) ListEvidences(context.Context, *connect.Request[evidence.ListEvidencesRequest]) (*connect.Response[evidence.ListEvidencesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evidence.v1.EvidenceStore.ListEvidences is not implemented"))
}

func (UnimplementedEvidenceStoreHandler) GetEvidence(context.Context, *connect.Request[evidence.GetEvidenceRequest]) (*connect.Response[evidence.Evidence], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evidence.v1.EvidenceStore.GetEvidence is not implemented"))
}
