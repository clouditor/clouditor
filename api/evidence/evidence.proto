/*
 * Copyright 2016-2022 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
syntax = "proto3";

package clouditor;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "clouditor.io/clouditor/api/evidence";

// An evidence resource
message Evidence {
  // the ID in a uuid format
  string id = 1;

  // time of evidence creation
  google.protobuf.Timestamp timestamp = 2;

  // Reference to a service this evidence was gathered from
  string service_id = 3;

  // Reference to the tool which provided the evidence
  string tool_id = 4;

  // Contains the evidence in its original form without following a defined
  // schema, e.g. the raw JSON
  string raw = 5;

  // Semantic representation of the Cloud resource according to our defined
  // ontology
  google.protobuf.Value resource = 6;

  // Conditional, Mutually exclusive with resource. An error
  Error error = 8;
}

// An error result
message Error {
  // The broad type of error, should not be too collection module specific
  enum Code {
    ERROR_UNKNOWN = 0;
    // TODO(all): But all invalid configs are rejected anyway (`Validate` functions)
    ERROR_INVALID_CONFIGURATION =
        1; // The collection module configuration did not allow for collection
    // (e.g. Port number 1000000)
    ERROR_CONNECTION_FAILURE =
        2; // The service could not be reached (e.g. Timeout)
    ERROR_PROTOCOL_VIOLATION = 3; // The service did not behave as expected
    // (e.g. served SMTP instead of HTTP)
  }
  // The type of error
  Code code = 1;
  // Optional. A human-readable description of the error.
  string description = 2;
}