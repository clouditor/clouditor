// Copyright 2025 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

syntax = "proto3";

package clouditor.orchestrator.v1;

import "api/orchestrator/orchestrator.proto";
import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "tagger/tagger.proto";

option go_package = "clouditor.io/clouditor/v2/api/orchestrator";

// A user resource
// TODO(lebogg): Think about adding more fields to the user resource (creation time, expiration time, etc.)
message User {
  string id = 1 [
    (buf.validate.field).string.min_len = 1,
    (google.api.field_behavior) = REQUIRED
  ];
  string first_name = 2;
  string last_name = 3;
  string email = 4;
  // target_of_certification_ids defines the scope of the user
  repeated clouditor.orchestrator.v1.TargetOfEvaluation target_of_evaluation_ids = 5 [(tagger.tags) = "gorm:\"many2many:user_certification_target;\""];
}

// TODO(lebogg): Add API endpoint for adding a user

// TODO(lebogg): Add API endpoint for deleting a user

// TODO(lebogg): Add API endpoint for updating a user

// TODO(lebogg): Add API endpoint for getting a user

// TODO(lebogg): Add API endpoint for listing all users

// TODO(lebogg): Iteration 2 will extend this principle to groups
