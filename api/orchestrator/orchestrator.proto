// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.
syntax = "proto3";

package clouditor.orchestrator.v1;

import "api/assessment/assessment.proto";
import "api/assessment/metric.proto";
import "api/runtime/runtime.proto";
import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "tagger/tagger.proto";

option go_package = "clouditor.io/clouditor/api/orchestrator";

// Manages the orchestration of components within the Clouditor architecture
service Orchestrator {
  // Registers the passed assessment tool
  rpc RegisterAssessmentTool(RegisterAssessmentToolRequest) returns (AssessmentTool) {
    option (google.api.http) = {
      post: "/v1/orchestrator/assessment_tools"
      body: "tool"
    };
  }

  // Lists all assessment tools assessing evidences for the metric given by the
  // passed metric id
  rpc ListAssessmentTools(ListAssessmentToolsRequest) returns (ListAssessmentToolsResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/assessment_tools"};
  }

  // Returns assessment tool given by the passed tool id
  rpc GetAssessmentTool(GetAssessmentToolRequest) returns (AssessmentTool) {
    option (google.api.http) = {get: "/v1/orchestrator/assessment_tools/{tool_id}"};
  }

  // Updates the assessment tool given by the passed id
  rpc UpdateAssessmentTool(UpdateAssessmentToolRequest) returns (AssessmentTool) {
    option (google.api.http) = {
      put: "/v1/orchestrator/assessment_tools/{tool.id}"
      body: "tool"
    };
  }

  // Remove assessment tool with passed id from the list of active assessment
  // tools
  rpc DeregisterAssessmentTool(DeregisterAssessmentToolRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/orchestrator/assessment_tools/{tool_id}"};
  }

  // Stores the assessment result provided by an assessment tool
  rpc StoreAssessmentResult(StoreAssessmentResultRequest) returns (StoreAssessmentResultResponse) {
    option (google.api.http) = {
      post: "/v1/orchestrator/assessment_results"
      body: "result"
    };
  }

  // Stores stream of assessment results provided by an assessment tool and
  // returns a response stream. Part of the public API, not exposed as REST.
  rpc StoreAssessmentResults(stream StoreAssessmentResultRequest) returns (stream StoreAssessmentResultsResponse);

  // Get an assessment result by ID
  rpc GetAssessmentResult(GetAssessmentResultRequest) returns (clouditor.assessment.v1.AssessmentResult) {
    option (google.api.http) = {get: "/v1/orchestrator/assessment_results/{id}"};
  }

  // List all assessment results. Part of the public API, also exposed as REST.
  rpc ListAssessmentResults(ListAssessmentResultsRequest) returns (ListAssessmentResultsResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/assessment_results"};
  }

  // Creates a new metric
  rpc CreateMetric(CreateMetricRequest) returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {
      post: "/v1/orchestrator/metrics"
      body: "metric"
    };
  }

  // Updates an existing metric
  rpc UpdateMetric(UpdateMetricRequest) returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {
      put: "/v1/orchestrator/metrics/{metric.id}"
      body: "metric"
    };
  }

  // Returns the metric with the passed metric id
  rpc GetMetric(GetMetricRequest) returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {get: "/v1/orchestrator/metrics/{metric_id}"};
  }

  // List all metrics provided by the metric catalog
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/metrics"};
  }

  // Removes a new metric
  rpc RemoveMetric(RemoveMetricRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/orchestrator/metrics/{metric_id}"};
  }

  // Registers a new target cloud service
  rpc RegisterCloudService(RegisterCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {
      post: "/v1/orchestrator/cloud_services"
      body: "cloud_service"
    };
  }

  // Registers a new target cloud service
  rpc UpdateCloudService(UpdateCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {
      put: "/v1/orchestrator/cloud_services/{cloud_service.id}"
      body: "cloud_service"
    };
  }

  // Retrieves a target cloud service
  rpc GetCloudService(GetCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {get: "/v1/orchestrator/cloud_services/{cloud_service_id}"};
  }

  // Lists all target cloud services
  rpc ListCloudServices(ListCloudServicesRequest) returns (ListCloudServicesResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/cloud_services"};
  }

  // Removes a target cloud service
  rpc RemoveCloudService(RemoveCloudServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/orchestrator/cloud_services/{cloud_service_id}"};
  }

  // Retrieves target cloud service statistics
  rpc GetCloudServiceStatistics(GetCloudServiceStatisticsRequest) returns (GetCloudServiceStatisticsResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/cloud_services/statistics"};
  }

  // Updates a metric configuration (target value and operator) for a specific
  // service and metric ID
  rpc UpdateMetricConfiguration(UpdateMetricConfigurationRequest) returns (clouditor.assessment.v1.MetricConfiguration) {
    option (google.api.http) = {
      put:
        "/v1/orchestrator/cloud_services/{cloud_service_id}/"
        "metric_configurations/"
        "{metric_id}"
      body: "configuration"
    };
  }

  // Retrieves a metric configuration (target value and operator) for a specific
  // service and metric ID.
  rpc GetMetricConfiguration(GetMetricConfigurationRequest) returns (clouditor.assessment.v1.MetricConfiguration) {
    option (google.api.http) = {get:
        "/v1/orchestrator/cloud_services/{cloud_service_id}/"
        "metric_configurations/"
        "{metric_id}"
};
  }

  // Lists all a metric configurations (target value and operator) for a
  // specific service ID
  rpc ListMetricConfigurations(ListMetricConfigurationRequest) returns (ListMetricConfigurationResponse) {
    option (google.api.http) = {get:
        "/v1/orchestrator/cloud_services/{cloud_service_id}/"
        "metric_configurations"
};
  }

  // Updates an existing metric implementation
  rpc UpdateMetricImplementation(UpdateMetricImplementationRequest) returns (clouditor.assessment.v1.MetricImplementation) {
    option (google.api.http) = {
      put:
        "/v1/orchestrator/metrics/{implementation.metric_id}/"
        "implementation"
      body: "implementation"
    };
  }

  // Returns the metric implementation of the passed metric id
  rpc GetMetricImplementation(GetMetricImplementationRequest) returns (clouditor.assessment.v1.MetricImplementation) {
    option (google.api.http) = {get: "/v1/orchestrator/metrics/{metric_id}/implementation"};
  }

  rpc SubscribeMetricChangeEvents(SubscribeMetricChangeEventRequest) returns (stream MetricChangeEvent) {}

  // Creates a new certificate
  rpc CreateCertificate(CreateCertificateRequest) returns (Certificate) {
    option (google.api.http) = {
      post: "/v1/orchestrator/certificates"
      body: "certificate"
    };
  }

  // Retrieves a certificate
  rpc GetCertificate(GetCertificateRequest) returns (Certificate) {
    option (google.api.http) = {get: "/v1/orchestrator/certificates/{certificate_id}"};
  }

  // Lists all target certificates
  rpc ListCertificates(ListCertificatesRequest) returns (ListCertificatesResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/certificates"};
  }

  // Lists all target certificates without state history
  rpc ListPublicCertificates(ListPublicCertificatesRequest) returns (ListPublicCertificatesResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/public/certificates"};
  }

  // Updates an existing certificate
  rpc UpdateCertificate(UpdateCertificateRequest) returns (Certificate) {
    option (google.api.http) = {
      put: "/v1/orchestrator/certificates/{certificate.id}"
      body: "certificate"
    };
  }

  // Removes a certificate
  rpc RemoveCertificate(RemoveCertificateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/orchestrator/certificates/{certificate_id}"};
  }

  // Creates a new security controls catalog
  rpc CreateCatalog(CreateCatalogRequest) returns (Catalog) {
    option (google.api.http) = {
      post: "/v1/orchestrator/catalogs"
      body: "catalog"
    };
  }

  // Lists all security controls catalogs. Each catalog includes a list of its
  // categories but no additional sub-resources.
  rpc ListCatalogs(ListCatalogsRequest) returns (ListCatalogsResponse) {
    option (google.api.http) = {get: "/v1/orchestrator/catalogs"};
  }

  // Retrieves a specific catalog by it's ID. The catalog includes a list of all
  // of it categories as well as the first level of controls in each category.
  rpc GetCatalog(GetCatalogRequest) returns (Catalog) {
    option (google.api.http) = {get: "/v1/orchestrator/catalogs/{catalog_id}"};
  }

  // Removes a catalog
  rpc RemoveCatalog(RemoveCatalogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/orchestrator/catalogs/{catalog_id}"};
  }

  // Updates an existing certificate
  rpc UpdateCatalog(UpdateCatalogRequest) returns (Catalog) {
    option (google.api.http) = {
      put: "/v1/orchestrator/catalogs/{catalog.id}"
      body: "catalog"
    };
  }

  // Retrieves a category of a catalog specified by the catalog ID and the
  // category name. It includes the first level of controls within each
  // category.
  rpc GetCategory(GetCategoryRequest) returns (Category) {
    option (google.api.http) = {get: "/v1/orchestrator/catalogs/{catalog_id}/category/{category_name}"};
  }

  // If no additional parameters are specified, this lists all controls. If a
  // catalog ID and a category name is specified, then only controls containing
  // in this category are returned.
  rpc ListControls(ListControlsRequest) returns (ListControlsResponse) {
    option (google.api.http) = {
      get: "/v1/orchestrator/controls"
      additional_bindings {get:
          "/v1/orchestrator/catalogs/{catalog_id}/categories/"
          "{category_name}/controls"
}
    };
  }

  // Retrieves a control specified by the catalog ID, the control's category
  // name and the control ID. If present, it also includes a list of
  // sub-controls if present or a list of metrics if no sub-controls but metrics
  // are present.
  rpc GetControl(GetControlRequest) returns (Control) {
    option (google.api.http) = {get:
        "/v1/orchestrator/catalogs/{catalog_id}/categories/{category_name}/"
        "controls/{control_id}"
};
  }

  // Creates a new Target of Evaluation
  rpc CreateTargetOfEvaluation(CreateTargetOfEvaluationRequest) returns (TargetOfEvaluation) {
    option (google.api.http) = {
      post: "/v1/orchestrator/toes"
      body: "target_of_evaluation"
    };
  }

  // Retrieves a Target of Evaluation
  rpc GetTargetOfEvaluation(GetTargetOfEvaluationRequest) returns (TargetOfEvaluation) {
    option (google.api.http) = {get:
        "/v1/orchestrator/cloud_services/{cloud_service_id}/toes/"
        "{catalog_id}"
};
  }

  // Lists all Targets of Evaluation
  rpc ListTargetsOfEvaluation(ListTargetsOfEvaluationRequest) returns (ListTargetsOfEvaluationResponse) {
    option (google.api.http) = {
      get: "/v1/orchestrator/toes"
      additional_bindings {get: "/v1/orchestrator/cloud_services/{cloud_service_id}/toes"}
      additional_bindings {get: "/v1/orchestrator/catalogs/{catalog_id}/toes"}
    };
  }

  // Updates an existing Target of Evaluation
  rpc UpdateTargetOfEvaluation(UpdateTargetOfEvaluationRequest) returns (TargetOfEvaluation) {
    option (google.api.http) = {
      put:
        "/v1/orchestrator/cloud_services/"
        "{target_of_evaluation.cloud_service_id}/toes/"
        "{target_of_evaluation.catalog_id}"
      body: "target_of_evaluation"
    };
  }

  // Removes a Target of Evaluation
  rpc RemoveTargetOfEvaluation(RemoveTargetOfEvaluationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete:
        "/v1/orchestrator/cloud_services/{cloud_service_id}/toes/"
        "{catalog_id}"
};
  }

  // Get Runtime Information
  rpc GetRuntimeInfo(clouditor.runtime.v1.GetRuntimeInfoRequest) returns (clouditor.runtime.v1.Runtime) {
    option (google.api.http) = {get: "/v1/orchestrator/runtime_info"};
  }
}

message RegisterAssessmentToolRequest {
  AssessmentTool tool = 1 [(buf.validate.field).required = true];
}

message ListAssessmentToolsRequest {
  optional Filter filter = 1;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message Filter {
  // Optional. List only assessment results of a specific cloud service.
  optional string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
  // Optional. List only compliant assessment results.
  optional bool compliant = 2;
  // Optional. List only assessment results of a specific metric id.
  repeated string metric_ids = 3 [(buf.validate.field).repeated.items.string.min_len = 1];
  optional string metric_id = 4 [(buf.validate.field).string.min_len = 1];
  // Optional. List only assessment result from a specific assessment tool.
  optional string tool_id = 5 [(buf.validate.field).string.min_len = 1];
}

message ListAssessmentToolsResponse {
  repeated AssessmentTool tools = 1;
  string next_page_token = 2;
}

message GetAssessmentToolRequest {
  string tool_id = 1 [(buf.validate.field).string.min_len = 1];
}

message UpdateAssessmentToolRequest {
  AssessmentTool tool = 2 [(buf.validate.field).required = true];
}

message DeregisterAssessmentToolRequest {
  string tool_id = 1 [(buf.validate.field).string.min_len = 1];
}

message StoreAssessmentResultRequest {
  clouditor.assessment.v1.AssessmentResult result = 1 [(buf.validate.field).required = true];
}

// StoreAssessmentResultReponse belongs to StoreAssessmentResult, which uses a
// custom unary RPC and therefore requires a response message according to the
// style convention. Since no return values are required, this is empty.
message StoreAssessmentResultResponse {}

// StoreAssessmentResultsReponse belongs to StoreAssessmentResults, which uses a
// custom bidirectional streaming RPC and therefore requires a response message
// according to the style convention. The bidirectional streaming needs the
// status and its message in the response for error handling.
message StoreAssessmentResultsResponse {
  bool status = 1;
  string status_message = 2;
}

message CreateMetricRequest {
  clouditor.assessment.v1.Metric metric = 1 [(buf.validate.field).required = true];
}

message UpdateMetricRequest {
  clouditor.assessment.v1.Metric metric = 1 [(buf.validate.field).required = true];
}

message GetMetricRequest {
  string metric_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ListMetricsRequest {
  message Filter {
    optional bool include_deprecated = 1;
  }

  optional Filter filter = 1;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message RemoveMetricRequest {
  string metric_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ListMetricsResponse {
  repeated clouditor.assessment.v1.Metric metrics = 1;
  string next_page_token = 2;
}

message GetCloudServiceRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
}

message RegisterCloudServiceRequest {
  CloudService cloud_service = 1 [(buf.validate.field).required = true];
}

message UpdateCloudServiceRequest {
  CloudService cloud_service = 1 [(buf.validate.field).required = true];
}

message RemoveCloudServiceRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
}

message ListCloudServicesRequest {
  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}
message ListCloudServicesResponse {
  repeated CloudService services = 1;
  string next_page_token = 2;
}

message GetCloudServiceStatisticsRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
}

message GetCloudServiceStatisticsResponse {
  // number of discovered resources per cloud service
  int64 number_of_discovered_resources = 1;

  // number of assessment results per cloud service
  int64 number_of_assessment_results = 2;

  // number of evidences per cloud service
  int64 number_of_evidences = 3;

  // number of selected catalogs per cloud service
  int64 number_of_selected_catalogs = 4;
}

message UpdateMetricConfigurationRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];

  string metric_id = 2 [(buf.validate.field).string.min_len = 1];

  clouditor.assessment.v1.MetricConfiguration configuration = 3 [(buf.validate.field).required = true];
}

message GetMetricConfigurationRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];

  string metric_id = 2 [(buf.validate.field).string.min_len = 1];
}

message ListMetricConfigurationRequest {
  string cloud_service_id = 10 [(buf.validate.field).string.uuid = true];
}

message ListMetricConfigurationResponse {
  // A map of metric configurations associated by their metric ID
  map<string, clouditor.assessment.v1.MetricConfiguration> configurations = 1;
}

message UpdateMetricImplementationRequest {
  clouditor.assessment.v1.MetricImplementation implementation = 1 [(buf.validate.field).required = true];
}

message GetMetricImplementationRequest {
  string metric_id = 1 [(buf.validate.field).string.min_len = 1];
}

message SubscribeMetricChangeEventRequest {}

// MetricChangeEvent represents a change of either a metric configuration or
// implementation.
message MetricChangeEvent {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_CONFIG_CHANGED = 1;
    TYPE_IMPLEMENTATION_CHANGED = 2;
    TYPE_METADATA_CHANGED = 3;
  }

  Type type = 1 [(buf.validate.field).enum.defined_only = true];

  // The metric that is changing.
  string metric_id = 2 [(buf.validate.field).string.min_len = 1];

  // The cloud service id that is affected by this change. Primarily
  // concerns metric configuration changes.
  string cloud_service_id = 3 [(buf.validate.field).string.uuid = true];
}

// Represents an external tool or service that offers assessments according to
// certain metrics.
message AssessmentTool {
  string id = 1 [
    (buf.validate.field).string = {uuid: true},
    (buf.validate.field).ignore_empty = true
  ];

  string name = 2 [(buf.validate.field).string.min_len = 1];

  string description = 3;

  // a list of metrics that this tool can assess, referred by their ids
  repeated string available_metrics = 4 [(buf.validate.field).repeated.items.string.min_len = 1];
}

message CloudService {
  string id = 1 [
    (buf.validate.field).string = {uuid: true},
    (buf.validate.field).ignore_empty = true
  ];

  string name = 2 [(buf.validate.field).string.min_len = 1];

  string description = 3;

  repeated Catalog catalogs_in_scope = 4 [
    (tagger.tags) = "gorm:\"many2many:target_of_evaluations\"",
    (buf.validate.field).repeated.items.required = true
  ];

  repeated clouditor.assessment.v1.Metric configured_metrics = 5 [
    (tagger.tags) = "gorm:\"many2many:metric_configurations\"",
    (buf.validate.field).repeated.items.required = true
  ];

  message Metadata {
    // a map of key/value pairs, e.g., env:prod
    map<string, string> labels = 1;

    // an icon for the cloud service used by the UI
    optional string icon = 2;
  }

  // creation time of the cloud_service
  optional google.protobuf.Timestamp created_at = 6 [(tagger.tags) = "gorm:\"serializer:timestamppb;type:datetime\""];

  // last update time of the cloud_service
  optional google.protobuf.Timestamp updated_at = 7 [(tagger.tags) = "gorm:\"serializer:timestamppb;type:datetime\""];

  // additional metadata of the cloud service, mostly used for the UI
  optional Metadata metadata = 10 [(tagger.tags) = "gorm:\"serializer:json\""];
}

message Catalog {
  string id = 1 [(buf.validate.field).string.min_len = 1];

  string name = 2 [(buf.validate.field).string.min_len = 1];

  string description = 3;

  repeated Category categories = 4 [
    (tagger.tags) = "gorm:\"constraint:OnDelete:CASCADE\"",
    (buf.validate.field).repeated.items.required = true
  ];

  // Certain security catalogs do not allow to select the scope of the controls,
  // but all controls are automatically "in scope", however they can be set to a
  // DELEGATED status.
  bool all_in_scope = 5;

  // A list of the assurance levels, e.g., basic, substantial and high for the
  // EUCS catalog.
  repeated string assurance_levels = 7 [(tagger.tags) = "gorm:\"serializer:json\""];

  // Catalogs short name, e.g. EUCS
  string short_name = 9;

  message Metadata {
    // a color for the cloud service used by the UI
    optional string color = 3;
  }

  // metadata of the catalog
  optional Metadata metadata = 6 [(tagger.tags) = "gorm:\"serializer:json\""];
}

message Category {
  string name = 1 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];

  // Reference to the catalog this category belongs to.
  string catalog_id = 2 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];

  string description = 3;

  repeated Control controls = 4 [
    (tagger.tags) =
      "gorm:\"foreignKey:category_name,category_"
      "catalog_id;references:name,catalog_id;constraint:OnDelete:CASCADE\""
,
    (buf.validate.field).repeated.items.required = true
  ];
}

// Control represents a certain Control that needs to be fulfilled. It could be
// a Control in a certification catalog. It follows the OSCAL model. A
// requirement in the EUCS terminology, e.g., is represented as the lowest
// sub-control.
message Control {
  // A short name of the control, e.g. OPS-01, as used in OSCAL; it is not a
  // unique ID!
  string id = 1 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];
  string category_name = 2 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];
  string category_catalog_id = 3 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];

  // Human-readable name of the control
  string name = 4 [(buf.validate.field).string.min_len = 1];

  // Description of the control
  string description = 5;

  // List of sub - controls -
  //     this is in accordance with the OSCAL model.
  repeated Control controls = 6 [
    (tagger.tags) =
      "gorm:\"foreignKey:parent_control_id,parent_control_"
      "category_name,parent_control_category_catalog_id;"
      "references=id,category_name;category_catalog_id\""
,
    (buf.validate.field).repeated.items.required = true
  ];

  // metrics contains either a list of reference to metrics - in this case only
  // the id field of the metric is populated - or a list of populated metric
  // meta-data, most likely returned by the database.
  repeated clouditor.assessment.v1.Metric metrics = 7 [
    (tagger.tags) = "gorm:\"many2many:control_metrics;constraint:OnDelete:CASCADE\"",
    (buf.validate.field).repeated.items.required = true
  ];

  // Reference to the parent category this control belongs to.
  optional string parent_control_id = 8 [(buf.validate.field).string.min_len = 1];
  optional string parent_control_category_name = 9 [(buf.validate.field).string.min_len = 1];
  optional string parent_control_category_catalog_id = 10 [(buf.validate.field).string.min_len = 1];

  // An assurance level is not offered by every catalog, therefore it is
  // optional.
  optional string assurance_level = 11 [(buf.validate.field).string.pattern = "^(|basic|substantial|high|low|medium)$"];
}

// A Target of Evaluation binds a cloud service to a catalog, so the service is
// evaluated regarding this catalog's controls
message TargetOfEvaluation {
  string cloud_service_id = 1 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.uuid = true
  ];
  string catalog_id = 2 [
    (tagger.tags) = "gorm:\"primaryKey\"",
    (buf.validate.field).string.min_len = 1
  ];

  // an assurance level is not offered by every catalog, therefore it is
  // optional
  optional string assurance_level = 3 [(buf.validate.field).string.pattern = "^(|basic|substantial|high|low|medium)$"];
}

message GetAssessmentResultRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}

message ListAssessmentResultsRequest {
  optional Filter filter = 1;
  // Optional. Latest results grouped by resource_id and metric_id.
  optional bool latest_by_resource_id = 2;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListAssessmentResultsResponse {
  repeated clouditor.assessment.v1.AssessmentResult results = 1;
  string next_page_token = 2;
}

message CreateTargetOfEvaluationRequest {
  TargetOfEvaluation target_of_evaluation = 1 [(buf.validate.field).required = true];
}

message RemoveTargetOfEvaluationRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
  string catalog_id = 2 [(buf.validate.field).string.min_len = 1];
}

message GetTargetOfEvaluationRequest {
  string cloud_service_id = 1 [(buf.validate.field).string.uuid = true];
  string catalog_id = 2 [(buf.validate.field).string.min_len = 1];
}

message ListTargetsOfEvaluationRequest {
  // We cannot create additional bindings when the parameter is optional so we
  // check for != "" in the method to see if it is set when the service is
  // specified, return all Targets of Evaluation that evaluate the given service
  // for any catalog
  string cloud_service_id = 1;
  // when the catalog is specified, return all Targets of Evaluation that
  // evaluate the given catalog for any service
  string catalog_id = 2;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListTargetsOfEvaluationResponse {
  repeated TargetOfEvaluation target_of_evaluation = 1;
  string next_page_token = 2;
}

message UpdateTargetOfEvaluationRequest {
  TargetOfEvaluation target_of_evaluation = 3 [(buf.validate.field).required = true];
}

message GetCertificateRequest {
  string certificate_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ListCertificatesRequest {
  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListCertificatesResponse {
  repeated Certificate certificates = 1;
  string next_page_token = 2;
}

message ListPublicCertificatesRequest {
  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListPublicCertificatesResponse {
  repeated Certificate certificates = 1;
  string next_page_token = 2;
}

message UpdateCertificateRequest {
  Certificate certificate = 1 [(buf.validate.field).required = true];
}

message CreateCatalogRequest {
  Catalog catalog = 1 [(buf.validate.field).required = true];
}

message RemoveCatalogRequest {
  string catalog_id = 1 [(buf.validate.field).string.min_len = 1];
}

message GetCatalogRequest {
  string catalog_id = 1 [(buf.validate.field).string.min_len = 1];
}

message ListCatalogsRequest {
  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListCatalogsResponse {
  repeated Catalog catalogs = 1;
  string next_page_token = 2;
}

message UpdateCatalogRequest {
  Catalog catalog = 1 [(buf.validate.field).required = true];
}

message GetCategoryRequest {
  string catalog_id = 1 [(buf.validate.field).string.min_len = 1];
  string category_name = 2 [(buf.validate.field).string.min_len = 1];
}

message GetControlRequest {
  string catalog_id = 1 [(buf.validate.field).string.min_len = 1];
  string category_name = 2 [(buf.validate.field).string.min_len = 1];
  string control_id = 3 [(buf.validate.field).string.min_len = 1];
}

message ListControlsRequest {
  // return either all controls or only the controls of the specified category
  string catalog_id = 1;
  string category_name = 2;

  message Filter {
    // Optional. Lists only controls with the specified assurance levels.
    repeated string assurance_levels = 1 [(buf.validate.field).repeated.items.string.min_len = 1];
  }

  optional Filter filter = 3;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListControlsResponse {
  repeated Control controls = 1;
  string next_page_token = 2;
}

message CreateCertificateRequest {
  Certificate certificate = 1 [(buf.validate.field).required = true];
}

message RemoveCertificateRequest {
  string certificate_id = 1 [(buf.validate.field).string.min_len = 1];
}

// An ISO17021-based certificate
message Certificate {
  string id = 1 [(buf.validate.field).string.min_len = 1];
  string name = 2 [(buf.validate.field).string.min_len = 1];
  string cloud_service_id = 3 [(buf.validate.field).string.uuid = true];
  string issue_date = 4;
  string expiration_date = 5;
  string standard = 6;
  string assurance_level = 7;
  string cab = 8;
  string description = 9;
  // A list of states at specific times
  repeated State states = 10 [(tagger.tags) = "gorm:\"constraint:OnDelete:CASCADE\""];
}

// A state of a certificate at a given time
message State {
  string id = 1;
  // An EUCS-defined state, e.g. `new`, `suspended` or `withdrawn`
  string state = 2;
  string tree_id = 3;
  string timestamp = 4;
  // Reference to the certificate
  string certificate_id = 5;
}

// TargetOfEvaluationChangeEvent represents a change of either a Target of
// Evaluation or Control Monitoring Status and the TargetOfEvaluation hook
// function can be informed about the reason of its call.
message TargetOfEvaluationChangeEvent {
  // Type represents the type of the change event. Type can be a change event
  // regarding the Target of Evaluation or the Control Monitoring Status.
  enum Type {
    TYPE_UNSPECIFIED = 0;

    TYPE_TARGET_OF_EVALUATION_CREATED = 1;
    TYPE_TARGET_OF_EVALUATION_UPDATED = 2;
    TYPE_TARGET_OF_EVALUATION_REMOVED = 3;
  }

  Type type = 1 [(buf.validate.field).enum.defined_only = true];

  // Optional. If the type is a TARGET_OF_EVALUATION_* the target_of_evaluation
  // field must be set
  optional TargetOfEvaluation target_of_evaluation = 2 [(buf.validate.field).required = true];
}
