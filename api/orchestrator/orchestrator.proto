/*
 * Copyright 2016-2022 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
syntax = "proto3";

package clouditor.orchestrator.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "api/assessment/metric.proto";
import "api/assessment/assessment.proto";
import "tagger/tagger.proto";

option go_package = "clouditor.io/clouditor/api/orchestrator";

// Manages the orchestration of components within the Clouditor architecture
service Orchestrator {
  // Registers the passed assessment tool
  rpc RegisterAssessmentTool(RegisterAssessmentToolRequest)
      returns (AssessmentTool) {
    option (google.api.http) = {
      post : "/v1/orchestrator/assessment_tools"
      body : "tool"
    };
  }

  // Lists all assessment tools assessing evidences for the metric given by the
  // passed metric id
  rpc ListAssessmentTools(ListAssessmentToolsRequest)
      returns (ListAssessmentToolsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/assessment_tools"
      additional_bindings {
        get : "/v1/orchestrator/{metric_id}/assessment_tools"
      }
    };
  }

  // Returns assessment tool given by the passed tool id
  rpc GetAssessmentTool(GetAssessmentToolRequest) returns (AssessmentTool) {
    option (google.api.http) = {
      get : "/v1/orchestrator/assessment_tools/{tool_id}"
    };
  }

  // Updates the assessment tool given by the passed id
  rpc UpdateAssessmentTool(UpdateAssessmentToolRequest)
      returns (AssessmentTool) {
    option (google.api.http) = {
      put : "/v1/orchestrator/assessment_tools/{tool_id}"
      body : "tool"
    };
  }

  // Remove assessment tool with passed id from the list of active assessment
  // tools
  rpc DeregisterAssessmentTool(DeregisterAssessmentToolRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestrator/assessment_tools/{tool_id}"
    };
  }

  // Stores the assessment result provided by an assessment tool
  rpc StoreAssessmentResult(StoreAssessmentResultRequest)
      returns (StoreAssessmentResultResponse) {
    option (google.api.http) = {
      post : "/v1/orchestrator/assessment_results"
      body : "result"
    };
  }

  // Stores stream of assessment results provided by an assessment tool and
  // returns a response stream. Part of the public API, not exposed as REST.
  rpc StoreAssessmentResults(stream StoreAssessmentResultRequest)
      returns (stream StoreAssessmentResultResponse);

  // List all assessment results. Part of the public API, also exposed as REST.
  rpc ListAssessmentResults(
      clouditor.assessment.v1.ListAssessmentResultsRequest)
      returns (clouditor.assessment.v1.ListAssessmentResultsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/assessment_results"
      additional_bindings {
        get : "/v1/orchestrator/cloud_services/{filtered_cloud_service_id}/"
              "assessment_results"
      }
    };
  }

  // Creates a new metric
  rpc CreateMetric(CreateMetricRequest)
      returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {
      post : "/v1/orchestrator/metrics"
      body : "metric"
    };
  }

  // Updates an existing metric
  rpc UpdateMetric(UpdateMetricRequest)
      returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {
      put : "/v1/orchestrator/metrics/{metric_id}"
      body : "metric"
    };
  }

  // Returns the metric with the passed metric id
  rpc GetMetric(GetMetricRequest) returns (clouditor.assessment.v1.Metric) {
    option (google.api.http) = {
      get : "/v1/orchestrator/metrics/{metric_id}"
    };
  }

  // List all metrics provided by the metric catalog
  rpc ListMetrics(ListMetricsRequest) returns (ListMetricsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/metrics"
    };
  }

  // Registers a new target cloud service
  rpc RegisterCloudService(RegisterCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {
      post : "/v1/orchestrator/cloud_services"
      body : "service"
    };
  }

  // Registers a new target cloud service
  rpc UpdateCloudService(UpdateCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {
      put : "/v1/orchestrator/cloud_services/{cloud_service_id}"
      body : "service"
    };
  }

  // Retrieves a target cloud service
  rpc GetCloudService(GetCloudServiceRequest) returns (CloudService) {
    option (google.api.http) = {
      get : "/v1/orchestrator/cloud_services/{cloud_service_id}"
    };
  }

  // Lists all target cloud services
  rpc ListCloudServices(ListCloudServicesRequest)
      returns (ListCloudServicesResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/cloud_services"
    };
  }

  // Removes a target cloud service
  rpc RemoveCloudService(RemoveCloudServiceRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestrator/cloud_services/{cloud_service_id}"
    };
  }

  // Updates a metric configuration (target value and operator) for a specific
  // service and metric ID
  rpc UpdateMetricConfiguration(UpdateMetricConfigurationRequest)
      returns (clouditor.assessment.v1.MetricConfiguration) {
    option (google.api.http) = {
      put : "/v1/orchestrator/cloud_services/{cloud_service_id}/"
            "metric_configurations/"
            "{metric_id}"
      body : "configuration"
    };
  }

  // Retrieves a metric configuration (target value and operator) for a specific
  // service and metric ID.
  rpc GetMetricConfiguration(GetMetricConfigurationRequest)
      returns (clouditor.assessment.v1.MetricConfiguration) {
    option (google.api.http) = {
      get : "/v1/orchestrator/cloud_services/{cloud_service_id}/"
            "metric_configurations/"
            "{metric_id}"
    };
  }

  // Lists all a metric configurations (target value and operator) for a
  // specific service ID
  rpc ListMetricConfigurations(ListMetricConfigurationRequest)
      returns (ListMetricConfigurationResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/cloud_services/{cloud_service_id}/"
            "metric_configurations"
    };
  }

  // Updates an existing metric implementation
  rpc UpdateMetricImplementation(UpdateMetricImplementationRequest)
      returns (clouditor.assessment.v1.MetricImplementation) {
    option (google.api.http) = {
      put : "/v1/orchestrator/metrics/{metric_id}/implementation"
      body : "implementation"
    };
  }

  // Returns the metric implementation of the passed metric id
  rpc GetMetricImplementation(GetMetricImplementationRequest)
      returns (clouditor.assessment.v1.MetricImplementation) {
    option (google.api.http) = {
      get : "/v1/orchestrator/metrics/{metric_id}/implementation"
    };
  }

  rpc SubscribeMetricChangeEvents(SubscribeMetricChangeEventRequest)
      returns (stream MetricChangeEvent) {}

  // Creates a new certificate
  rpc CreateCertificate(CreateCertificateRequest) returns (Certificate) {
    option (google.api.http) = {
      post : "/v1/orchestrator/certificates"
      body : "certificate"
    };
  }

  // Retrieves a certificate
  rpc GetCertificate(GetCertificateRequest) returns (Certificate) {
    option (google.api.http) = {
      get : "/v1/orchestrator/certificates/{certificate_id}"
    };
  }

  // Lists all target certificates
  rpc ListCertificates(ListCertificatesRequest)
      returns (ListCertificatesResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/certificates"
    };
  }

  // Updates an existing certificate
  rpc UpdateCertificate(UpdateCertificateRequest) returns (Certificate) {
    option (google.api.http) = {
      put : "/v1/orchestrator/certificates/{certificate_id}"
      body : "certificate"
    };
  }

  // Removes a certificate
  rpc RemoveCertificate(RemoveCertificateRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestrator/certificates/{certificate_id}"
    };
  }

  // Creates a new security controls catalog
  rpc CreateCatalog(CreateCatalogRequest) returns (Catalog) {
    option (google.api.http) = {
      post : "/v1/orchestrator/catalogs"
      body : "catalog"
    };
  }

  // Lists all security controls catalogs. Each catalog includes a list of its
  // categories but no additional sub-resources.
  rpc ListCatalogs(ListCatalogsRequest) returns (ListCatalogsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/catalogs"
    };
  }

  // Retrieves a specific catalog by it's ID. The catalog includes a list of all
  // of it categories as well as the first level of controls in each category.
  rpc GetCatalog(GetCatalogRequest) returns (Catalog) {
    option (google.api.http) = {
      get : "/v1/orchestrator/catalogs/{catalog_id}"
    };
  }

  // Removes a catalog
  rpc RemoveCatalog(RemoveCatalogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestrator/catalogs/{catalog_id}"
    };
  }

  // Updates an existing certificate
  rpc UpdateCatalog(UpdateCatalogRequest) returns (Catalog) {
    option (google.api.http) = {
      put : "/v1/orchestrator/catalogs/{catalog_id}"
      body : "catalog"
    };
  }

  // Retrieves a category of a catalog specified by the catalog ID and the
  // category name. It includes the first level of controls within each
  // category.
  rpc GetCategory(GetCategoryRequest) returns (Category) {
    option (google.api.http) = {
      get : "/v1/orchestrator/catalogs/{catalog_id}/category/{category_name}"
    };
  }

  // If no additional parameters are specified, this lists all controls. If a
  // catalog ID and a category name is specified, then only controls containing
  // in this category are returned.
  rpc ListControls(ListControlsRequest) returns (ListControlsResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/controls"
      additional_bindings {
        get : "/v1/orchestrator/catalogs/{catalog_id}/categories/"
              "{category_name}/controls"
      }
    };
  }

  // Retrieves a control specified by the catalog ID, the control's category
  // name and the control ID. If present, it also includes a list of
  // sub-controls if present or a list of metrics if no sub-controls but metrics
  // are present.
  rpc GetControl(GetControlRequest) returns (Control) {
    option (google.api.http) = {
      get : "/v1/orchestrator/catalogs/{catalog_id}/categories/{category_name}/"
            "controls/{control_id}"
    };
  }

  // Creates a new Target of Evaluation
  rpc CreateTargetOfEvaluation(CreateTargetOfEvaluationRequest)
      returns (TargetOfEvaluation) {
    option (google.api.http) = {
      post : "/v1/orchestrator/toes"
      body : "toe"
    };
  }

  // Retrieves a Target of Evaluation
  rpc GetTargetOfEvaluation(GetTargetOfEvaluationRequest)
      returns (TargetOfEvaluation) {
    option (google.api.http) = {
      get : "/v1/orchestrator/cloud_services/{cloud_service_id}/catalogs/"
            "{catalog_id}/toes"
    };
  }

  // Lists all Targets of Evaluation
  rpc ListTargetsOfEvaluation(ListTargetsOfEvaluationRequest)
      returns (ListTargetsOfEvaluationResponse) {
    option (google.api.http) = {
      get : "/v1/orchestrator/toes"
      additional_bindings {
        get : "/v1/orchestrator/cloud_services/{cloud_service_id}/toes"
      }
      additional_bindings {get : "/v1/orchestrator/catalogs/{catalog_id}/toes"}
    };
  }

  // Updates an existing Target of Evaluation
  rpc UpdateTargetOfEvaluation(UpdateTargetOfEvaluationRequest)
      returns (TargetOfEvaluation) {
    option (google.api.http) = {
      put : "/v1/orchestrator/cloud_services/{cloud_service_id}/catalogs/"
            "{catalog_id}/toes"
      body : "toe"
    };
  }

  // Removes a Target of Evaluation
  rpc RemoveTargetOfEvaluation(RemoveTargetOfEvaluationRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/orchestrator/cloud_services/{cloud_service_id}/catalogs/"
               "{catalog_id}/toes"
    };
  }
}

message RegisterAssessmentToolRequest { AssessmentTool tool = 1; }

message ListAssessmentToolsRequest {
  // filter tools by metric id
  string metric_id = 1;
  int32 page_size = 2;
  string page_token = 3;
  string order_by = 4;
  bool asc = 5;
}
message ListAssessmentToolsResponse {
  repeated AssessmentTool tools = 1;
  string next_page_token = 2;
}

message GetAssessmentToolRequest { string tool_id = 1; }

message UpdateAssessmentToolRequest {
  string tool_id = 1;
  AssessmentTool tool = 2;
}

message DeregisterAssessmentToolRequest { string tool_id = 1; }

message StoreAssessmentResultRequest {
  clouditor.assessment.v1.AssessmentResult result = 1;
}
message StoreAssessmentResultResponse {
  bool status = 1;
  string status_message = 2;
}

message CreateMetricRequest { clouditor.assessment.v1.Metric metric = 1; }

message UpdateMetricRequest {
  string metric_id = 1;
  clouditor.assessment.v1.Metric metric = 2;
}

message GetMetricRequest { string metric_id = 1; }

message ListMetricsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;
}

message ListMetricsResponse {
  repeated clouditor.assessment.v1.Metric metrics = 1;
  string next_page_token = 2;
}

message GetCloudServiceRequest { string cloud_service_id = 1; }

message RegisterCloudServiceRequest { CloudService service = 1; }

message UpdateCloudServiceRequest {
  string cloud_service_id = 1;
  CloudService service = 2;
}

message RemoveCloudServiceRequest { string cloud_service_id = 1; }

message ListCloudServicesRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;
}
message ListCloudServicesResponse {
  repeated CloudService services = 1;
  string next_page_token = 2;
}

message UpdateMetricConfigurationRequest {
  string cloud_service_id = 1;

  string metric_id = 2;

  clouditor.assessment.v1.MetricConfiguration configuration = 3;
}

message GetMetricConfigurationRequest {
  string cloud_service_id = 1;

  string metric_id = 2;
}

message ListMetricConfigurationRequest { string cloud_service_id = 1; }

message ListMetricConfigurationResponse {
  // A map of metric configurations associated by their metric ID
  map<string, clouditor.assessment.v1.MetricConfiguration> configurations = 1;
}

message UpdateMetricImplementationRequest {
  string metric_id = 1;
  clouditor.assessment.v1.MetricImplementation implementation = 2;
}

message GetMetricImplementationRequest {
  string metric_id = 1;
  string lang = 2;
}

message SubscribeMetricChangeEventRequest {}

// MetricChangeEvent represents a change of either a metric configuration or
// implementation.
message MetricChangeEvent {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    CONFIG_CHANGED = 1;
    IMPLEMENTATION_CHANGED = 2;
    METADATA_CHANGED = 3;
  }

  Type type = 1;

  // The metric that is changing.
  string metric_id = 2;

  // Optionally, the service id that is affected by this change. Primarily
  // concerns metric configuration changes.
  string cloud_service_id = 3;
}

// Represents an external tool or service that offers assessments according to
// certain metrics.
message AssessmentTool {
  string id = 1;

  string name = 2;

  string description = 3;

  // a list of metrics that this tool can assess, referred by their ids
  repeated string available_metrics = 4;
}

message CloudService {
  string id = 1;

  string name = 2;

  string description = 3;

  repeated Catalog catalogs_in_scope = 4
      [ (tagger.tags) = "gorm:\"many2many:target_of_evaluations\"" ];

  repeated clouditor.assessment.v1.Metric configured_metrics = 5
      [ (tagger.tags) = "gorm:\"many2many:metric_configurations\"" ];
}

message Catalog {
  string id = 1;

  string name = 2;

  string description = 3;

  repeated Category categories = 4
      [ (tagger.tags) = "gorm:\"constraint:OnDelete:CASCADE\"" ];
}

message Category {
  string name = 1 [ (tagger.tags) = "gorm:\"primaryKey\"" ];

  // Reference to the catalog this category belongs to.
  string catalog_id = 2 [ (tagger.tags) = "gorm:\"primaryKey\"" ];

  string description = 3;

  repeated Control controls = 4 [
    (tagger.tags) =
        "gorm:\"foreignKey:category_name,category_"
        "catalog_id;references:name,catalog_id;constraint:OnDelete:CASCADE\""
  ];
}

// Control represents a certain Control that needs to be fulfilled. It could be
// a Control in a certification catalog. It follows the OSCAL model. A
// requirement in the EUCS terminology, e.g., is represented as the lowest
// sub-control.
message Control {
  // A short name of the control, e.g. OPS-01, as used in OSCAL; it is not a
  // unique ID!
  string id = 1 [ (tagger.tags) = "gorm:\"primaryKey\"" ];
  string category_name = 2 [ (tagger.tags) = "gorm:\"primaryKey\"" ];
  string category_catalog_id = 3 [ (tagger.tags) = "gorm:\"primaryKey\"" ];

  // Human-readable name of the control
  string name = 4;

  // Description of the control
  string description = 5;

  // List of sub - controls -
  //     this is in accordance with the OSCAL model.
  repeated Control controls = 6
      [ (tagger.tags) = "gorm:\"foreignKey:parent_control_id,parent_control_"
                        "category_name,parent_control_category_catalog_id;"
                        "references=id,category_name;category_catalog_id\"" ];
  // metrics contains either a list of reference to metrics - in this case only
  // the id field of the metric is populated - or a list of populated metric
  // meta-data, most likely returned by the database.
  repeated clouditor.assessment.v1.Metric metrics = 7
      [ (tagger.tags) =
            "gorm:\"many2many:control_metrics;constraint:OnDelete:CASCADE\"" ];

  // Reference to the parent category this control belongs to.

  optional string parent_control_id = 8;
  optional string parent_control_category_name = 9;
  optional string parent_control_category_catalog_id = 10;
}

// A Target of Evaluation binds a cloud service to a catalog, so the service is
// evaluated regarding this catalog's controls
message TargetOfEvaluation {
  string cloud_service_id = 1 [ (tagger.tags) = "gorm:\"primaryKey\"" ];
  string catalog_id = 2 [ (tagger.tags) = "gorm:\"primaryKey\"" ];

  // an assurance level is not offered by every catalog, therefore it is
  // optional
  optional string assurance_level = 3;
}

message CreateTargetOfEvaluationRequest { TargetOfEvaluation toe = 1; }

message RemoveTargetOfEvaluationRequest {
  string cloud_service_id = 1;
  string catalog_id = 2;
}

message GetTargetOfEvaluationRequest {
  string cloud_service_id = 1;
  string catalog_id = 2;
}

message ListTargetsOfEvaluationRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;
  // We cannot create additional bindings when the parameter is optional so we
  // check for != "" in the method to see if it is set when the service is
  // specified, return all ToEs that evaluate the given service for any catalog
  string cloud_service_id = 5;
  // when the catalog is specified, return all ToEs that evaluate the given
  // catalog for any service
  string catalog_id = 6;
}

message ListTargetsOfEvaluationResponse {
  repeated TargetOfEvaluation toes = 1;
  string next_page_token = 2;
}

message UpdateTargetOfEvaluationRequest {
  string cloud_service_id = 1;
  string catalog_id = 2;
  TargetOfEvaluation toe = 3;
}

message GetCertificateRequest { string certificate_id = 1; }

message ListCertificatesRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;
}
message ListCertificatesResponse {
  repeated Certificate certificates = 1;
  string next_page_token = 2;
}

message UpdateCertificateRequest {
  string certificate_id = 1;
  Certificate certificate = 2;
}

message CreateCatalogRequest { Catalog catalog = 1; }

message RemoveCatalogRequest { string catalog_id = 1; }

message GetCatalogRequest { string catalog_id = 1; }

message ListCatalogsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;
}

message ListCatalogsResponse {
  repeated Catalog catalogs = 1;
  string next_page_token = 2;
}

message UpdateCatalogRequest {
  string catalog_id = 1;
  Catalog catalog = 2;
}

message GetCategoryRequest {
  string catalog_id = 1;
  string category_name = 2;
}

message GetControlRequest {
  string catalog_id = 1;
  string category_name = 2;
  string control_id = 3;
}

message ListControlsRequest {
  int32 page_size = 1;
  string page_token = 2;
  string order_by = 3;
  bool asc = 4;

  // return either all controls or only the controls of the specified category
  string catalog_id = 5;
  string category_name = 6;
}

message ListControlsResponse {
  repeated Control controls = 1;
  string next_page_token = 2;
}

message CreateCertificateRequest { Certificate certificate = 1; }

message RemoveCertificateRequest { string certificate_id = 1; }

// An ISO17021-based certificate
message Certificate {
  string id = 1;
  string name = 2;
  string cloud_service_id = 3;
  string issue_date = 4;
  string expiration_date = 5;
  string standard = 6;
  string assurance_level = 7;
  string cab = 8;
  string description = 9;
  // A list of states at specific times
  repeated State states = 10
      [ (tagger.tags) = "gorm:\"constraint:OnDelete:CASCADE\"" ];
}

// A state of a certificate at a given time
message State {
  string id = 1;
  // An EUCS-defined state, e.g. `new`, `suspended` or `withdrawn`
  string state = 2;
  string tree_id = 3;
  string timestamp = 4;
  // Reference to the certificate
  string certificate_id = 5;
}
