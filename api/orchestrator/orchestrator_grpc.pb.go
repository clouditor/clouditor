// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/orchestrator/orchestrator.proto

package orchestrator

import (
	assessment "clouditor.io/clouditor/api/assessment"
	runtime "clouditor.io/clouditor/api/runtime"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestratorClient interface {
	// Registers the passed assessment tool
	RegisterAssessmentTool(ctx context.Context, in *RegisterAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error)
	// Lists all assessment tools assessing evidences for the metric given by the
	// passed metric id
	ListAssessmentTools(ctx context.Context, in *ListAssessmentToolsRequest, opts ...grpc.CallOption) (*ListAssessmentToolsResponse, error)
	// Returns assessment tool given by the passed tool id
	GetAssessmentTool(ctx context.Context, in *GetAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error)
	// Updates the assessment tool given by the passed id
	UpdateAssessmentTool(ctx context.Context, in *UpdateAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error)
	// Remove assessment tool with passed id from the list of active assessment
	// tools
	DeregisterAssessmentTool(ctx context.Context, in *DeregisterAssessmentToolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Stores the assessment result provided by an assessment tool
	StoreAssessmentResult(ctx context.Context, in *StoreAssessmentResultRequest, opts ...grpc.CallOption) (*StoreAssessmentResultResponse, error)
	// Stores stream of assessment results provided by an assessment tool and
	// returns a response stream. Part of the public API, not exposed as REST.
	StoreAssessmentResults(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_StoreAssessmentResultsClient, error)
	// Get an assessment result by ID
	GetAssessmentResult(ctx context.Context, in *GetAssessmentResultRequest, opts ...grpc.CallOption) (*assessment.AssessmentResult, error)
	// List all assessment results. Part of the public API, also exposed as REST.
	ListAssessmentResults(ctx context.Context, in *ListAssessmentResultsRequest, opts ...grpc.CallOption) (*ListAssessmentResultsResponse, error)
	// Creates a new metric
	CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error)
	// Updates an existing metric
	UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error)
	// Returns the metric with the passed metric id
	GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error)
	// List all metrics provided by the metric catalog
	ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error)
	// Registers a new target cloud service
	RegisterCloudService(ctx context.Context, in *RegisterCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error)
	// Registers a new target cloud service
	UpdateCloudService(ctx context.Context, in *UpdateCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error)
	// Retrieves a target cloud service
	GetCloudService(ctx context.Context, in *GetCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error)
	// Lists all target cloud services
	ListCloudServices(ctx context.Context, in *ListCloudServicesRequest, opts ...grpc.CallOption) (*ListCloudServicesResponse, error)
	// Removes a target cloud service
	RemoveCloudService(ctx context.Context, in *RemoveCloudServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves target cloud service statistics
	GetCloudServiceStatistics(ctx context.Context, in *GetCloudServiceStatisticsRequest, opts ...grpc.CallOption) (*GetCloudServiceStatisticsResponse, error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID
	UpdateMetricConfiguration(ctx context.Context, in *UpdateMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID.
	GetMetricConfiguration(ctx context.Context, in *GetMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error)
	// Lists all a metric configurations (target value and operator) for a
	// specific service ID
	ListMetricConfigurations(ctx context.Context, in *ListMetricConfigurationRequest, opts ...grpc.CallOption) (*ListMetricConfigurationResponse, error)
	// Updates an existing metric implementation
	UpdateMetricImplementation(ctx context.Context, in *UpdateMetricImplementationRequest, opts ...grpc.CallOption) (*assessment.MetricImplementation, error)
	// Returns the metric implementation of the passed metric id
	GetMetricImplementation(ctx context.Context, in *GetMetricImplementationRequest, opts ...grpc.CallOption) (*assessment.MetricImplementation, error)
	SubscribeMetricChangeEvents(ctx context.Context, in *SubscribeMetricChangeEventRequest, opts ...grpc.CallOption) (Orchestrator_SubscribeMetricChangeEventsClient, error)
	// Creates a new certificate
	CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	// Retrieves a certificate
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	// Lists all target certificates
	ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error)
	// Updates an existing certificate
	UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	// Removes a certificate
	RemoveCertificate(ctx context.Context, in *RemoveCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new security controls catalog
	CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error)
	// Lists all security controls catalogs. Each catalog includes a list of its
	// categories but no additional sub-resources.
	ListCatalogs(ctx context.Context, in *ListCatalogsRequest, opts ...grpc.CallOption) (*ListCatalogsResponse, error)
	// Retrieves a specific catalog by it's ID. The catalog includes a list of all
	// of it categories as well as the first level of controls in each category.
	GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*Catalog, error)
	// Removes a catalog
	RemoveCatalog(ctx context.Context, in *RemoveCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates an existing certificate
	UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error)
	// Retrieves a category of a catalog specified by the catalog ID and the
	// category name. It includes the first level of controls within each
	// category.
	GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error)
	// If no additional parameters are specified, this lists all controls. If a
	// catalog ID and a category name is specified, then only controls containing
	// in this category are returned.
	ListControls(ctx context.Context, in *ListControlsRequest, opts ...grpc.CallOption) (*ListControlsResponse, error)
	// Retrieves a control specified by the catalog ID, the control's category
	// name and the control ID. If present, it also includes a list of
	// sub-controls if present or a list of metrics if no sub-controls but metrics
	// are present.
	GetControl(ctx context.Context, in *GetControlRequest, opts ...grpc.CallOption) (*Control, error)
	// Creates a new Target of Evaluation
	CreateTargetOfEvaluation(ctx context.Context, in *CreateTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error)
	// Retrieves a Target of Evaluation
	GetTargetOfEvaluation(ctx context.Context, in *GetTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error)
	// Lists all controls in scope of a target of evaluation.
	ListControlsInScope(ctx context.Context, in *ListControlsInScopeRequest, opts ...grpc.CallOption) (*ListControlsInScopeResponse, error)
	// Adds the selected control as "in scope" for the target of evaluation.
	AddControlToScope(ctx context.Context, in *AddControlToScopeRequest, opts ...grpc.CallOption) (*ControlInScope, error)
	// Updates a particular control in scope, e.g., its monitoring status.
	UpdateControlInScope(ctx context.Context, in *UpdateControlInScopeRequest, opts ...grpc.CallOption) (*ControlInScope, error)
	// Adds the selected control as "in scope" for the target of evaluation.
	RemoveControlFromScope(ctx context.Context, in *RemoveControlFromScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists all Targets of Evaluation
	ListTargetsOfEvaluation(ctx context.Context, in *ListTargetsOfEvaluationRequest, opts ...grpc.CallOption) (*ListTargetsOfEvaluationResponse, error)
	// Updates an existing Target of Evaluation
	UpdateTargetOfEvaluation(ctx context.Context, in *UpdateTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error)
	// Removes a Target of Evaluation
	RemoveTargetOfEvaluation(ctx context.Context, in *RemoveTargetOfEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get Runtime Information
	GetRuntimeInfo(ctx context.Context, in *runtime.GetRuntimeInfoRequest, opts ...grpc.CallOption) (*runtime.Runtime, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) RegisterAssessmentTool(ctx context.Context, in *RegisterAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error) {
	out := new(AssessmentTool)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RegisterAssessmentTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListAssessmentTools(ctx context.Context, in *ListAssessmentToolsRequest, opts ...grpc.CallOption) (*ListAssessmentToolsResponse, error) {
	out := new(ListAssessmentToolsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentTools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetAssessmentTool(ctx context.Context, in *GetAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error) {
	out := new(AssessmentTool)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateAssessmentTool(ctx context.Context, in *UpdateAssessmentToolRequest, opts ...grpc.CallOption) (*AssessmentTool, error) {
	out := new(AssessmentTool)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateAssessmentTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) DeregisterAssessmentTool(ctx context.Context, in *DeregisterAssessmentToolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/DeregisterAssessmentTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) StoreAssessmentResult(ctx context.Context, in *StoreAssessmentResultRequest, opts ...grpc.CallOption) (*StoreAssessmentResultResponse, error) {
	out := new(StoreAssessmentResultResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/StoreAssessmentResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) StoreAssessmentResults(ctx context.Context, opts ...grpc.CallOption) (Orchestrator_StoreAssessmentResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orchestrator_ServiceDesc.Streams[0], "/clouditor.orchestrator.v1.Orchestrator/StoreAssessmentResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorStoreAssessmentResultsClient{stream}
	return x, nil
}

type Orchestrator_StoreAssessmentResultsClient interface {
	Send(*StoreAssessmentResultRequest) error
	Recv() (*StoreAssessmentResultsResponse, error)
	grpc.ClientStream
}

type orchestratorStoreAssessmentResultsClient struct {
	grpc.ClientStream
}

func (x *orchestratorStoreAssessmentResultsClient) Send(m *StoreAssessmentResultRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orchestratorStoreAssessmentResultsClient) Recv() (*StoreAssessmentResultsResponse, error) {
	m := new(StoreAssessmentResultsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orchestratorClient) GetAssessmentResult(ctx context.Context, in *GetAssessmentResultRequest, opts ...grpc.CallOption) (*assessment.AssessmentResult, error) {
	out := new(assessment.AssessmentResult)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListAssessmentResults(ctx context.Context, in *ListAssessmentResultsRequest, opts ...grpc.CallOption) (*ListAssessmentResultsResponse, error) {
	out := new(ListAssessmentResultsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) CreateMetric(ctx context.Context, in *CreateMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error) {
	out := new(assessment.Metric)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/CreateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateMetric(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error) {
	out := new(assessment.Metric)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetMetric(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*assessment.Metric, error) {
	out := new(assessment.Metric)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListMetrics(ctx context.Context, in *ListMetricsRequest, opts ...grpc.CallOption) (*ListMetricsResponse, error) {
	out := new(ListMetricsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RegisterCloudService(ctx context.Context, in *RegisterCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error) {
	out := new(CloudService)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RegisterCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateCloudService(ctx context.Context, in *UpdateCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error) {
	out := new(CloudService)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetCloudService(ctx context.Context, in *GetCloudServiceRequest, opts ...grpc.CallOption) (*CloudService, error) {
	out := new(CloudService)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListCloudServices(ctx context.Context, in *ListCloudServicesRequest, opts ...grpc.CallOption) (*ListCloudServicesResponse, error) {
	out := new(ListCloudServicesResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListCloudServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RemoveCloudService(ctx context.Context, in *RemoveCloudServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RemoveCloudService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetCloudServiceStatistics(ctx context.Context, in *GetCloudServiceStatisticsRequest, opts ...grpc.CallOption) (*GetCloudServiceStatisticsResponse, error) {
	out := new(GetCloudServiceStatisticsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetCloudServiceStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateMetricConfiguration(ctx context.Context, in *UpdateMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error) {
	out := new(assessment.MetricConfiguration)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetMetricConfiguration(ctx context.Context, in *GetMetricConfigurationRequest, opts ...grpc.CallOption) (*assessment.MetricConfiguration, error) {
	out := new(assessment.MetricConfiguration)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetMetricConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListMetricConfigurations(ctx context.Context, in *ListMetricConfigurationRequest, opts ...grpc.CallOption) (*ListMetricConfigurationResponse, error) {
	out := new(ListMetricConfigurationResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListMetricConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateMetricImplementation(ctx context.Context, in *UpdateMetricImplementationRequest, opts ...grpc.CallOption) (*assessment.MetricImplementation, error) {
	out := new(assessment.MetricImplementation)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetMetricImplementation(ctx context.Context, in *GetMetricImplementationRequest, opts ...grpc.CallOption) (*assessment.MetricImplementation, error) {
	out := new(assessment.MetricImplementation)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetMetricImplementation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) SubscribeMetricChangeEvents(ctx context.Context, in *SubscribeMetricChangeEventRequest, opts ...grpc.CallOption) (Orchestrator_SubscribeMetricChangeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Orchestrator_ServiceDesc.Streams[1], "/clouditor.orchestrator.v1.Orchestrator/SubscribeMetricChangeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &orchestratorSubscribeMetricChangeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orchestrator_SubscribeMetricChangeEventsClient interface {
	Recv() (*MetricChangeEvent, error)
	grpc.ClientStream
}

type orchestratorSubscribeMetricChangeEventsClient struct {
	grpc.ClientStream
}

func (x *orchestratorSubscribeMetricChangeEventsClient) Recv() (*MetricChangeEvent, error) {
	m := new(MetricChangeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orchestratorClient) CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error) {
	out := new(ListCertificatesResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RemoveCertificate(ctx context.Context, in *RemoveCertificateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RemoveCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/CreateCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListCatalogs(ctx context.Context, in *ListCatalogsRequest, opts ...grpc.CallOption) (*ListCatalogsResponse, error) {
	out := new(ListCatalogsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListCatalogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RemoveCatalog(ctx context.Context, in *RemoveCatalogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RemoveCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetCategory(ctx context.Context, in *GetCategoryRequest, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListControls(ctx context.Context, in *ListControlsRequest, opts ...grpc.CallOption) (*ListControlsResponse, error) {
	out := new(ListControlsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetControl(ctx context.Context, in *GetControlRequest, opts ...grpc.CallOption) (*Control, error) {
	out := new(Control)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) CreateTargetOfEvaluation(ctx context.Context, in *CreateTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error) {
	out := new(TargetOfEvaluation)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/CreateTargetOfEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetTargetOfEvaluation(ctx context.Context, in *GetTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error) {
	out := new(TargetOfEvaluation)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetTargetOfEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListControlsInScope(ctx context.Context, in *ListControlsInScopeRequest, opts ...grpc.CallOption) (*ListControlsInScopeResponse, error) {
	out := new(ListControlsInScopeResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListControlsInScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) AddControlToScope(ctx context.Context, in *AddControlToScopeRequest, opts ...grpc.CallOption) (*ControlInScope, error) {
	out := new(ControlInScope)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/AddControlToScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateControlInScope(ctx context.Context, in *UpdateControlInScopeRequest, opts ...grpc.CallOption) (*ControlInScope, error) {
	out := new(ControlInScope)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateControlInScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RemoveControlFromScope(ctx context.Context, in *RemoveControlFromScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RemoveControlFromScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListTargetsOfEvaluation(ctx context.Context, in *ListTargetsOfEvaluationRequest, opts ...grpc.CallOption) (*ListTargetsOfEvaluationResponse, error) {
	out := new(ListTargetsOfEvaluationResponse)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/ListTargetsOfEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateTargetOfEvaluation(ctx context.Context, in *UpdateTargetOfEvaluationRequest, opts ...grpc.CallOption) (*TargetOfEvaluation, error) {
	out := new(TargetOfEvaluation)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/UpdateTargetOfEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) RemoveTargetOfEvaluation(ctx context.Context, in *RemoveTargetOfEvaluationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/RemoveTargetOfEvaluation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetRuntimeInfo(ctx context.Context, in *runtime.GetRuntimeInfoRequest, opts ...grpc.CallOption) (*runtime.Runtime, error) {
	out := new(runtime.Runtime)
	err := c.cc.Invoke(ctx, "/clouditor.orchestrator.v1.Orchestrator/GetRuntimeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility
type OrchestratorServer interface {
	// Registers the passed assessment tool
	RegisterAssessmentTool(context.Context, *RegisterAssessmentToolRequest) (*AssessmentTool, error)
	// Lists all assessment tools assessing evidences for the metric given by the
	// passed metric id
	ListAssessmentTools(context.Context, *ListAssessmentToolsRequest) (*ListAssessmentToolsResponse, error)
	// Returns assessment tool given by the passed tool id
	GetAssessmentTool(context.Context, *GetAssessmentToolRequest) (*AssessmentTool, error)
	// Updates the assessment tool given by the passed id
	UpdateAssessmentTool(context.Context, *UpdateAssessmentToolRequest) (*AssessmentTool, error)
	// Remove assessment tool with passed id from the list of active assessment
	// tools
	DeregisterAssessmentTool(context.Context, *DeregisterAssessmentToolRequest) (*emptypb.Empty, error)
	// Stores the assessment result provided by an assessment tool
	StoreAssessmentResult(context.Context, *StoreAssessmentResultRequest) (*StoreAssessmentResultResponse, error)
	// Stores stream of assessment results provided by an assessment tool and
	// returns a response stream. Part of the public API, not exposed as REST.
	StoreAssessmentResults(Orchestrator_StoreAssessmentResultsServer) error
	// Get an assessment result by ID
	GetAssessmentResult(context.Context, *GetAssessmentResultRequest) (*assessment.AssessmentResult, error)
	// List all assessment results. Part of the public API, also exposed as REST.
	ListAssessmentResults(context.Context, *ListAssessmentResultsRequest) (*ListAssessmentResultsResponse, error)
	// Creates a new metric
	CreateMetric(context.Context, *CreateMetricRequest) (*assessment.Metric, error)
	// Updates an existing metric
	UpdateMetric(context.Context, *UpdateMetricRequest) (*assessment.Metric, error)
	// Returns the metric with the passed metric id
	GetMetric(context.Context, *GetMetricRequest) (*assessment.Metric, error)
	// List all metrics provided by the metric catalog
	ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error)
	// Registers a new target cloud service
	RegisterCloudService(context.Context, *RegisterCloudServiceRequest) (*CloudService, error)
	// Registers a new target cloud service
	UpdateCloudService(context.Context, *UpdateCloudServiceRequest) (*CloudService, error)
	// Retrieves a target cloud service
	GetCloudService(context.Context, *GetCloudServiceRequest) (*CloudService, error)
	// Lists all target cloud services
	ListCloudServices(context.Context, *ListCloudServicesRequest) (*ListCloudServicesResponse, error)
	// Removes a target cloud service
	RemoveCloudService(context.Context, *RemoveCloudServiceRequest) (*emptypb.Empty, error)
	// Retrieves target cloud service statistics
	GetCloudServiceStatistics(context.Context, *GetCloudServiceStatisticsRequest) (*GetCloudServiceStatisticsResponse, error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID
	UpdateMetricConfiguration(context.Context, *UpdateMetricConfigurationRequest) (*assessment.MetricConfiguration, error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID.
	GetMetricConfiguration(context.Context, *GetMetricConfigurationRequest) (*assessment.MetricConfiguration, error)
	// Lists all a metric configurations (target value and operator) for a
	// specific service ID
	ListMetricConfigurations(context.Context, *ListMetricConfigurationRequest) (*ListMetricConfigurationResponse, error)
	// Updates an existing metric implementation
	UpdateMetricImplementation(context.Context, *UpdateMetricImplementationRequest) (*assessment.MetricImplementation, error)
	// Returns the metric implementation of the passed metric id
	GetMetricImplementation(context.Context, *GetMetricImplementationRequest) (*assessment.MetricImplementation, error)
	SubscribeMetricChangeEvents(*SubscribeMetricChangeEventRequest, Orchestrator_SubscribeMetricChangeEventsServer) error
	// Creates a new certificate
	CreateCertificate(context.Context, *CreateCertificateRequest) (*Certificate, error)
	// Retrieves a certificate
	GetCertificate(context.Context, *GetCertificateRequest) (*Certificate, error)
	// Lists all target certificates
	ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error)
	// Updates an existing certificate
	UpdateCertificate(context.Context, *UpdateCertificateRequest) (*Certificate, error)
	// Removes a certificate
	RemoveCertificate(context.Context, *RemoveCertificateRequest) (*emptypb.Empty, error)
	// Creates a new security controls catalog
	CreateCatalog(context.Context, *CreateCatalogRequest) (*Catalog, error)
	// Lists all security controls catalogs. Each catalog includes a list of its
	// categories but no additional sub-resources.
	ListCatalogs(context.Context, *ListCatalogsRequest) (*ListCatalogsResponse, error)
	// Retrieves a specific catalog by it's ID. The catalog includes a list of all
	// of it categories as well as the first level of controls in each category.
	GetCatalog(context.Context, *GetCatalogRequest) (*Catalog, error)
	// Removes a catalog
	RemoveCatalog(context.Context, *RemoveCatalogRequest) (*emptypb.Empty, error)
	// Updates an existing certificate
	UpdateCatalog(context.Context, *UpdateCatalogRequest) (*Catalog, error)
	// Retrieves a category of a catalog specified by the catalog ID and the
	// category name. It includes the first level of controls within each
	// category.
	GetCategory(context.Context, *GetCategoryRequest) (*Category, error)
	// If no additional parameters are specified, this lists all controls. If a
	// catalog ID and a category name is specified, then only controls containing
	// in this category are returned.
	ListControls(context.Context, *ListControlsRequest) (*ListControlsResponse, error)
	// Retrieves a control specified by the catalog ID, the control's category
	// name and the control ID. If present, it also includes a list of
	// sub-controls if present or a list of metrics if no sub-controls but metrics
	// are present.
	GetControl(context.Context, *GetControlRequest) (*Control, error)
	// Creates a new Target of Evaluation
	CreateTargetOfEvaluation(context.Context, *CreateTargetOfEvaluationRequest) (*TargetOfEvaluation, error)
	// Retrieves a Target of Evaluation
	GetTargetOfEvaluation(context.Context, *GetTargetOfEvaluationRequest) (*TargetOfEvaluation, error)
	// Lists all controls in scope of a target of evaluation.
	ListControlsInScope(context.Context, *ListControlsInScopeRequest) (*ListControlsInScopeResponse, error)
	// Adds the selected control as "in scope" for the target of evaluation.
	AddControlToScope(context.Context, *AddControlToScopeRequest) (*ControlInScope, error)
	// Updates a particular control in scope, e.g., its monitoring status.
	UpdateControlInScope(context.Context, *UpdateControlInScopeRequest) (*ControlInScope, error)
	// Adds the selected control as "in scope" for the target of evaluation.
	RemoveControlFromScope(context.Context, *RemoveControlFromScopeRequest) (*emptypb.Empty, error)
	// Lists all Targets of Evaluation
	ListTargetsOfEvaluation(context.Context, *ListTargetsOfEvaluationRequest) (*ListTargetsOfEvaluationResponse, error)
	// Updates an existing Target of Evaluation
	UpdateTargetOfEvaluation(context.Context, *UpdateTargetOfEvaluationRequest) (*TargetOfEvaluation, error)
	// Removes a Target of Evaluation
	RemoveTargetOfEvaluation(context.Context, *RemoveTargetOfEvaluationRequest) (*emptypb.Empty, error)
	// Get Runtime Information
	GetRuntimeInfo(context.Context, *runtime.GetRuntimeInfoRequest) (*runtime.Runtime, error)
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestratorServer struct {
}

func (UnimplementedOrchestratorServer) RegisterAssessmentTool(context.Context, *RegisterAssessmentToolRequest) (*AssessmentTool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAssessmentTool not implemented")
}
func (UnimplementedOrchestratorServer) ListAssessmentTools(context.Context, *ListAssessmentToolsRequest) (*ListAssessmentToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssessmentTools not implemented")
}
func (UnimplementedOrchestratorServer) GetAssessmentTool(context.Context, *GetAssessmentToolRequest) (*AssessmentTool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentTool not implemented")
}
func (UnimplementedOrchestratorServer) UpdateAssessmentTool(context.Context, *UpdateAssessmentToolRequest) (*AssessmentTool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssessmentTool not implemented")
}
func (UnimplementedOrchestratorServer) DeregisterAssessmentTool(context.Context, *DeregisterAssessmentToolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterAssessmentTool not implemented")
}
func (UnimplementedOrchestratorServer) StoreAssessmentResult(context.Context, *StoreAssessmentResultRequest) (*StoreAssessmentResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreAssessmentResult not implemented")
}
func (UnimplementedOrchestratorServer) StoreAssessmentResults(Orchestrator_StoreAssessmentResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreAssessmentResults not implemented")
}
func (UnimplementedOrchestratorServer) GetAssessmentResult(context.Context, *GetAssessmentResultRequest) (*assessment.AssessmentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentResult not implemented")
}
func (UnimplementedOrchestratorServer) ListAssessmentResults(context.Context, *ListAssessmentResultsRequest) (*ListAssessmentResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssessmentResults not implemented")
}
func (UnimplementedOrchestratorServer) CreateMetric(context.Context, *CreateMetricRequest) (*assessment.Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMetric not implemented")
}
func (UnimplementedOrchestratorServer) UpdateMetric(context.Context, *UpdateMetricRequest) (*assessment.Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetric not implemented")
}
func (UnimplementedOrchestratorServer) GetMetric(context.Context, *GetMetricRequest) (*assessment.Metric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetric not implemented")
}
func (UnimplementedOrchestratorServer) ListMetrics(context.Context, *ListMetricsRequest) (*ListMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (UnimplementedOrchestratorServer) RegisterCloudService(context.Context, *RegisterCloudServiceRequest) (*CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCloudService not implemented")
}
func (UnimplementedOrchestratorServer) UpdateCloudService(context.Context, *UpdateCloudServiceRequest) (*CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudService not implemented")
}
func (UnimplementedOrchestratorServer) GetCloudService(context.Context, *GetCloudServiceRequest) (*CloudService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudService not implemented")
}
func (UnimplementedOrchestratorServer) ListCloudServices(context.Context, *ListCloudServicesRequest) (*ListCloudServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudServices not implemented")
}
func (UnimplementedOrchestratorServer) RemoveCloudService(context.Context, *RemoveCloudServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCloudService not implemented")
}
func (UnimplementedOrchestratorServer) GetCloudServiceStatistics(context.Context, *GetCloudServiceStatisticsRequest) (*GetCloudServiceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudServiceStatistics not implemented")
}
func (UnimplementedOrchestratorServer) UpdateMetricConfiguration(context.Context, *UpdateMetricConfigurationRequest) (*assessment.MetricConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricConfiguration not implemented")
}
func (UnimplementedOrchestratorServer) GetMetricConfiguration(context.Context, *GetMetricConfigurationRequest) (*assessment.MetricConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricConfiguration not implemented")
}
func (UnimplementedOrchestratorServer) ListMetricConfigurations(context.Context, *ListMetricConfigurationRequest) (*ListMetricConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetricConfigurations not implemented")
}
func (UnimplementedOrchestratorServer) UpdateMetricImplementation(context.Context, *UpdateMetricImplementationRequest) (*assessment.MetricImplementation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricImplementation not implemented")
}
func (UnimplementedOrchestratorServer) GetMetricImplementation(context.Context, *GetMetricImplementationRequest) (*assessment.MetricImplementation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricImplementation not implemented")
}
func (UnimplementedOrchestratorServer) SubscribeMetricChangeEvents(*SubscribeMetricChangeEventRequest, Orchestrator_SubscribeMetricChangeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMetricChangeEvents not implemented")
}
func (UnimplementedOrchestratorServer) CreateCertificate(context.Context, *CreateCertificateRequest) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (UnimplementedOrchestratorServer) GetCertificate(context.Context, *GetCertificateRequest) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (UnimplementedOrchestratorServer) ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedOrchestratorServer) UpdateCertificate(context.Context, *UpdateCertificateRequest) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificate not implemented")
}
func (UnimplementedOrchestratorServer) RemoveCertificate(context.Context, *RemoveCertificateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCertificate not implemented")
}
func (UnimplementedOrchestratorServer) CreateCatalog(context.Context, *CreateCatalogRequest) (*Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatalog not implemented")
}
func (UnimplementedOrchestratorServer) ListCatalogs(context.Context, *ListCatalogsRequest) (*ListCatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogs not implemented")
}
func (UnimplementedOrchestratorServer) GetCatalog(context.Context, *GetCatalogRequest) (*Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalog not implemented")
}
func (UnimplementedOrchestratorServer) RemoveCatalog(context.Context, *RemoveCatalogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCatalog not implemented")
}
func (UnimplementedOrchestratorServer) UpdateCatalog(context.Context, *UpdateCatalogRequest) (*Catalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalog not implemented")
}
func (UnimplementedOrchestratorServer) GetCategory(context.Context, *GetCategoryRequest) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedOrchestratorServer) ListControls(context.Context, *ListControlsRequest) (*ListControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControls not implemented")
}
func (UnimplementedOrchestratorServer) GetControl(context.Context, *GetControlRequest) (*Control, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControl not implemented")
}
func (UnimplementedOrchestratorServer) CreateTargetOfEvaluation(context.Context, *CreateTargetOfEvaluationRequest) (*TargetOfEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetOfEvaluation not implemented")
}
func (UnimplementedOrchestratorServer) GetTargetOfEvaluation(context.Context, *GetTargetOfEvaluationRequest) (*TargetOfEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetOfEvaluation not implemented")
}
func (UnimplementedOrchestratorServer) ListControlsInScope(context.Context, *ListControlsInScopeRequest) (*ListControlsInScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListControlsInScope not implemented")
}
func (UnimplementedOrchestratorServer) AddControlToScope(context.Context, *AddControlToScopeRequest) (*ControlInScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddControlToScope not implemented")
}
func (UnimplementedOrchestratorServer) UpdateControlInScope(context.Context, *UpdateControlInScopeRequest) (*ControlInScope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateControlInScope not implemented")
}
func (UnimplementedOrchestratorServer) RemoveControlFromScope(context.Context, *RemoveControlFromScopeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveControlFromScope not implemented")
}
func (UnimplementedOrchestratorServer) ListTargetsOfEvaluation(context.Context, *ListTargetsOfEvaluationRequest) (*ListTargetsOfEvaluationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargetsOfEvaluation not implemented")
}
func (UnimplementedOrchestratorServer) UpdateTargetOfEvaluation(context.Context, *UpdateTargetOfEvaluationRequest) (*TargetOfEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetOfEvaluation not implemented")
}
func (UnimplementedOrchestratorServer) RemoveTargetOfEvaluation(context.Context, *RemoveTargetOfEvaluationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTargetOfEvaluation not implemented")
}
func (UnimplementedOrchestratorServer) GetRuntimeInfo(context.Context, *runtime.GetRuntimeInfoRequest) (*runtime.Runtime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuntimeInfo not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_RegisterAssessmentTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAssessmentToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RegisterAssessmentTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RegisterAssessmentTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RegisterAssessmentTool(ctx, req.(*RegisterAssessmentToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListAssessmentTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssessmentToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListAssessmentTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentTools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListAssessmentTools(ctx, req.(*ListAssessmentToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetAssessmentTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetAssessmentTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetAssessmentTool(ctx, req.(*GetAssessmentToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateAssessmentTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssessmentToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateAssessmentTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateAssessmentTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateAssessmentTool(ctx, req.(*UpdateAssessmentToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_DeregisterAssessmentTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterAssessmentToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).DeregisterAssessmentTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/DeregisterAssessmentTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).DeregisterAssessmentTool(ctx, req.(*DeregisterAssessmentToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_StoreAssessmentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreAssessmentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).StoreAssessmentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/StoreAssessmentResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).StoreAssessmentResult(ctx, req.(*StoreAssessmentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_StoreAssessmentResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrchestratorServer).StoreAssessmentResults(&orchestratorStoreAssessmentResultsServer{stream})
}

type Orchestrator_StoreAssessmentResultsServer interface {
	Send(*StoreAssessmentResultsResponse) error
	Recv() (*StoreAssessmentResultRequest, error)
	grpc.ServerStream
}

type orchestratorStoreAssessmentResultsServer struct {
	grpc.ServerStream
}

func (x *orchestratorStoreAssessmentResultsServer) Send(m *StoreAssessmentResultsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orchestratorStoreAssessmentResultsServer) Recv() (*StoreAssessmentResultRequest, error) {
	m := new(StoreAssessmentResultRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Orchestrator_GetAssessmentResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetAssessmentResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetAssessmentResult(ctx, req.(*GetAssessmentResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListAssessmentResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssessmentResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListAssessmentResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListAssessmentResults(ctx, req.(*ListAssessmentResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_CreateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CreateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/CreateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CreateMetric(ctx, req.(*CreateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateMetric(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetMetric(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListMetrics(ctx, req.(*ListMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RegisterCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RegisterCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RegisterCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RegisterCloudService(ctx, req.(*RegisterCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateCloudService(ctx, req.(*UpdateCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetCloudService(ctx, req.(*GetCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListCloudServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListCloudServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListCloudServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListCloudServices(ctx, req.(*ListCloudServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RemoveCloudService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCloudServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RemoveCloudService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RemoveCloudService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RemoveCloudService(ctx, req.(*RemoveCloudServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetCloudServiceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudServiceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetCloudServiceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetCloudServiceStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetCloudServiceStatistics(ctx, req.(*GetCloudServiceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateMetricConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateMetricConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateMetricConfiguration(ctx, req.(*UpdateMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetMetricConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetMetricConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetMetricConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetMetricConfiguration(ctx, req.(*GetMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListMetricConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListMetricConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListMetricConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListMetricConfigurations(ctx, req.(*ListMetricConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateMetricImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricImplementationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateMetricImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateMetricImplementation(ctx, req.(*UpdateMetricImplementationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetMetricImplementation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricImplementationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetMetricImplementation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetMetricImplementation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetMetricImplementation(ctx, req.(*GetMetricImplementationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_SubscribeMetricChangeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMetricChangeEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrchestratorServer).SubscribeMetricChangeEvents(m, &orchestratorSubscribeMetricChangeEventsServer{stream})
}

type Orchestrator_SubscribeMetricChangeEventsServer interface {
	Send(*MetricChangeEvent) error
	grpc.ServerStream
}

type orchestratorSubscribeMetricChangeEventsServer struct {
	grpc.ServerStream
}

func (x *orchestratorSubscribeMetricChangeEventsServer) Send(m *MetricChangeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Orchestrator_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CreateCertificate(ctx, req.(*CreateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListCertificates(ctx, req.(*ListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateCertificate(ctx, req.(*UpdateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RemoveCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RemoveCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RemoveCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RemoveCertificate(ctx, req.(*RemoveCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_CreateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CreateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/CreateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CreateCatalog(ctx, req.(*CreateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListCatalogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListCatalogs(ctx, req.(*ListCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetCatalog(ctx, req.(*GetCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RemoveCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RemoveCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RemoveCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RemoveCatalog(ctx, req.(*RemoveCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateCatalog(ctx, req.(*UpdateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetCategory(ctx, req.(*GetCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListControls(ctx, req.(*ListControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetControl(ctx, req.(*GetControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_CreateTargetOfEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetOfEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CreateTargetOfEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/CreateTargetOfEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CreateTargetOfEvaluation(ctx, req.(*CreateTargetOfEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetTargetOfEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetOfEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetTargetOfEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetTargetOfEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetTargetOfEvaluation(ctx, req.(*GetTargetOfEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListControlsInScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControlsInScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListControlsInScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListControlsInScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListControlsInScope(ctx, req.(*ListControlsInScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_AddControlToScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddControlToScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).AddControlToScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/AddControlToScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).AddControlToScope(ctx, req.(*AddControlToScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateControlInScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateControlInScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateControlInScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateControlInScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateControlInScope(ctx, req.(*UpdateControlInScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RemoveControlFromScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveControlFromScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RemoveControlFromScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RemoveControlFromScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RemoveControlFromScope(ctx, req.(*RemoveControlFromScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListTargetsOfEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsOfEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListTargetsOfEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/ListTargetsOfEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListTargetsOfEvaluation(ctx, req.(*ListTargetsOfEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateTargetOfEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetOfEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateTargetOfEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/UpdateTargetOfEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateTargetOfEvaluation(ctx, req.(*UpdateTargetOfEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_RemoveTargetOfEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTargetOfEvaluationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).RemoveTargetOfEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/RemoveTargetOfEvaluation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).RemoveTargetOfEvaluation(ctx, req.(*RemoveTargetOfEvaluationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetRuntimeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(runtime.GetRuntimeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetRuntimeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.orchestrator.v1.Orchestrator/GetRuntimeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetRuntimeInfo(ctx, req.(*runtime.GetRuntimeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouditor.orchestrator.v1.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAssessmentTool",
			Handler:    _Orchestrator_RegisterAssessmentTool_Handler,
		},
		{
			MethodName: "ListAssessmentTools",
			Handler:    _Orchestrator_ListAssessmentTools_Handler,
		},
		{
			MethodName: "GetAssessmentTool",
			Handler:    _Orchestrator_GetAssessmentTool_Handler,
		},
		{
			MethodName: "UpdateAssessmentTool",
			Handler:    _Orchestrator_UpdateAssessmentTool_Handler,
		},
		{
			MethodName: "DeregisterAssessmentTool",
			Handler:    _Orchestrator_DeregisterAssessmentTool_Handler,
		},
		{
			MethodName: "StoreAssessmentResult",
			Handler:    _Orchestrator_StoreAssessmentResult_Handler,
		},
		{
			MethodName: "GetAssessmentResult",
			Handler:    _Orchestrator_GetAssessmentResult_Handler,
		},
		{
			MethodName: "ListAssessmentResults",
			Handler:    _Orchestrator_ListAssessmentResults_Handler,
		},
		{
			MethodName: "CreateMetric",
			Handler:    _Orchestrator_CreateMetric_Handler,
		},
		{
			MethodName: "UpdateMetric",
			Handler:    _Orchestrator_UpdateMetric_Handler,
		},
		{
			MethodName: "GetMetric",
			Handler:    _Orchestrator_GetMetric_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _Orchestrator_ListMetrics_Handler,
		},
		{
			MethodName: "RegisterCloudService",
			Handler:    _Orchestrator_RegisterCloudService_Handler,
		},
		{
			MethodName: "UpdateCloudService",
			Handler:    _Orchestrator_UpdateCloudService_Handler,
		},
		{
			MethodName: "GetCloudService",
			Handler:    _Orchestrator_GetCloudService_Handler,
		},
		{
			MethodName: "ListCloudServices",
			Handler:    _Orchestrator_ListCloudServices_Handler,
		},
		{
			MethodName: "RemoveCloudService",
			Handler:    _Orchestrator_RemoveCloudService_Handler,
		},
		{
			MethodName: "GetCloudServiceStatistics",
			Handler:    _Orchestrator_GetCloudServiceStatistics_Handler,
		},
		{
			MethodName: "UpdateMetricConfiguration",
			Handler:    _Orchestrator_UpdateMetricConfiguration_Handler,
		},
		{
			MethodName: "GetMetricConfiguration",
			Handler:    _Orchestrator_GetMetricConfiguration_Handler,
		},
		{
			MethodName: "ListMetricConfigurations",
			Handler:    _Orchestrator_ListMetricConfigurations_Handler,
		},
		{
			MethodName: "UpdateMetricImplementation",
			Handler:    _Orchestrator_UpdateMetricImplementation_Handler,
		},
		{
			MethodName: "GetMetricImplementation",
			Handler:    _Orchestrator_GetMetricImplementation_Handler,
		},
		{
			MethodName: "CreateCertificate",
			Handler:    _Orchestrator_CreateCertificate_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _Orchestrator_GetCertificate_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _Orchestrator_ListCertificates_Handler,
		},
		{
			MethodName: "UpdateCertificate",
			Handler:    _Orchestrator_UpdateCertificate_Handler,
		},
		{
			MethodName: "RemoveCertificate",
			Handler:    _Orchestrator_RemoveCertificate_Handler,
		},
		{
			MethodName: "CreateCatalog",
			Handler:    _Orchestrator_CreateCatalog_Handler,
		},
		{
			MethodName: "ListCatalogs",
			Handler:    _Orchestrator_ListCatalogs_Handler,
		},
		{
			MethodName: "GetCatalog",
			Handler:    _Orchestrator_GetCatalog_Handler,
		},
		{
			MethodName: "RemoveCatalog",
			Handler:    _Orchestrator_RemoveCatalog_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _Orchestrator_UpdateCatalog_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _Orchestrator_GetCategory_Handler,
		},
		{
			MethodName: "ListControls",
			Handler:    _Orchestrator_ListControls_Handler,
		},
		{
			MethodName: "GetControl",
			Handler:    _Orchestrator_GetControl_Handler,
		},
		{
			MethodName: "CreateTargetOfEvaluation",
			Handler:    _Orchestrator_CreateTargetOfEvaluation_Handler,
		},
		{
			MethodName: "GetTargetOfEvaluation",
			Handler:    _Orchestrator_GetTargetOfEvaluation_Handler,
		},
		{
			MethodName: "ListControlsInScope",
			Handler:    _Orchestrator_ListControlsInScope_Handler,
		},
		{
			MethodName: "AddControlToScope",
			Handler:    _Orchestrator_AddControlToScope_Handler,
		},
		{
			MethodName: "UpdateControlInScope",
			Handler:    _Orchestrator_UpdateControlInScope_Handler,
		},
		{
			MethodName: "RemoveControlFromScope",
			Handler:    _Orchestrator_RemoveControlFromScope_Handler,
		},
		{
			MethodName: "ListTargetsOfEvaluation",
			Handler:    _Orchestrator_ListTargetsOfEvaluation_Handler,
		},
		{
			MethodName: "UpdateTargetOfEvaluation",
			Handler:    _Orchestrator_UpdateTargetOfEvaluation_Handler,
		},
		{
			MethodName: "RemoveTargetOfEvaluation",
			Handler:    _Orchestrator_RemoveTargetOfEvaluation_Handler,
		},
		{
			MethodName: "GetRuntimeInfo",
			Handler:    _Orchestrator_GetRuntimeInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreAssessmentResults",
			Handler:       _Orchestrator_StoreAssessmentResults_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeMetricChangeEvents",
			Handler:       _Orchestrator_SubscribeMetricChangeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/orchestrator/orchestrator.proto",
}
