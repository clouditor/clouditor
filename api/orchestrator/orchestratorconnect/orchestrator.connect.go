// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/orchestrator/orchestrator.proto

package orchestratorconnect

import (
	assessment "clouditor.io/clouditor/v2/api/assessment"
	orchestrator "clouditor.io/clouditor/v2/api/orchestrator"
	runtime "clouditor.io/clouditor/v2/api/runtime"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrchestratorName is the fully-qualified name of the Orchestrator service.
	OrchestratorName = "clouditor.orchestrator.v1.Orchestrator"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrchestratorRegisterAssessmentToolProcedure is the fully-qualified name of the Orchestrator's
	// RegisterAssessmentTool RPC.
	OrchestratorRegisterAssessmentToolProcedure = "/clouditor.orchestrator.v1.Orchestrator/RegisterAssessmentTool"
	// OrchestratorListAssessmentToolsProcedure is the fully-qualified name of the Orchestrator's
	// ListAssessmentTools RPC.
	OrchestratorListAssessmentToolsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentTools"
	// OrchestratorGetAssessmentToolProcedure is the fully-qualified name of the Orchestrator's
	// GetAssessmentTool RPC.
	OrchestratorGetAssessmentToolProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentTool"
	// OrchestratorUpdateAssessmentToolProcedure is the fully-qualified name of the Orchestrator's
	// UpdateAssessmentTool RPC.
	OrchestratorUpdateAssessmentToolProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateAssessmentTool"
	// OrchestratorDeregisterAssessmentToolProcedure is the fully-qualified name of the Orchestrator's
	// DeregisterAssessmentTool RPC.
	OrchestratorDeregisterAssessmentToolProcedure = "/clouditor.orchestrator.v1.Orchestrator/DeregisterAssessmentTool"
	// OrchestratorStoreAssessmentResultProcedure is the fully-qualified name of the Orchestrator's
	// StoreAssessmentResult RPC.
	OrchestratorStoreAssessmentResultProcedure = "/clouditor.orchestrator.v1.Orchestrator/StoreAssessmentResult"
	// OrchestratorStoreAssessmentResultsProcedure is the fully-qualified name of the Orchestrator's
	// StoreAssessmentResults RPC.
	OrchestratorStoreAssessmentResultsProcedure = "/clouditor.orchestrator.v1.Orchestrator/StoreAssessmentResults"
	// OrchestratorGetAssessmentResultProcedure is the fully-qualified name of the Orchestrator's
	// GetAssessmentResult RPC.
	OrchestratorGetAssessmentResultProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetAssessmentResult"
	// OrchestratorListAssessmentResultsProcedure is the fully-qualified name of the Orchestrator's
	// ListAssessmentResults RPC.
	OrchestratorListAssessmentResultsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListAssessmentResults"
	// OrchestratorCreateMetricProcedure is the fully-qualified name of the Orchestrator's CreateMetric
	// RPC.
	OrchestratorCreateMetricProcedure = "/clouditor.orchestrator.v1.Orchestrator/CreateMetric"
	// OrchestratorUpdateMetricProcedure is the fully-qualified name of the Orchestrator's UpdateMetric
	// RPC.
	OrchestratorUpdateMetricProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateMetric"
	// OrchestratorGetMetricProcedure is the fully-qualified name of the Orchestrator's GetMetric RPC.
	OrchestratorGetMetricProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetMetric"
	// OrchestratorListMetricsProcedure is the fully-qualified name of the Orchestrator's ListMetrics
	// RPC.
	OrchestratorListMetricsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListMetrics"
	// OrchestratorRemoveMetricProcedure is the fully-qualified name of the Orchestrator's RemoveMetric
	// RPC.
	OrchestratorRemoveMetricProcedure = "/clouditor.orchestrator.v1.Orchestrator/RemoveMetric"
	// OrchestratorRegisterCloudServiceProcedure is the fully-qualified name of the Orchestrator's
	// RegisterCloudService RPC.
	OrchestratorRegisterCloudServiceProcedure = "/clouditor.orchestrator.v1.Orchestrator/RegisterCloudService"
	// OrchestratorUpdateCloudServiceProcedure is the fully-qualified name of the Orchestrator's
	// UpdateCloudService RPC.
	OrchestratorUpdateCloudServiceProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateCloudService"
	// OrchestratorGetCloudServiceProcedure is the fully-qualified name of the Orchestrator's
	// GetCloudService RPC.
	OrchestratorGetCloudServiceProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetCloudService"
	// OrchestratorListCloudServicesProcedure is the fully-qualified name of the Orchestrator's
	// ListCloudServices RPC.
	OrchestratorListCloudServicesProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListCloudServices"
	// OrchestratorRemoveCloudServiceProcedure is the fully-qualified name of the Orchestrator's
	// RemoveCloudService RPC.
	OrchestratorRemoveCloudServiceProcedure = "/clouditor.orchestrator.v1.Orchestrator/RemoveCloudService"
	// OrchestratorGetCloudServiceStatisticsProcedure is the fully-qualified name of the Orchestrator's
	// GetCloudServiceStatistics RPC.
	OrchestratorGetCloudServiceStatisticsProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetCloudServiceStatistics"
	// OrchestratorUpdateMetricConfigurationProcedure is the fully-qualified name of the Orchestrator's
	// UpdateMetricConfiguration RPC.
	OrchestratorUpdateMetricConfigurationProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricConfiguration"
	// OrchestratorGetMetricConfigurationProcedure is the fully-qualified name of the Orchestrator's
	// GetMetricConfiguration RPC.
	OrchestratorGetMetricConfigurationProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetMetricConfiguration"
	// OrchestratorListMetricConfigurationsProcedure is the fully-qualified name of the Orchestrator's
	// ListMetricConfigurations RPC.
	OrchestratorListMetricConfigurationsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListMetricConfigurations"
	// OrchestratorUpdateMetricImplementationProcedure is the fully-qualified name of the Orchestrator's
	// UpdateMetricImplementation RPC.
	OrchestratorUpdateMetricImplementationProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateMetricImplementation"
	// OrchestratorGetMetricImplementationProcedure is the fully-qualified name of the Orchestrator's
	// GetMetricImplementation RPC.
	OrchestratorGetMetricImplementationProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetMetricImplementation"
	// OrchestratorSubscribeMetricChangeEventsProcedure is the fully-qualified name of the
	// Orchestrator's SubscribeMetricChangeEvents RPC.
	OrchestratorSubscribeMetricChangeEventsProcedure = "/clouditor.orchestrator.v1.Orchestrator/SubscribeMetricChangeEvents"
	// OrchestratorCreateCertificateProcedure is the fully-qualified name of the Orchestrator's
	// CreateCertificate RPC.
	OrchestratorCreateCertificateProcedure = "/clouditor.orchestrator.v1.Orchestrator/CreateCertificate"
	// OrchestratorGetCertificateProcedure is the fully-qualified name of the Orchestrator's
	// GetCertificate RPC.
	OrchestratorGetCertificateProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetCertificate"
	// OrchestratorListCertificatesProcedure is the fully-qualified name of the Orchestrator's
	// ListCertificates RPC.
	OrchestratorListCertificatesProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListCertificates"
	// OrchestratorListPublicCertificatesProcedure is the fully-qualified name of the Orchestrator's
	// ListPublicCertificates RPC.
	OrchestratorListPublicCertificatesProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListPublicCertificates"
	// OrchestratorUpdateCertificateProcedure is the fully-qualified name of the Orchestrator's
	// UpdateCertificate RPC.
	OrchestratorUpdateCertificateProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateCertificate"
	// OrchestratorRemoveCertificateProcedure is the fully-qualified name of the Orchestrator's
	// RemoveCertificate RPC.
	OrchestratorRemoveCertificateProcedure = "/clouditor.orchestrator.v1.Orchestrator/RemoveCertificate"
	// OrchestratorCreateCatalogProcedure is the fully-qualified name of the Orchestrator's
	// CreateCatalog RPC.
	OrchestratorCreateCatalogProcedure = "/clouditor.orchestrator.v1.Orchestrator/CreateCatalog"
	// OrchestratorListCatalogsProcedure is the fully-qualified name of the Orchestrator's ListCatalogs
	// RPC.
	OrchestratorListCatalogsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListCatalogs"
	// OrchestratorGetCatalogProcedure is the fully-qualified name of the Orchestrator's GetCatalog RPC.
	OrchestratorGetCatalogProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetCatalog"
	// OrchestratorRemoveCatalogProcedure is the fully-qualified name of the Orchestrator's
	// RemoveCatalog RPC.
	OrchestratorRemoveCatalogProcedure = "/clouditor.orchestrator.v1.Orchestrator/RemoveCatalog"
	// OrchestratorUpdateCatalogProcedure is the fully-qualified name of the Orchestrator's
	// UpdateCatalog RPC.
	OrchestratorUpdateCatalogProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateCatalog"
	// OrchestratorGetCategoryProcedure is the fully-qualified name of the Orchestrator's GetCategory
	// RPC.
	OrchestratorGetCategoryProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetCategory"
	// OrchestratorListControlsProcedure is the fully-qualified name of the Orchestrator's ListControls
	// RPC.
	OrchestratorListControlsProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListControls"
	// OrchestratorGetControlProcedure is the fully-qualified name of the Orchestrator's GetControl RPC.
	OrchestratorGetControlProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetControl"
	// OrchestratorCreateTargetOfEvaluationProcedure is the fully-qualified name of the Orchestrator's
	// CreateTargetOfEvaluation RPC.
	OrchestratorCreateTargetOfEvaluationProcedure = "/clouditor.orchestrator.v1.Orchestrator/CreateTargetOfEvaluation"
	// OrchestratorGetTargetOfEvaluationProcedure is the fully-qualified name of the Orchestrator's
	// GetTargetOfEvaluation RPC.
	OrchestratorGetTargetOfEvaluationProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetTargetOfEvaluation"
	// OrchestratorListTargetsOfEvaluationProcedure is the fully-qualified name of the Orchestrator's
	// ListTargetsOfEvaluation RPC.
	OrchestratorListTargetsOfEvaluationProcedure = "/clouditor.orchestrator.v1.Orchestrator/ListTargetsOfEvaluation"
	// OrchestratorUpdateTargetOfEvaluationProcedure is the fully-qualified name of the Orchestrator's
	// UpdateTargetOfEvaluation RPC.
	OrchestratorUpdateTargetOfEvaluationProcedure = "/clouditor.orchestrator.v1.Orchestrator/UpdateTargetOfEvaluation"
	// OrchestratorRemoveTargetOfEvaluationProcedure is the fully-qualified name of the Orchestrator's
	// RemoveTargetOfEvaluation RPC.
	OrchestratorRemoveTargetOfEvaluationProcedure = "/clouditor.orchestrator.v1.Orchestrator/RemoveTargetOfEvaluation"
	// OrchestratorGetRuntimeInfoProcedure is the fully-qualified name of the Orchestrator's
	// GetRuntimeInfo RPC.
	OrchestratorGetRuntimeInfoProcedure = "/clouditor.orchestrator.v1.Orchestrator/GetRuntimeInfo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	orchestratorServiceDescriptor                           = orchestrator.File_api_orchestrator_orchestrator_proto.Services().ByName("Orchestrator")
	orchestratorRegisterAssessmentToolMethodDescriptor      = orchestratorServiceDescriptor.Methods().ByName("RegisterAssessmentTool")
	orchestratorListAssessmentToolsMethodDescriptor         = orchestratorServiceDescriptor.Methods().ByName("ListAssessmentTools")
	orchestratorGetAssessmentToolMethodDescriptor           = orchestratorServiceDescriptor.Methods().ByName("GetAssessmentTool")
	orchestratorUpdateAssessmentToolMethodDescriptor        = orchestratorServiceDescriptor.Methods().ByName("UpdateAssessmentTool")
	orchestratorDeregisterAssessmentToolMethodDescriptor    = orchestratorServiceDescriptor.Methods().ByName("DeregisterAssessmentTool")
	orchestratorStoreAssessmentResultMethodDescriptor       = orchestratorServiceDescriptor.Methods().ByName("StoreAssessmentResult")
	orchestratorStoreAssessmentResultsMethodDescriptor      = orchestratorServiceDescriptor.Methods().ByName("StoreAssessmentResults")
	orchestratorGetAssessmentResultMethodDescriptor         = orchestratorServiceDescriptor.Methods().ByName("GetAssessmentResult")
	orchestratorListAssessmentResultsMethodDescriptor       = orchestratorServiceDescriptor.Methods().ByName("ListAssessmentResults")
	orchestratorCreateMetricMethodDescriptor                = orchestratorServiceDescriptor.Methods().ByName("CreateMetric")
	orchestratorUpdateMetricMethodDescriptor                = orchestratorServiceDescriptor.Methods().ByName("UpdateMetric")
	orchestratorGetMetricMethodDescriptor                   = orchestratorServiceDescriptor.Methods().ByName("GetMetric")
	orchestratorListMetricsMethodDescriptor                 = orchestratorServiceDescriptor.Methods().ByName("ListMetrics")
	orchestratorRemoveMetricMethodDescriptor                = orchestratorServiceDescriptor.Methods().ByName("RemoveMetric")
	orchestratorRegisterCloudServiceMethodDescriptor        = orchestratorServiceDescriptor.Methods().ByName("RegisterCloudService")
	orchestratorUpdateCloudServiceMethodDescriptor          = orchestratorServiceDescriptor.Methods().ByName("UpdateCloudService")
	orchestratorGetCloudServiceMethodDescriptor             = orchestratorServiceDescriptor.Methods().ByName("GetCloudService")
	orchestratorListCloudServicesMethodDescriptor           = orchestratorServiceDescriptor.Methods().ByName("ListCloudServices")
	orchestratorRemoveCloudServiceMethodDescriptor          = orchestratorServiceDescriptor.Methods().ByName("RemoveCloudService")
	orchestratorGetCloudServiceStatisticsMethodDescriptor   = orchestratorServiceDescriptor.Methods().ByName("GetCloudServiceStatistics")
	orchestratorUpdateMetricConfigurationMethodDescriptor   = orchestratorServiceDescriptor.Methods().ByName("UpdateMetricConfiguration")
	orchestratorGetMetricConfigurationMethodDescriptor      = orchestratorServiceDescriptor.Methods().ByName("GetMetricConfiguration")
	orchestratorListMetricConfigurationsMethodDescriptor    = orchestratorServiceDescriptor.Methods().ByName("ListMetricConfigurations")
	orchestratorUpdateMetricImplementationMethodDescriptor  = orchestratorServiceDescriptor.Methods().ByName("UpdateMetricImplementation")
	orchestratorGetMetricImplementationMethodDescriptor     = orchestratorServiceDescriptor.Methods().ByName("GetMetricImplementation")
	orchestratorSubscribeMetricChangeEventsMethodDescriptor = orchestratorServiceDescriptor.Methods().ByName("SubscribeMetricChangeEvents")
	orchestratorCreateCertificateMethodDescriptor           = orchestratorServiceDescriptor.Methods().ByName("CreateCertificate")
	orchestratorGetCertificateMethodDescriptor              = orchestratorServiceDescriptor.Methods().ByName("GetCertificate")
	orchestratorListCertificatesMethodDescriptor            = orchestratorServiceDescriptor.Methods().ByName("ListCertificates")
	orchestratorListPublicCertificatesMethodDescriptor      = orchestratorServiceDescriptor.Methods().ByName("ListPublicCertificates")
	orchestratorUpdateCertificateMethodDescriptor           = orchestratorServiceDescriptor.Methods().ByName("UpdateCertificate")
	orchestratorRemoveCertificateMethodDescriptor           = orchestratorServiceDescriptor.Methods().ByName("RemoveCertificate")
	orchestratorCreateCatalogMethodDescriptor               = orchestratorServiceDescriptor.Methods().ByName("CreateCatalog")
	orchestratorListCatalogsMethodDescriptor                = orchestratorServiceDescriptor.Methods().ByName("ListCatalogs")
	orchestratorGetCatalogMethodDescriptor                  = orchestratorServiceDescriptor.Methods().ByName("GetCatalog")
	orchestratorRemoveCatalogMethodDescriptor               = orchestratorServiceDescriptor.Methods().ByName("RemoveCatalog")
	orchestratorUpdateCatalogMethodDescriptor               = orchestratorServiceDescriptor.Methods().ByName("UpdateCatalog")
	orchestratorGetCategoryMethodDescriptor                 = orchestratorServiceDescriptor.Methods().ByName("GetCategory")
	orchestratorListControlsMethodDescriptor                = orchestratorServiceDescriptor.Methods().ByName("ListControls")
	orchestratorGetControlMethodDescriptor                  = orchestratorServiceDescriptor.Methods().ByName("GetControl")
	orchestratorCreateTargetOfEvaluationMethodDescriptor    = orchestratorServiceDescriptor.Methods().ByName("CreateTargetOfEvaluation")
	orchestratorGetTargetOfEvaluationMethodDescriptor       = orchestratorServiceDescriptor.Methods().ByName("GetTargetOfEvaluation")
	orchestratorListTargetsOfEvaluationMethodDescriptor     = orchestratorServiceDescriptor.Methods().ByName("ListTargetsOfEvaluation")
	orchestratorUpdateTargetOfEvaluationMethodDescriptor    = orchestratorServiceDescriptor.Methods().ByName("UpdateTargetOfEvaluation")
	orchestratorRemoveTargetOfEvaluationMethodDescriptor    = orchestratorServiceDescriptor.Methods().ByName("RemoveTargetOfEvaluation")
	orchestratorGetRuntimeInfoMethodDescriptor              = orchestratorServiceDescriptor.Methods().ByName("GetRuntimeInfo")
)

// OrchestratorClient is a client for the clouditor.orchestrator.v1.Orchestrator service.
type OrchestratorClient interface {
	// Registers the passed assessment tool
	RegisterAssessmentTool(context.Context, *connect.Request[orchestrator.RegisterAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Lists all assessment tools assessing evidences for the metric given by the
	// passed metric id
	ListAssessmentTools(context.Context, *connect.Request[orchestrator.ListAssessmentToolsRequest]) (*connect.Response[orchestrator.ListAssessmentToolsResponse], error)
	// Returns assessment tool given by the passed tool id
	GetAssessmentTool(context.Context, *connect.Request[orchestrator.GetAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Updates the assessment tool given by the passed id
	UpdateAssessmentTool(context.Context, *connect.Request[orchestrator.UpdateAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Remove assessment tool with passed id from the list of active assessment
	// tools
	DeregisterAssessmentTool(context.Context, *connect.Request[orchestrator.DeregisterAssessmentToolRequest]) (*connect.Response[emptypb.Empty], error)
	// Stores the assessment result provided by an assessment tool
	StoreAssessmentResult(context.Context, *connect.Request[orchestrator.StoreAssessmentResultRequest]) (*connect.Response[orchestrator.StoreAssessmentResultResponse], error)
	// Stores stream of assessment results provided by an assessment tool and
	// returns a response stream. Part of the public API, not exposed as REST.
	StoreAssessmentResults(context.Context) *connect.BidiStreamForClient[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse]
	// Get an assessment result by ID
	GetAssessmentResult(context.Context, *connect.Request[orchestrator.GetAssessmentResultRequest]) (*connect.Response[assessment.AssessmentResult], error)
	// List all assessment results. Part of the public API, also exposed as REST.
	ListAssessmentResults(context.Context, *connect.Request[orchestrator.ListAssessmentResultsRequest]) (*connect.Response[orchestrator.ListAssessmentResultsResponse], error)
	// Creates a new metric
	CreateMetric(context.Context, *connect.Request[orchestrator.CreateMetricRequest]) (*connect.Response[assessment.Metric], error)
	// Updates an existing metric
	UpdateMetric(context.Context, *connect.Request[orchestrator.UpdateMetricRequest]) (*connect.Response[assessment.Metric], error)
	// Returns the metric with the passed metric id
	GetMetric(context.Context, *connect.Request[orchestrator.GetMetricRequest]) (*connect.Response[assessment.Metric], error)
	// List all metrics provided by the metric catalog
	ListMetrics(context.Context, *connect.Request[orchestrator.ListMetricsRequest]) (*connect.Response[orchestrator.ListMetricsResponse], error)
	// Removes a new metric
	RemoveMetric(context.Context, *connect.Request[orchestrator.RemoveMetricRequest]) (*connect.Response[emptypb.Empty], error)
	// Registers a new target cloud service
	RegisterCloudService(context.Context, *connect.Request[orchestrator.RegisterCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Registers a new target cloud service
	UpdateCloudService(context.Context, *connect.Request[orchestrator.UpdateCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Retrieves a target cloud service
	GetCloudService(context.Context, *connect.Request[orchestrator.GetCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Lists all target cloud services
	ListCloudServices(context.Context, *connect.Request[orchestrator.ListCloudServicesRequest]) (*connect.Response[orchestrator.ListCloudServicesResponse], error)
	// Removes a target cloud service
	RemoveCloudService(context.Context, *connect.Request[orchestrator.RemoveCloudServiceRequest]) (*connect.Response[emptypb.Empty], error)
	// Retrieves target cloud service statistics
	GetCloudServiceStatistics(context.Context, *connect.Request[orchestrator.GetCloudServiceStatisticsRequest]) (*connect.Response[orchestrator.GetCloudServiceStatisticsResponse], error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID
	UpdateMetricConfiguration(context.Context, *connect.Request[orchestrator.UpdateMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID.
	GetMetricConfiguration(context.Context, *connect.Request[orchestrator.GetMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error)
	// Lists all a metric configurations (target value and operator) for a
	// specific service ID
	ListMetricConfigurations(context.Context, *connect.Request[orchestrator.ListMetricConfigurationRequest]) (*connect.Response[orchestrator.ListMetricConfigurationResponse], error)
	// Updates an existing metric implementation
	UpdateMetricImplementation(context.Context, *connect.Request[orchestrator.UpdateMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error)
	// Returns the metric implementation of the passed metric id
	GetMetricImplementation(context.Context, *connect.Request[orchestrator.GetMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error)
	SubscribeMetricChangeEvents(context.Context, *connect.Request[orchestrator.SubscribeMetricChangeEventRequest]) (*connect.ServerStreamForClient[orchestrator.MetricChangeEvent], error)
	// Creates a new certificate
	CreateCertificate(context.Context, *connect.Request[orchestrator.CreateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Retrieves a certificate
	GetCertificate(context.Context, *connect.Request[orchestrator.GetCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Lists all target certificates
	ListCertificates(context.Context, *connect.Request[orchestrator.ListCertificatesRequest]) (*connect.Response[orchestrator.ListCertificatesResponse], error)
	// Lists all target certificates without state history
	ListPublicCertificates(context.Context, *connect.Request[orchestrator.ListPublicCertificatesRequest]) (*connect.Response[orchestrator.ListPublicCertificatesResponse], error)
	// Updates an existing certificate
	UpdateCertificate(context.Context, *connect.Request[orchestrator.UpdateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Removes a certificate
	RemoveCertificate(context.Context, *connect.Request[orchestrator.RemoveCertificateRequest]) (*connect.Response[emptypb.Empty], error)
	// Creates a new security controls catalog
	CreateCatalog(context.Context, *connect.Request[orchestrator.CreateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Lists all security controls catalogs. Each catalog includes a list of its
	// categories but no additional sub-resources.
	ListCatalogs(context.Context, *connect.Request[orchestrator.ListCatalogsRequest]) (*connect.Response[orchestrator.ListCatalogsResponse], error)
	// Retrieves a specific catalog by it's ID. The catalog includes a list of all
	// of it categories as well as the first level of controls in each category.
	GetCatalog(context.Context, *connect.Request[orchestrator.GetCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Removes a catalog
	RemoveCatalog(context.Context, *connect.Request[orchestrator.RemoveCatalogRequest]) (*connect.Response[emptypb.Empty], error)
	// Updates an existing certificate
	UpdateCatalog(context.Context, *connect.Request[orchestrator.UpdateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Retrieves a category of a catalog specified by the catalog ID and the
	// category name. It includes the first level of controls within each
	// category.
	GetCategory(context.Context, *connect.Request[orchestrator.GetCategoryRequest]) (*connect.Response[orchestrator.Category], error)
	// If no additional parameters are specified, this lists all controls. If a
	// catalog ID and a category name is specified, then only controls containing
	// in this category are returned.
	ListControls(context.Context, *connect.Request[orchestrator.ListControlsRequest]) (*connect.Response[orchestrator.ListControlsResponse], error)
	// Retrieves a control specified by the catalog ID, the control's category
	// name and the control ID. If present, it also includes a list of
	// sub-controls if present or a list of metrics if no sub-controls but metrics
	// are present.
	GetControl(context.Context, *connect.Request[orchestrator.GetControlRequest]) (*connect.Response[orchestrator.Control], error)
	// Creates a new Target of Evaluation
	CreateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.CreateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Retrieves a Target of Evaluation
	GetTargetOfEvaluation(context.Context, *connect.Request[orchestrator.GetTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Lists all Targets of Evaluation
	ListTargetsOfEvaluation(context.Context, *connect.Request[orchestrator.ListTargetsOfEvaluationRequest]) (*connect.Response[orchestrator.ListTargetsOfEvaluationResponse], error)
	// Updates an existing Target of Evaluation
	UpdateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.UpdateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Removes a Target of Evaluation
	RemoveTargetOfEvaluation(context.Context, *connect.Request[orchestrator.RemoveTargetOfEvaluationRequest]) (*connect.Response[emptypb.Empty], error)
	// Get Runtime Information
	GetRuntimeInfo(context.Context, *connect.Request[runtime.GetRuntimeInfoRequest]) (*connect.Response[runtime.Runtime], error)
}

// NewOrchestratorClient constructs a client for the clouditor.orchestrator.v1.Orchestrator service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrchestratorClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrchestratorClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orchestratorClient{
		registerAssessmentTool: connect.NewClient[orchestrator.RegisterAssessmentToolRequest, orchestrator.AssessmentTool](
			httpClient,
			baseURL+OrchestratorRegisterAssessmentToolProcedure,
			connect.WithSchema(orchestratorRegisterAssessmentToolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAssessmentTools: connect.NewClient[orchestrator.ListAssessmentToolsRequest, orchestrator.ListAssessmentToolsResponse](
			httpClient,
			baseURL+OrchestratorListAssessmentToolsProcedure,
			connect.WithSchema(orchestratorListAssessmentToolsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAssessmentTool: connect.NewClient[orchestrator.GetAssessmentToolRequest, orchestrator.AssessmentTool](
			httpClient,
			baseURL+OrchestratorGetAssessmentToolProcedure,
			connect.WithSchema(orchestratorGetAssessmentToolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAssessmentTool: connect.NewClient[orchestrator.UpdateAssessmentToolRequest, orchestrator.AssessmentTool](
			httpClient,
			baseURL+OrchestratorUpdateAssessmentToolProcedure,
			connect.WithSchema(orchestratorUpdateAssessmentToolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deregisterAssessmentTool: connect.NewClient[orchestrator.DeregisterAssessmentToolRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorDeregisterAssessmentToolProcedure,
			connect.WithSchema(orchestratorDeregisterAssessmentToolMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storeAssessmentResult: connect.NewClient[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultResponse](
			httpClient,
			baseURL+OrchestratorStoreAssessmentResultProcedure,
			connect.WithSchema(orchestratorStoreAssessmentResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		storeAssessmentResults: connect.NewClient[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse](
			httpClient,
			baseURL+OrchestratorStoreAssessmentResultsProcedure,
			connect.WithSchema(orchestratorStoreAssessmentResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAssessmentResult: connect.NewClient[orchestrator.GetAssessmentResultRequest, assessment.AssessmentResult](
			httpClient,
			baseURL+OrchestratorGetAssessmentResultProcedure,
			connect.WithSchema(orchestratorGetAssessmentResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAssessmentResults: connect.NewClient[orchestrator.ListAssessmentResultsRequest, orchestrator.ListAssessmentResultsResponse](
			httpClient,
			baseURL+OrchestratorListAssessmentResultsProcedure,
			connect.WithSchema(orchestratorListAssessmentResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createMetric: connect.NewClient[orchestrator.CreateMetricRequest, assessment.Metric](
			httpClient,
			baseURL+OrchestratorCreateMetricProcedure,
			connect.WithSchema(orchestratorCreateMetricMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMetric: connect.NewClient[orchestrator.UpdateMetricRequest, assessment.Metric](
			httpClient,
			baseURL+OrchestratorUpdateMetricProcedure,
			connect.WithSchema(orchestratorUpdateMetricMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMetric: connect.NewClient[orchestrator.GetMetricRequest, assessment.Metric](
			httpClient,
			baseURL+OrchestratorGetMetricProcedure,
			connect.WithSchema(orchestratorGetMetricMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMetrics: connect.NewClient[orchestrator.ListMetricsRequest, orchestrator.ListMetricsResponse](
			httpClient,
			baseURL+OrchestratorListMetricsProcedure,
			connect.WithSchema(orchestratorListMetricsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeMetric: connect.NewClient[orchestrator.RemoveMetricRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorRemoveMetricProcedure,
			connect.WithSchema(orchestratorRemoveMetricMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerCloudService: connect.NewClient[orchestrator.RegisterCloudServiceRequest, orchestrator.CloudService](
			httpClient,
			baseURL+OrchestratorRegisterCloudServiceProcedure,
			connect.WithSchema(orchestratorRegisterCloudServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCloudService: connect.NewClient[orchestrator.UpdateCloudServiceRequest, orchestrator.CloudService](
			httpClient,
			baseURL+OrchestratorUpdateCloudServiceProcedure,
			connect.WithSchema(orchestratorUpdateCloudServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCloudService: connect.NewClient[orchestrator.GetCloudServiceRequest, orchestrator.CloudService](
			httpClient,
			baseURL+OrchestratorGetCloudServiceProcedure,
			connect.WithSchema(orchestratorGetCloudServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCloudServices: connect.NewClient[orchestrator.ListCloudServicesRequest, orchestrator.ListCloudServicesResponse](
			httpClient,
			baseURL+OrchestratorListCloudServicesProcedure,
			connect.WithSchema(orchestratorListCloudServicesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeCloudService: connect.NewClient[orchestrator.RemoveCloudServiceRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorRemoveCloudServiceProcedure,
			connect.WithSchema(orchestratorRemoveCloudServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCloudServiceStatistics: connect.NewClient[orchestrator.GetCloudServiceStatisticsRequest, orchestrator.GetCloudServiceStatisticsResponse](
			httpClient,
			baseURL+OrchestratorGetCloudServiceStatisticsProcedure,
			connect.WithSchema(orchestratorGetCloudServiceStatisticsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMetricConfiguration: connect.NewClient[orchestrator.UpdateMetricConfigurationRequest, assessment.MetricConfiguration](
			httpClient,
			baseURL+OrchestratorUpdateMetricConfigurationProcedure,
			connect.WithSchema(orchestratorUpdateMetricConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMetricConfiguration: connect.NewClient[orchestrator.GetMetricConfigurationRequest, assessment.MetricConfiguration](
			httpClient,
			baseURL+OrchestratorGetMetricConfigurationProcedure,
			connect.WithSchema(orchestratorGetMetricConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listMetricConfigurations: connect.NewClient[orchestrator.ListMetricConfigurationRequest, orchestrator.ListMetricConfigurationResponse](
			httpClient,
			baseURL+OrchestratorListMetricConfigurationsProcedure,
			connect.WithSchema(orchestratorListMetricConfigurationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateMetricImplementation: connect.NewClient[orchestrator.UpdateMetricImplementationRequest, assessment.MetricImplementation](
			httpClient,
			baseURL+OrchestratorUpdateMetricImplementationProcedure,
			connect.WithSchema(orchestratorUpdateMetricImplementationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMetricImplementation: connect.NewClient[orchestrator.GetMetricImplementationRequest, assessment.MetricImplementation](
			httpClient,
			baseURL+OrchestratorGetMetricImplementationProcedure,
			connect.WithSchema(orchestratorGetMetricImplementationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeMetricChangeEvents: connect.NewClient[orchestrator.SubscribeMetricChangeEventRequest, orchestrator.MetricChangeEvent](
			httpClient,
			baseURL+OrchestratorSubscribeMetricChangeEventsProcedure,
			connect.WithSchema(orchestratorSubscribeMetricChangeEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCertificate: connect.NewClient[orchestrator.CreateCertificateRequest, orchestrator.Certificate](
			httpClient,
			baseURL+OrchestratorCreateCertificateProcedure,
			connect.WithSchema(orchestratorCreateCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCertificate: connect.NewClient[orchestrator.GetCertificateRequest, orchestrator.Certificate](
			httpClient,
			baseURL+OrchestratorGetCertificateProcedure,
			connect.WithSchema(orchestratorGetCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCertificates: connect.NewClient[orchestrator.ListCertificatesRequest, orchestrator.ListCertificatesResponse](
			httpClient,
			baseURL+OrchestratorListCertificatesProcedure,
			connect.WithSchema(orchestratorListCertificatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPublicCertificates: connect.NewClient[orchestrator.ListPublicCertificatesRequest, orchestrator.ListPublicCertificatesResponse](
			httpClient,
			baseURL+OrchestratorListPublicCertificatesProcedure,
			connect.WithSchema(orchestratorListPublicCertificatesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCertificate: connect.NewClient[orchestrator.UpdateCertificateRequest, orchestrator.Certificate](
			httpClient,
			baseURL+OrchestratorUpdateCertificateProcedure,
			connect.WithSchema(orchestratorUpdateCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeCertificate: connect.NewClient[orchestrator.RemoveCertificateRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorRemoveCertificateProcedure,
			connect.WithSchema(orchestratorRemoveCertificateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCatalog: connect.NewClient[orchestrator.CreateCatalogRequest, orchestrator.Catalog](
			httpClient,
			baseURL+OrchestratorCreateCatalogProcedure,
			connect.WithSchema(orchestratorCreateCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listCatalogs: connect.NewClient[orchestrator.ListCatalogsRequest, orchestrator.ListCatalogsResponse](
			httpClient,
			baseURL+OrchestratorListCatalogsProcedure,
			connect.WithSchema(orchestratorListCatalogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCatalog: connect.NewClient[orchestrator.GetCatalogRequest, orchestrator.Catalog](
			httpClient,
			baseURL+OrchestratorGetCatalogProcedure,
			connect.WithSchema(orchestratorGetCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeCatalog: connect.NewClient[orchestrator.RemoveCatalogRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorRemoveCatalogProcedure,
			connect.WithSchema(orchestratorRemoveCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCatalog: connect.NewClient[orchestrator.UpdateCatalogRequest, orchestrator.Catalog](
			httpClient,
			baseURL+OrchestratorUpdateCatalogProcedure,
			connect.WithSchema(orchestratorUpdateCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCategory: connect.NewClient[orchestrator.GetCategoryRequest, orchestrator.Category](
			httpClient,
			baseURL+OrchestratorGetCategoryProcedure,
			connect.WithSchema(orchestratorGetCategoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listControls: connect.NewClient[orchestrator.ListControlsRequest, orchestrator.ListControlsResponse](
			httpClient,
			baseURL+OrchestratorListControlsProcedure,
			connect.WithSchema(orchestratorListControlsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getControl: connect.NewClient[orchestrator.GetControlRequest, orchestrator.Control](
			httpClient,
			baseURL+OrchestratorGetControlProcedure,
			connect.WithSchema(orchestratorGetControlMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createTargetOfEvaluation: connect.NewClient[orchestrator.CreateTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation](
			httpClient,
			baseURL+OrchestratorCreateTargetOfEvaluationProcedure,
			connect.WithSchema(orchestratorCreateTargetOfEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTargetOfEvaluation: connect.NewClient[orchestrator.GetTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation](
			httpClient,
			baseURL+OrchestratorGetTargetOfEvaluationProcedure,
			connect.WithSchema(orchestratorGetTargetOfEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTargetsOfEvaluation: connect.NewClient[orchestrator.ListTargetsOfEvaluationRequest, orchestrator.ListTargetsOfEvaluationResponse](
			httpClient,
			baseURL+OrchestratorListTargetsOfEvaluationProcedure,
			connect.WithSchema(orchestratorListTargetsOfEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateTargetOfEvaluation: connect.NewClient[orchestrator.UpdateTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation](
			httpClient,
			baseURL+OrchestratorUpdateTargetOfEvaluationProcedure,
			connect.WithSchema(orchestratorUpdateTargetOfEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeTargetOfEvaluation: connect.NewClient[orchestrator.RemoveTargetOfEvaluationRequest, emptypb.Empty](
			httpClient,
			baseURL+OrchestratorRemoveTargetOfEvaluationProcedure,
			connect.WithSchema(orchestratorRemoveTargetOfEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRuntimeInfo: connect.NewClient[runtime.GetRuntimeInfoRequest, runtime.Runtime](
			httpClient,
			baseURL+OrchestratorGetRuntimeInfoProcedure,
			connect.WithSchema(orchestratorGetRuntimeInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// orchestratorClient implements OrchestratorClient.
type orchestratorClient struct {
	registerAssessmentTool      *connect.Client[orchestrator.RegisterAssessmentToolRequest, orchestrator.AssessmentTool]
	listAssessmentTools         *connect.Client[orchestrator.ListAssessmentToolsRequest, orchestrator.ListAssessmentToolsResponse]
	getAssessmentTool           *connect.Client[orchestrator.GetAssessmentToolRequest, orchestrator.AssessmentTool]
	updateAssessmentTool        *connect.Client[orchestrator.UpdateAssessmentToolRequest, orchestrator.AssessmentTool]
	deregisterAssessmentTool    *connect.Client[orchestrator.DeregisterAssessmentToolRequest, emptypb.Empty]
	storeAssessmentResult       *connect.Client[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultResponse]
	storeAssessmentResults      *connect.Client[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse]
	getAssessmentResult         *connect.Client[orchestrator.GetAssessmentResultRequest, assessment.AssessmentResult]
	listAssessmentResults       *connect.Client[orchestrator.ListAssessmentResultsRequest, orchestrator.ListAssessmentResultsResponse]
	createMetric                *connect.Client[orchestrator.CreateMetricRequest, assessment.Metric]
	updateMetric                *connect.Client[orchestrator.UpdateMetricRequest, assessment.Metric]
	getMetric                   *connect.Client[orchestrator.GetMetricRequest, assessment.Metric]
	listMetrics                 *connect.Client[orchestrator.ListMetricsRequest, orchestrator.ListMetricsResponse]
	removeMetric                *connect.Client[orchestrator.RemoveMetricRequest, emptypb.Empty]
	registerCloudService        *connect.Client[orchestrator.RegisterCloudServiceRequest, orchestrator.CloudService]
	updateCloudService          *connect.Client[orchestrator.UpdateCloudServiceRequest, orchestrator.CloudService]
	getCloudService             *connect.Client[orchestrator.GetCloudServiceRequest, orchestrator.CloudService]
	listCloudServices           *connect.Client[orchestrator.ListCloudServicesRequest, orchestrator.ListCloudServicesResponse]
	removeCloudService          *connect.Client[orchestrator.RemoveCloudServiceRequest, emptypb.Empty]
	getCloudServiceStatistics   *connect.Client[orchestrator.GetCloudServiceStatisticsRequest, orchestrator.GetCloudServiceStatisticsResponse]
	updateMetricConfiguration   *connect.Client[orchestrator.UpdateMetricConfigurationRequest, assessment.MetricConfiguration]
	getMetricConfiguration      *connect.Client[orchestrator.GetMetricConfigurationRequest, assessment.MetricConfiguration]
	listMetricConfigurations    *connect.Client[orchestrator.ListMetricConfigurationRequest, orchestrator.ListMetricConfigurationResponse]
	updateMetricImplementation  *connect.Client[orchestrator.UpdateMetricImplementationRequest, assessment.MetricImplementation]
	getMetricImplementation     *connect.Client[orchestrator.GetMetricImplementationRequest, assessment.MetricImplementation]
	subscribeMetricChangeEvents *connect.Client[orchestrator.SubscribeMetricChangeEventRequest, orchestrator.MetricChangeEvent]
	createCertificate           *connect.Client[orchestrator.CreateCertificateRequest, orchestrator.Certificate]
	getCertificate              *connect.Client[orchestrator.GetCertificateRequest, orchestrator.Certificate]
	listCertificates            *connect.Client[orchestrator.ListCertificatesRequest, orchestrator.ListCertificatesResponse]
	listPublicCertificates      *connect.Client[orchestrator.ListPublicCertificatesRequest, orchestrator.ListPublicCertificatesResponse]
	updateCertificate           *connect.Client[orchestrator.UpdateCertificateRequest, orchestrator.Certificate]
	removeCertificate           *connect.Client[orchestrator.RemoveCertificateRequest, emptypb.Empty]
	createCatalog               *connect.Client[orchestrator.CreateCatalogRequest, orchestrator.Catalog]
	listCatalogs                *connect.Client[orchestrator.ListCatalogsRequest, orchestrator.ListCatalogsResponse]
	getCatalog                  *connect.Client[orchestrator.GetCatalogRequest, orchestrator.Catalog]
	removeCatalog               *connect.Client[orchestrator.RemoveCatalogRequest, emptypb.Empty]
	updateCatalog               *connect.Client[orchestrator.UpdateCatalogRequest, orchestrator.Catalog]
	getCategory                 *connect.Client[orchestrator.GetCategoryRequest, orchestrator.Category]
	listControls                *connect.Client[orchestrator.ListControlsRequest, orchestrator.ListControlsResponse]
	getControl                  *connect.Client[orchestrator.GetControlRequest, orchestrator.Control]
	createTargetOfEvaluation    *connect.Client[orchestrator.CreateTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation]
	getTargetOfEvaluation       *connect.Client[orchestrator.GetTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation]
	listTargetsOfEvaluation     *connect.Client[orchestrator.ListTargetsOfEvaluationRequest, orchestrator.ListTargetsOfEvaluationResponse]
	updateTargetOfEvaluation    *connect.Client[orchestrator.UpdateTargetOfEvaluationRequest, orchestrator.TargetOfEvaluation]
	removeTargetOfEvaluation    *connect.Client[orchestrator.RemoveTargetOfEvaluationRequest, emptypb.Empty]
	getRuntimeInfo              *connect.Client[runtime.GetRuntimeInfoRequest, runtime.Runtime]
}

// RegisterAssessmentTool calls clouditor.orchestrator.v1.Orchestrator.RegisterAssessmentTool.
func (c *orchestratorClient) RegisterAssessmentTool(ctx context.Context, req *connect.Request[orchestrator.RegisterAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return c.registerAssessmentTool.CallUnary(ctx, req)
}

// ListAssessmentTools calls clouditor.orchestrator.v1.Orchestrator.ListAssessmentTools.
func (c *orchestratorClient) ListAssessmentTools(ctx context.Context, req *connect.Request[orchestrator.ListAssessmentToolsRequest]) (*connect.Response[orchestrator.ListAssessmentToolsResponse], error) {
	return c.listAssessmentTools.CallUnary(ctx, req)
}

// GetAssessmentTool calls clouditor.orchestrator.v1.Orchestrator.GetAssessmentTool.
func (c *orchestratorClient) GetAssessmentTool(ctx context.Context, req *connect.Request[orchestrator.GetAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return c.getAssessmentTool.CallUnary(ctx, req)
}

// UpdateAssessmentTool calls clouditor.orchestrator.v1.Orchestrator.UpdateAssessmentTool.
func (c *orchestratorClient) UpdateAssessmentTool(ctx context.Context, req *connect.Request[orchestrator.UpdateAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return c.updateAssessmentTool.CallUnary(ctx, req)
}

// DeregisterAssessmentTool calls clouditor.orchestrator.v1.Orchestrator.DeregisterAssessmentTool.
func (c *orchestratorClient) DeregisterAssessmentTool(ctx context.Context, req *connect.Request[orchestrator.DeregisterAssessmentToolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deregisterAssessmentTool.CallUnary(ctx, req)
}

// StoreAssessmentResult calls clouditor.orchestrator.v1.Orchestrator.StoreAssessmentResult.
func (c *orchestratorClient) StoreAssessmentResult(ctx context.Context, req *connect.Request[orchestrator.StoreAssessmentResultRequest]) (*connect.Response[orchestrator.StoreAssessmentResultResponse], error) {
	return c.storeAssessmentResult.CallUnary(ctx, req)
}

// StoreAssessmentResults calls clouditor.orchestrator.v1.Orchestrator.StoreAssessmentResults.
func (c *orchestratorClient) StoreAssessmentResults(ctx context.Context) *connect.BidiStreamForClient[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse] {
	return c.storeAssessmentResults.CallBidiStream(ctx)
}

// GetAssessmentResult calls clouditor.orchestrator.v1.Orchestrator.GetAssessmentResult.
func (c *orchestratorClient) GetAssessmentResult(ctx context.Context, req *connect.Request[orchestrator.GetAssessmentResultRequest]) (*connect.Response[assessment.AssessmentResult], error) {
	return c.getAssessmentResult.CallUnary(ctx, req)
}

// ListAssessmentResults calls clouditor.orchestrator.v1.Orchestrator.ListAssessmentResults.
func (c *orchestratorClient) ListAssessmentResults(ctx context.Context, req *connect.Request[orchestrator.ListAssessmentResultsRequest]) (*connect.Response[orchestrator.ListAssessmentResultsResponse], error) {
	return c.listAssessmentResults.CallUnary(ctx, req)
}

// CreateMetric calls clouditor.orchestrator.v1.Orchestrator.CreateMetric.
func (c *orchestratorClient) CreateMetric(ctx context.Context, req *connect.Request[orchestrator.CreateMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return c.createMetric.CallUnary(ctx, req)
}

// UpdateMetric calls clouditor.orchestrator.v1.Orchestrator.UpdateMetric.
func (c *orchestratorClient) UpdateMetric(ctx context.Context, req *connect.Request[orchestrator.UpdateMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return c.updateMetric.CallUnary(ctx, req)
}

// GetMetric calls clouditor.orchestrator.v1.Orchestrator.GetMetric.
func (c *orchestratorClient) GetMetric(ctx context.Context, req *connect.Request[orchestrator.GetMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return c.getMetric.CallUnary(ctx, req)
}

// ListMetrics calls clouditor.orchestrator.v1.Orchestrator.ListMetrics.
func (c *orchestratorClient) ListMetrics(ctx context.Context, req *connect.Request[orchestrator.ListMetricsRequest]) (*connect.Response[orchestrator.ListMetricsResponse], error) {
	return c.listMetrics.CallUnary(ctx, req)
}

// RemoveMetric calls clouditor.orchestrator.v1.Orchestrator.RemoveMetric.
func (c *orchestratorClient) RemoveMetric(ctx context.Context, req *connect.Request[orchestrator.RemoveMetricRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeMetric.CallUnary(ctx, req)
}

// RegisterCloudService calls clouditor.orchestrator.v1.Orchestrator.RegisterCloudService.
func (c *orchestratorClient) RegisterCloudService(ctx context.Context, req *connect.Request[orchestrator.RegisterCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return c.registerCloudService.CallUnary(ctx, req)
}

// UpdateCloudService calls clouditor.orchestrator.v1.Orchestrator.UpdateCloudService.
func (c *orchestratorClient) UpdateCloudService(ctx context.Context, req *connect.Request[orchestrator.UpdateCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return c.updateCloudService.CallUnary(ctx, req)
}

// GetCloudService calls clouditor.orchestrator.v1.Orchestrator.GetCloudService.
func (c *orchestratorClient) GetCloudService(ctx context.Context, req *connect.Request[orchestrator.GetCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return c.getCloudService.CallUnary(ctx, req)
}

// ListCloudServices calls clouditor.orchestrator.v1.Orchestrator.ListCloudServices.
func (c *orchestratorClient) ListCloudServices(ctx context.Context, req *connect.Request[orchestrator.ListCloudServicesRequest]) (*connect.Response[orchestrator.ListCloudServicesResponse], error) {
	return c.listCloudServices.CallUnary(ctx, req)
}

// RemoveCloudService calls clouditor.orchestrator.v1.Orchestrator.RemoveCloudService.
func (c *orchestratorClient) RemoveCloudService(ctx context.Context, req *connect.Request[orchestrator.RemoveCloudServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeCloudService.CallUnary(ctx, req)
}

// GetCloudServiceStatistics calls clouditor.orchestrator.v1.Orchestrator.GetCloudServiceStatistics.
func (c *orchestratorClient) GetCloudServiceStatistics(ctx context.Context, req *connect.Request[orchestrator.GetCloudServiceStatisticsRequest]) (*connect.Response[orchestrator.GetCloudServiceStatisticsResponse], error) {
	return c.getCloudServiceStatistics.CallUnary(ctx, req)
}

// UpdateMetricConfiguration calls clouditor.orchestrator.v1.Orchestrator.UpdateMetricConfiguration.
func (c *orchestratorClient) UpdateMetricConfiguration(ctx context.Context, req *connect.Request[orchestrator.UpdateMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error) {
	return c.updateMetricConfiguration.CallUnary(ctx, req)
}

// GetMetricConfiguration calls clouditor.orchestrator.v1.Orchestrator.GetMetricConfiguration.
func (c *orchestratorClient) GetMetricConfiguration(ctx context.Context, req *connect.Request[orchestrator.GetMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error) {
	return c.getMetricConfiguration.CallUnary(ctx, req)
}

// ListMetricConfigurations calls clouditor.orchestrator.v1.Orchestrator.ListMetricConfigurations.
func (c *orchestratorClient) ListMetricConfigurations(ctx context.Context, req *connect.Request[orchestrator.ListMetricConfigurationRequest]) (*connect.Response[orchestrator.ListMetricConfigurationResponse], error) {
	return c.listMetricConfigurations.CallUnary(ctx, req)
}

// UpdateMetricImplementation calls
// clouditor.orchestrator.v1.Orchestrator.UpdateMetricImplementation.
func (c *orchestratorClient) UpdateMetricImplementation(ctx context.Context, req *connect.Request[orchestrator.UpdateMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error) {
	return c.updateMetricImplementation.CallUnary(ctx, req)
}

// GetMetricImplementation calls clouditor.orchestrator.v1.Orchestrator.GetMetricImplementation.
func (c *orchestratorClient) GetMetricImplementation(ctx context.Context, req *connect.Request[orchestrator.GetMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error) {
	return c.getMetricImplementation.CallUnary(ctx, req)
}

// SubscribeMetricChangeEvents calls
// clouditor.orchestrator.v1.Orchestrator.SubscribeMetricChangeEvents.
func (c *orchestratorClient) SubscribeMetricChangeEvents(ctx context.Context, req *connect.Request[orchestrator.SubscribeMetricChangeEventRequest]) (*connect.ServerStreamForClient[orchestrator.MetricChangeEvent], error) {
	return c.subscribeMetricChangeEvents.CallServerStream(ctx, req)
}

// CreateCertificate calls clouditor.orchestrator.v1.Orchestrator.CreateCertificate.
func (c *orchestratorClient) CreateCertificate(ctx context.Context, req *connect.Request[orchestrator.CreateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return c.createCertificate.CallUnary(ctx, req)
}

// GetCertificate calls clouditor.orchestrator.v1.Orchestrator.GetCertificate.
func (c *orchestratorClient) GetCertificate(ctx context.Context, req *connect.Request[orchestrator.GetCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return c.getCertificate.CallUnary(ctx, req)
}

// ListCertificates calls clouditor.orchestrator.v1.Orchestrator.ListCertificates.
func (c *orchestratorClient) ListCertificates(ctx context.Context, req *connect.Request[orchestrator.ListCertificatesRequest]) (*connect.Response[orchestrator.ListCertificatesResponse], error) {
	return c.listCertificates.CallUnary(ctx, req)
}

// ListPublicCertificates calls clouditor.orchestrator.v1.Orchestrator.ListPublicCertificates.
func (c *orchestratorClient) ListPublicCertificates(ctx context.Context, req *connect.Request[orchestrator.ListPublicCertificatesRequest]) (*connect.Response[orchestrator.ListPublicCertificatesResponse], error) {
	return c.listPublicCertificates.CallUnary(ctx, req)
}

// UpdateCertificate calls clouditor.orchestrator.v1.Orchestrator.UpdateCertificate.
func (c *orchestratorClient) UpdateCertificate(ctx context.Context, req *connect.Request[orchestrator.UpdateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return c.updateCertificate.CallUnary(ctx, req)
}

// RemoveCertificate calls clouditor.orchestrator.v1.Orchestrator.RemoveCertificate.
func (c *orchestratorClient) RemoveCertificate(ctx context.Context, req *connect.Request[orchestrator.RemoveCertificateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeCertificate.CallUnary(ctx, req)
}

// CreateCatalog calls clouditor.orchestrator.v1.Orchestrator.CreateCatalog.
func (c *orchestratorClient) CreateCatalog(ctx context.Context, req *connect.Request[orchestrator.CreateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return c.createCatalog.CallUnary(ctx, req)
}

// ListCatalogs calls clouditor.orchestrator.v1.Orchestrator.ListCatalogs.
func (c *orchestratorClient) ListCatalogs(ctx context.Context, req *connect.Request[orchestrator.ListCatalogsRequest]) (*connect.Response[orchestrator.ListCatalogsResponse], error) {
	return c.listCatalogs.CallUnary(ctx, req)
}

// GetCatalog calls clouditor.orchestrator.v1.Orchestrator.GetCatalog.
func (c *orchestratorClient) GetCatalog(ctx context.Context, req *connect.Request[orchestrator.GetCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return c.getCatalog.CallUnary(ctx, req)
}

// RemoveCatalog calls clouditor.orchestrator.v1.Orchestrator.RemoveCatalog.
func (c *orchestratorClient) RemoveCatalog(ctx context.Context, req *connect.Request[orchestrator.RemoveCatalogRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeCatalog.CallUnary(ctx, req)
}

// UpdateCatalog calls clouditor.orchestrator.v1.Orchestrator.UpdateCatalog.
func (c *orchestratorClient) UpdateCatalog(ctx context.Context, req *connect.Request[orchestrator.UpdateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return c.updateCatalog.CallUnary(ctx, req)
}

// GetCategory calls clouditor.orchestrator.v1.Orchestrator.GetCategory.
func (c *orchestratorClient) GetCategory(ctx context.Context, req *connect.Request[orchestrator.GetCategoryRequest]) (*connect.Response[orchestrator.Category], error) {
	return c.getCategory.CallUnary(ctx, req)
}

// ListControls calls clouditor.orchestrator.v1.Orchestrator.ListControls.
func (c *orchestratorClient) ListControls(ctx context.Context, req *connect.Request[orchestrator.ListControlsRequest]) (*connect.Response[orchestrator.ListControlsResponse], error) {
	return c.listControls.CallUnary(ctx, req)
}

// GetControl calls clouditor.orchestrator.v1.Orchestrator.GetControl.
func (c *orchestratorClient) GetControl(ctx context.Context, req *connect.Request[orchestrator.GetControlRequest]) (*connect.Response[orchestrator.Control], error) {
	return c.getControl.CallUnary(ctx, req)
}

// CreateTargetOfEvaluation calls clouditor.orchestrator.v1.Orchestrator.CreateTargetOfEvaluation.
func (c *orchestratorClient) CreateTargetOfEvaluation(ctx context.Context, req *connect.Request[orchestrator.CreateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return c.createTargetOfEvaluation.CallUnary(ctx, req)
}

// GetTargetOfEvaluation calls clouditor.orchestrator.v1.Orchestrator.GetTargetOfEvaluation.
func (c *orchestratorClient) GetTargetOfEvaluation(ctx context.Context, req *connect.Request[orchestrator.GetTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return c.getTargetOfEvaluation.CallUnary(ctx, req)
}

// ListTargetsOfEvaluation calls clouditor.orchestrator.v1.Orchestrator.ListTargetsOfEvaluation.
func (c *orchestratorClient) ListTargetsOfEvaluation(ctx context.Context, req *connect.Request[orchestrator.ListTargetsOfEvaluationRequest]) (*connect.Response[orchestrator.ListTargetsOfEvaluationResponse], error) {
	return c.listTargetsOfEvaluation.CallUnary(ctx, req)
}

// UpdateTargetOfEvaluation calls clouditor.orchestrator.v1.Orchestrator.UpdateTargetOfEvaluation.
func (c *orchestratorClient) UpdateTargetOfEvaluation(ctx context.Context, req *connect.Request[orchestrator.UpdateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return c.updateTargetOfEvaluation.CallUnary(ctx, req)
}

// RemoveTargetOfEvaluation calls clouditor.orchestrator.v1.Orchestrator.RemoveTargetOfEvaluation.
func (c *orchestratorClient) RemoveTargetOfEvaluation(ctx context.Context, req *connect.Request[orchestrator.RemoveTargetOfEvaluationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeTargetOfEvaluation.CallUnary(ctx, req)
}

// GetRuntimeInfo calls clouditor.orchestrator.v1.Orchestrator.GetRuntimeInfo.
func (c *orchestratorClient) GetRuntimeInfo(ctx context.Context, req *connect.Request[runtime.GetRuntimeInfoRequest]) (*connect.Response[runtime.Runtime], error) {
	return c.getRuntimeInfo.CallUnary(ctx, req)
}

// OrchestratorHandler is an implementation of the clouditor.orchestrator.v1.Orchestrator service.
type OrchestratorHandler interface {
	// Registers the passed assessment tool
	RegisterAssessmentTool(context.Context, *connect.Request[orchestrator.RegisterAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Lists all assessment tools assessing evidences for the metric given by the
	// passed metric id
	ListAssessmentTools(context.Context, *connect.Request[orchestrator.ListAssessmentToolsRequest]) (*connect.Response[orchestrator.ListAssessmentToolsResponse], error)
	// Returns assessment tool given by the passed tool id
	GetAssessmentTool(context.Context, *connect.Request[orchestrator.GetAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Updates the assessment tool given by the passed id
	UpdateAssessmentTool(context.Context, *connect.Request[orchestrator.UpdateAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error)
	// Remove assessment tool with passed id from the list of active assessment
	// tools
	DeregisterAssessmentTool(context.Context, *connect.Request[orchestrator.DeregisterAssessmentToolRequest]) (*connect.Response[emptypb.Empty], error)
	// Stores the assessment result provided by an assessment tool
	StoreAssessmentResult(context.Context, *connect.Request[orchestrator.StoreAssessmentResultRequest]) (*connect.Response[orchestrator.StoreAssessmentResultResponse], error)
	// Stores stream of assessment results provided by an assessment tool and
	// returns a response stream. Part of the public API, not exposed as REST.
	StoreAssessmentResults(context.Context, *connect.BidiStream[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse]) error
	// Get an assessment result by ID
	GetAssessmentResult(context.Context, *connect.Request[orchestrator.GetAssessmentResultRequest]) (*connect.Response[assessment.AssessmentResult], error)
	// List all assessment results. Part of the public API, also exposed as REST.
	ListAssessmentResults(context.Context, *connect.Request[orchestrator.ListAssessmentResultsRequest]) (*connect.Response[orchestrator.ListAssessmentResultsResponse], error)
	// Creates a new metric
	CreateMetric(context.Context, *connect.Request[orchestrator.CreateMetricRequest]) (*connect.Response[assessment.Metric], error)
	// Updates an existing metric
	UpdateMetric(context.Context, *connect.Request[orchestrator.UpdateMetricRequest]) (*connect.Response[assessment.Metric], error)
	// Returns the metric with the passed metric id
	GetMetric(context.Context, *connect.Request[orchestrator.GetMetricRequest]) (*connect.Response[assessment.Metric], error)
	// List all metrics provided by the metric catalog
	ListMetrics(context.Context, *connect.Request[orchestrator.ListMetricsRequest]) (*connect.Response[orchestrator.ListMetricsResponse], error)
	// Removes a new metric
	RemoveMetric(context.Context, *connect.Request[orchestrator.RemoveMetricRequest]) (*connect.Response[emptypb.Empty], error)
	// Registers a new target cloud service
	RegisterCloudService(context.Context, *connect.Request[orchestrator.RegisterCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Registers a new target cloud service
	UpdateCloudService(context.Context, *connect.Request[orchestrator.UpdateCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Retrieves a target cloud service
	GetCloudService(context.Context, *connect.Request[orchestrator.GetCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error)
	// Lists all target cloud services
	ListCloudServices(context.Context, *connect.Request[orchestrator.ListCloudServicesRequest]) (*connect.Response[orchestrator.ListCloudServicesResponse], error)
	// Removes a target cloud service
	RemoveCloudService(context.Context, *connect.Request[orchestrator.RemoveCloudServiceRequest]) (*connect.Response[emptypb.Empty], error)
	// Retrieves target cloud service statistics
	GetCloudServiceStatistics(context.Context, *connect.Request[orchestrator.GetCloudServiceStatisticsRequest]) (*connect.Response[orchestrator.GetCloudServiceStatisticsResponse], error)
	// Updates a metric configuration (target value and operator) for a specific
	// service and metric ID
	UpdateMetricConfiguration(context.Context, *connect.Request[orchestrator.UpdateMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error)
	// Retrieves a metric configuration (target value and operator) for a specific
	// service and metric ID.
	GetMetricConfiguration(context.Context, *connect.Request[orchestrator.GetMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error)
	// Lists all a metric configurations (target value and operator) for a
	// specific service ID
	ListMetricConfigurations(context.Context, *connect.Request[orchestrator.ListMetricConfigurationRequest]) (*connect.Response[orchestrator.ListMetricConfigurationResponse], error)
	// Updates an existing metric implementation
	UpdateMetricImplementation(context.Context, *connect.Request[orchestrator.UpdateMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error)
	// Returns the metric implementation of the passed metric id
	GetMetricImplementation(context.Context, *connect.Request[orchestrator.GetMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error)
	SubscribeMetricChangeEvents(context.Context, *connect.Request[orchestrator.SubscribeMetricChangeEventRequest], *connect.ServerStream[orchestrator.MetricChangeEvent]) error
	// Creates a new certificate
	CreateCertificate(context.Context, *connect.Request[orchestrator.CreateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Retrieves a certificate
	GetCertificate(context.Context, *connect.Request[orchestrator.GetCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Lists all target certificates
	ListCertificates(context.Context, *connect.Request[orchestrator.ListCertificatesRequest]) (*connect.Response[orchestrator.ListCertificatesResponse], error)
	// Lists all target certificates without state history
	ListPublicCertificates(context.Context, *connect.Request[orchestrator.ListPublicCertificatesRequest]) (*connect.Response[orchestrator.ListPublicCertificatesResponse], error)
	// Updates an existing certificate
	UpdateCertificate(context.Context, *connect.Request[orchestrator.UpdateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error)
	// Removes a certificate
	RemoveCertificate(context.Context, *connect.Request[orchestrator.RemoveCertificateRequest]) (*connect.Response[emptypb.Empty], error)
	// Creates a new security controls catalog
	CreateCatalog(context.Context, *connect.Request[orchestrator.CreateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Lists all security controls catalogs. Each catalog includes a list of its
	// categories but no additional sub-resources.
	ListCatalogs(context.Context, *connect.Request[orchestrator.ListCatalogsRequest]) (*connect.Response[orchestrator.ListCatalogsResponse], error)
	// Retrieves a specific catalog by it's ID. The catalog includes a list of all
	// of it categories as well as the first level of controls in each category.
	GetCatalog(context.Context, *connect.Request[orchestrator.GetCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Removes a catalog
	RemoveCatalog(context.Context, *connect.Request[orchestrator.RemoveCatalogRequest]) (*connect.Response[emptypb.Empty], error)
	// Updates an existing certificate
	UpdateCatalog(context.Context, *connect.Request[orchestrator.UpdateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error)
	// Retrieves a category of a catalog specified by the catalog ID and the
	// category name. It includes the first level of controls within each
	// category.
	GetCategory(context.Context, *connect.Request[orchestrator.GetCategoryRequest]) (*connect.Response[orchestrator.Category], error)
	// If no additional parameters are specified, this lists all controls. If a
	// catalog ID and a category name is specified, then only controls containing
	// in this category are returned.
	ListControls(context.Context, *connect.Request[orchestrator.ListControlsRequest]) (*connect.Response[orchestrator.ListControlsResponse], error)
	// Retrieves a control specified by the catalog ID, the control's category
	// name and the control ID. If present, it also includes a list of
	// sub-controls if present or a list of metrics if no sub-controls but metrics
	// are present.
	GetControl(context.Context, *connect.Request[orchestrator.GetControlRequest]) (*connect.Response[orchestrator.Control], error)
	// Creates a new Target of Evaluation
	CreateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.CreateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Retrieves a Target of Evaluation
	GetTargetOfEvaluation(context.Context, *connect.Request[orchestrator.GetTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Lists all Targets of Evaluation
	ListTargetsOfEvaluation(context.Context, *connect.Request[orchestrator.ListTargetsOfEvaluationRequest]) (*connect.Response[orchestrator.ListTargetsOfEvaluationResponse], error)
	// Updates an existing Target of Evaluation
	UpdateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.UpdateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error)
	// Removes a Target of Evaluation
	RemoveTargetOfEvaluation(context.Context, *connect.Request[orchestrator.RemoveTargetOfEvaluationRequest]) (*connect.Response[emptypb.Empty], error)
	// Get Runtime Information
	GetRuntimeInfo(context.Context, *connect.Request[runtime.GetRuntimeInfoRequest]) (*connect.Response[runtime.Runtime], error)
}

// NewOrchestratorHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrchestratorHandler(svc OrchestratorHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orchestratorRegisterAssessmentToolHandler := connect.NewUnaryHandler(
		OrchestratorRegisterAssessmentToolProcedure,
		svc.RegisterAssessmentTool,
		connect.WithSchema(orchestratorRegisterAssessmentToolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListAssessmentToolsHandler := connect.NewUnaryHandler(
		OrchestratorListAssessmentToolsProcedure,
		svc.ListAssessmentTools,
		connect.WithSchema(orchestratorListAssessmentToolsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetAssessmentToolHandler := connect.NewUnaryHandler(
		OrchestratorGetAssessmentToolProcedure,
		svc.GetAssessmentTool,
		connect.WithSchema(orchestratorGetAssessmentToolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateAssessmentToolHandler := connect.NewUnaryHandler(
		OrchestratorUpdateAssessmentToolProcedure,
		svc.UpdateAssessmentTool,
		connect.WithSchema(orchestratorUpdateAssessmentToolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorDeregisterAssessmentToolHandler := connect.NewUnaryHandler(
		OrchestratorDeregisterAssessmentToolProcedure,
		svc.DeregisterAssessmentTool,
		connect.WithSchema(orchestratorDeregisterAssessmentToolMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorStoreAssessmentResultHandler := connect.NewUnaryHandler(
		OrchestratorStoreAssessmentResultProcedure,
		svc.StoreAssessmentResult,
		connect.WithSchema(orchestratorStoreAssessmentResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorStoreAssessmentResultsHandler := connect.NewBidiStreamHandler(
		OrchestratorStoreAssessmentResultsProcedure,
		svc.StoreAssessmentResults,
		connect.WithSchema(orchestratorStoreAssessmentResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetAssessmentResultHandler := connect.NewUnaryHandler(
		OrchestratorGetAssessmentResultProcedure,
		svc.GetAssessmentResult,
		connect.WithSchema(orchestratorGetAssessmentResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListAssessmentResultsHandler := connect.NewUnaryHandler(
		OrchestratorListAssessmentResultsProcedure,
		svc.ListAssessmentResults,
		connect.WithSchema(orchestratorListAssessmentResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorCreateMetricHandler := connect.NewUnaryHandler(
		OrchestratorCreateMetricProcedure,
		svc.CreateMetric,
		connect.WithSchema(orchestratorCreateMetricMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateMetricHandler := connect.NewUnaryHandler(
		OrchestratorUpdateMetricProcedure,
		svc.UpdateMetric,
		connect.WithSchema(orchestratorUpdateMetricMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetMetricHandler := connect.NewUnaryHandler(
		OrchestratorGetMetricProcedure,
		svc.GetMetric,
		connect.WithSchema(orchestratorGetMetricMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListMetricsHandler := connect.NewUnaryHandler(
		OrchestratorListMetricsProcedure,
		svc.ListMetrics,
		connect.WithSchema(orchestratorListMetricsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRemoveMetricHandler := connect.NewUnaryHandler(
		OrchestratorRemoveMetricProcedure,
		svc.RemoveMetric,
		connect.WithSchema(orchestratorRemoveMetricMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRegisterCloudServiceHandler := connect.NewUnaryHandler(
		OrchestratorRegisterCloudServiceProcedure,
		svc.RegisterCloudService,
		connect.WithSchema(orchestratorRegisterCloudServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateCloudServiceHandler := connect.NewUnaryHandler(
		OrchestratorUpdateCloudServiceProcedure,
		svc.UpdateCloudService,
		connect.WithSchema(orchestratorUpdateCloudServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetCloudServiceHandler := connect.NewUnaryHandler(
		OrchestratorGetCloudServiceProcedure,
		svc.GetCloudService,
		connect.WithSchema(orchestratorGetCloudServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListCloudServicesHandler := connect.NewUnaryHandler(
		OrchestratorListCloudServicesProcedure,
		svc.ListCloudServices,
		connect.WithSchema(orchestratorListCloudServicesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRemoveCloudServiceHandler := connect.NewUnaryHandler(
		OrchestratorRemoveCloudServiceProcedure,
		svc.RemoveCloudService,
		connect.WithSchema(orchestratorRemoveCloudServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetCloudServiceStatisticsHandler := connect.NewUnaryHandler(
		OrchestratorGetCloudServiceStatisticsProcedure,
		svc.GetCloudServiceStatistics,
		connect.WithSchema(orchestratorGetCloudServiceStatisticsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateMetricConfigurationHandler := connect.NewUnaryHandler(
		OrchestratorUpdateMetricConfigurationProcedure,
		svc.UpdateMetricConfiguration,
		connect.WithSchema(orchestratorUpdateMetricConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetMetricConfigurationHandler := connect.NewUnaryHandler(
		OrchestratorGetMetricConfigurationProcedure,
		svc.GetMetricConfiguration,
		connect.WithSchema(orchestratorGetMetricConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListMetricConfigurationsHandler := connect.NewUnaryHandler(
		OrchestratorListMetricConfigurationsProcedure,
		svc.ListMetricConfigurations,
		connect.WithSchema(orchestratorListMetricConfigurationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateMetricImplementationHandler := connect.NewUnaryHandler(
		OrchestratorUpdateMetricImplementationProcedure,
		svc.UpdateMetricImplementation,
		connect.WithSchema(orchestratorUpdateMetricImplementationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetMetricImplementationHandler := connect.NewUnaryHandler(
		OrchestratorGetMetricImplementationProcedure,
		svc.GetMetricImplementation,
		connect.WithSchema(orchestratorGetMetricImplementationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorSubscribeMetricChangeEventsHandler := connect.NewServerStreamHandler(
		OrchestratorSubscribeMetricChangeEventsProcedure,
		svc.SubscribeMetricChangeEvents,
		connect.WithSchema(orchestratorSubscribeMetricChangeEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorCreateCertificateHandler := connect.NewUnaryHandler(
		OrchestratorCreateCertificateProcedure,
		svc.CreateCertificate,
		connect.WithSchema(orchestratorCreateCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetCertificateHandler := connect.NewUnaryHandler(
		OrchestratorGetCertificateProcedure,
		svc.GetCertificate,
		connect.WithSchema(orchestratorGetCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListCertificatesHandler := connect.NewUnaryHandler(
		OrchestratorListCertificatesProcedure,
		svc.ListCertificates,
		connect.WithSchema(orchestratorListCertificatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListPublicCertificatesHandler := connect.NewUnaryHandler(
		OrchestratorListPublicCertificatesProcedure,
		svc.ListPublicCertificates,
		connect.WithSchema(orchestratorListPublicCertificatesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateCertificateHandler := connect.NewUnaryHandler(
		OrchestratorUpdateCertificateProcedure,
		svc.UpdateCertificate,
		connect.WithSchema(orchestratorUpdateCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRemoveCertificateHandler := connect.NewUnaryHandler(
		OrchestratorRemoveCertificateProcedure,
		svc.RemoveCertificate,
		connect.WithSchema(orchestratorRemoveCertificateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorCreateCatalogHandler := connect.NewUnaryHandler(
		OrchestratorCreateCatalogProcedure,
		svc.CreateCatalog,
		connect.WithSchema(orchestratorCreateCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListCatalogsHandler := connect.NewUnaryHandler(
		OrchestratorListCatalogsProcedure,
		svc.ListCatalogs,
		connect.WithSchema(orchestratorListCatalogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetCatalogHandler := connect.NewUnaryHandler(
		OrchestratorGetCatalogProcedure,
		svc.GetCatalog,
		connect.WithSchema(orchestratorGetCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRemoveCatalogHandler := connect.NewUnaryHandler(
		OrchestratorRemoveCatalogProcedure,
		svc.RemoveCatalog,
		connect.WithSchema(orchestratorRemoveCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateCatalogHandler := connect.NewUnaryHandler(
		OrchestratorUpdateCatalogProcedure,
		svc.UpdateCatalog,
		connect.WithSchema(orchestratorUpdateCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetCategoryHandler := connect.NewUnaryHandler(
		OrchestratorGetCategoryProcedure,
		svc.GetCategory,
		connect.WithSchema(orchestratorGetCategoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListControlsHandler := connect.NewUnaryHandler(
		OrchestratorListControlsProcedure,
		svc.ListControls,
		connect.WithSchema(orchestratorListControlsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetControlHandler := connect.NewUnaryHandler(
		OrchestratorGetControlProcedure,
		svc.GetControl,
		connect.WithSchema(orchestratorGetControlMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorCreateTargetOfEvaluationHandler := connect.NewUnaryHandler(
		OrchestratorCreateTargetOfEvaluationProcedure,
		svc.CreateTargetOfEvaluation,
		connect.WithSchema(orchestratorCreateTargetOfEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetTargetOfEvaluationHandler := connect.NewUnaryHandler(
		OrchestratorGetTargetOfEvaluationProcedure,
		svc.GetTargetOfEvaluation,
		connect.WithSchema(orchestratorGetTargetOfEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorListTargetsOfEvaluationHandler := connect.NewUnaryHandler(
		OrchestratorListTargetsOfEvaluationProcedure,
		svc.ListTargetsOfEvaluation,
		connect.WithSchema(orchestratorListTargetsOfEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorUpdateTargetOfEvaluationHandler := connect.NewUnaryHandler(
		OrchestratorUpdateTargetOfEvaluationProcedure,
		svc.UpdateTargetOfEvaluation,
		connect.WithSchema(orchestratorUpdateTargetOfEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorRemoveTargetOfEvaluationHandler := connect.NewUnaryHandler(
		OrchestratorRemoveTargetOfEvaluationProcedure,
		svc.RemoveTargetOfEvaluation,
		connect.WithSchema(orchestratorRemoveTargetOfEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	orchestratorGetRuntimeInfoHandler := connect.NewUnaryHandler(
		OrchestratorGetRuntimeInfoProcedure,
		svc.GetRuntimeInfo,
		connect.WithSchema(orchestratorGetRuntimeInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.orchestrator.v1.Orchestrator/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrchestratorRegisterAssessmentToolProcedure:
			orchestratorRegisterAssessmentToolHandler.ServeHTTP(w, r)
		case OrchestratorListAssessmentToolsProcedure:
			orchestratorListAssessmentToolsHandler.ServeHTTP(w, r)
		case OrchestratorGetAssessmentToolProcedure:
			orchestratorGetAssessmentToolHandler.ServeHTTP(w, r)
		case OrchestratorUpdateAssessmentToolProcedure:
			orchestratorUpdateAssessmentToolHandler.ServeHTTP(w, r)
		case OrchestratorDeregisterAssessmentToolProcedure:
			orchestratorDeregisterAssessmentToolHandler.ServeHTTP(w, r)
		case OrchestratorStoreAssessmentResultProcedure:
			orchestratorStoreAssessmentResultHandler.ServeHTTP(w, r)
		case OrchestratorStoreAssessmentResultsProcedure:
			orchestratorStoreAssessmentResultsHandler.ServeHTTP(w, r)
		case OrchestratorGetAssessmentResultProcedure:
			orchestratorGetAssessmentResultHandler.ServeHTTP(w, r)
		case OrchestratorListAssessmentResultsProcedure:
			orchestratorListAssessmentResultsHandler.ServeHTTP(w, r)
		case OrchestratorCreateMetricProcedure:
			orchestratorCreateMetricHandler.ServeHTTP(w, r)
		case OrchestratorUpdateMetricProcedure:
			orchestratorUpdateMetricHandler.ServeHTTP(w, r)
		case OrchestratorGetMetricProcedure:
			orchestratorGetMetricHandler.ServeHTTP(w, r)
		case OrchestratorListMetricsProcedure:
			orchestratorListMetricsHandler.ServeHTTP(w, r)
		case OrchestratorRemoveMetricProcedure:
			orchestratorRemoveMetricHandler.ServeHTTP(w, r)
		case OrchestratorRegisterCloudServiceProcedure:
			orchestratorRegisterCloudServiceHandler.ServeHTTP(w, r)
		case OrchestratorUpdateCloudServiceProcedure:
			orchestratorUpdateCloudServiceHandler.ServeHTTP(w, r)
		case OrchestratorGetCloudServiceProcedure:
			orchestratorGetCloudServiceHandler.ServeHTTP(w, r)
		case OrchestratorListCloudServicesProcedure:
			orchestratorListCloudServicesHandler.ServeHTTP(w, r)
		case OrchestratorRemoveCloudServiceProcedure:
			orchestratorRemoveCloudServiceHandler.ServeHTTP(w, r)
		case OrchestratorGetCloudServiceStatisticsProcedure:
			orchestratorGetCloudServiceStatisticsHandler.ServeHTTP(w, r)
		case OrchestratorUpdateMetricConfigurationProcedure:
			orchestratorUpdateMetricConfigurationHandler.ServeHTTP(w, r)
		case OrchestratorGetMetricConfigurationProcedure:
			orchestratorGetMetricConfigurationHandler.ServeHTTP(w, r)
		case OrchestratorListMetricConfigurationsProcedure:
			orchestratorListMetricConfigurationsHandler.ServeHTTP(w, r)
		case OrchestratorUpdateMetricImplementationProcedure:
			orchestratorUpdateMetricImplementationHandler.ServeHTTP(w, r)
		case OrchestratorGetMetricImplementationProcedure:
			orchestratorGetMetricImplementationHandler.ServeHTTP(w, r)
		case OrchestratorSubscribeMetricChangeEventsProcedure:
			orchestratorSubscribeMetricChangeEventsHandler.ServeHTTP(w, r)
		case OrchestratorCreateCertificateProcedure:
			orchestratorCreateCertificateHandler.ServeHTTP(w, r)
		case OrchestratorGetCertificateProcedure:
			orchestratorGetCertificateHandler.ServeHTTP(w, r)
		case OrchestratorListCertificatesProcedure:
			orchestratorListCertificatesHandler.ServeHTTP(w, r)
		case OrchestratorListPublicCertificatesProcedure:
			orchestratorListPublicCertificatesHandler.ServeHTTP(w, r)
		case OrchestratorUpdateCertificateProcedure:
			orchestratorUpdateCertificateHandler.ServeHTTP(w, r)
		case OrchestratorRemoveCertificateProcedure:
			orchestratorRemoveCertificateHandler.ServeHTTP(w, r)
		case OrchestratorCreateCatalogProcedure:
			orchestratorCreateCatalogHandler.ServeHTTP(w, r)
		case OrchestratorListCatalogsProcedure:
			orchestratorListCatalogsHandler.ServeHTTP(w, r)
		case OrchestratorGetCatalogProcedure:
			orchestratorGetCatalogHandler.ServeHTTP(w, r)
		case OrchestratorRemoveCatalogProcedure:
			orchestratorRemoveCatalogHandler.ServeHTTP(w, r)
		case OrchestratorUpdateCatalogProcedure:
			orchestratorUpdateCatalogHandler.ServeHTTP(w, r)
		case OrchestratorGetCategoryProcedure:
			orchestratorGetCategoryHandler.ServeHTTP(w, r)
		case OrchestratorListControlsProcedure:
			orchestratorListControlsHandler.ServeHTTP(w, r)
		case OrchestratorGetControlProcedure:
			orchestratorGetControlHandler.ServeHTTP(w, r)
		case OrchestratorCreateTargetOfEvaluationProcedure:
			orchestratorCreateTargetOfEvaluationHandler.ServeHTTP(w, r)
		case OrchestratorGetTargetOfEvaluationProcedure:
			orchestratorGetTargetOfEvaluationHandler.ServeHTTP(w, r)
		case OrchestratorListTargetsOfEvaluationProcedure:
			orchestratorListTargetsOfEvaluationHandler.ServeHTTP(w, r)
		case OrchestratorUpdateTargetOfEvaluationProcedure:
			orchestratorUpdateTargetOfEvaluationHandler.ServeHTTP(w, r)
		case OrchestratorRemoveTargetOfEvaluationProcedure:
			orchestratorRemoveTargetOfEvaluationHandler.ServeHTTP(w, r)
		case OrchestratorGetRuntimeInfoProcedure:
			orchestratorGetRuntimeInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrchestratorHandler returns CodeUnimplemented from all methods.
type UnimplementedOrchestratorHandler struct{}

func (UnimplementedOrchestratorHandler) RegisterAssessmentTool(context.Context, *connect.Request[orchestrator.RegisterAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RegisterAssessmentTool is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListAssessmentTools(context.Context, *connect.Request[orchestrator.ListAssessmentToolsRequest]) (*connect.Response[orchestrator.ListAssessmentToolsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListAssessmentTools is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetAssessmentTool(context.Context, *connect.Request[orchestrator.GetAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetAssessmentTool is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateAssessmentTool(context.Context, *connect.Request[orchestrator.UpdateAssessmentToolRequest]) (*connect.Response[orchestrator.AssessmentTool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateAssessmentTool is not implemented"))
}

func (UnimplementedOrchestratorHandler) DeregisterAssessmentTool(context.Context, *connect.Request[orchestrator.DeregisterAssessmentToolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.DeregisterAssessmentTool is not implemented"))
}

func (UnimplementedOrchestratorHandler) StoreAssessmentResult(context.Context, *connect.Request[orchestrator.StoreAssessmentResultRequest]) (*connect.Response[orchestrator.StoreAssessmentResultResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.StoreAssessmentResult is not implemented"))
}

func (UnimplementedOrchestratorHandler) StoreAssessmentResults(context.Context, *connect.BidiStream[orchestrator.StoreAssessmentResultRequest, orchestrator.StoreAssessmentResultsResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.StoreAssessmentResults is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetAssessmentResult(context.Context, *connect.Request[orchestrator.GetAssessmentResultRequest]) (*connect.Response[assessment.AssessmentResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetAssessmentResult is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListAssessmentResults(context.Context, *connect.Request[orchestrator.ListAssessmentResultsRequest]) (*connect.Response[orchestrator.ListAssessmentResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListAssessmentResults is not implemented"))
}

func (UnimplementedOrchestratorHandler) CreateMetric(context.Context, *connect.Request[orchestrator.CreateMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.CreateMetric is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateMetric(context.Context, *connect.Request[orchestrator.UpdateMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateMetric is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetMetric(context.Context, *connect.Request[orchestrator.GetMetricRequest]) (*connect.Response[assessment.Metric], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetMetric is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListMetrics(context.Context, *connect.Request[orchestrator.ListMetricsRequest]) (*connect.Response[orchestrator.ListMetricsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListMetrics is not implemented"))
}

func (UnimplementedOrchestratorHandler) RemoveMetric(context.Context, *connect.Request[orchestrator.RemoveMetricRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RemoveMetric is not implemented"))
}

func (UnimplementedOrchestratorHandler) RegisterCloudService(context.Context, *connect.Request[orchestrator.RegisterCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RegisterCloudService is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateCloudService(context.Context, *connect.Request[orchestrator.UpdateCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateCloudService is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetCloudService(context.Context, *connect.Request[orchestrator.GetCloudServiceRequest]) (*connect.Response[orchestrator.CloudService], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetCloudService is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListCloudServices(context.Context, *connect.Request[orchestrator.ListCloudServicesRequest]) (*connect.Response[orchestrator.ListCloudServicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListCloudServices is not implemented"))
}

func (UnimplementedOrchestratorHandler) RemoveCloudService(context.Context, *connect.Request[orchestrator.RemoveCloudServiceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RemoveCloudService is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetCloudServiceStatistics(context.Context, *connect.Request[orchestrator.GetCloudServiceStatisticsRequest]) (*connect.Response[orchestrator.GetCloudServiceStatisticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetCloudServiceStatistics is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateMetricConfiguration(context.Context, *connect.Request[orchestrator.UpdateMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateMetricConfiguration is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetMetricConfiguration(context.Context, *connect.Request[orchestrator.GetMetricConfigurationRequest]) (*connect.Response[assessment.MetricConfiguration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetMetricConfiguration is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListMetricConfigurations(context.Context, *connect.Request[orchestrator.ListMetricConfigurationRequest]) (*connect.Response[orchestrator.ListMetricConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListMetricConfigurations is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateMetricImplementation(context.Context, *connect.Request[orchestrator.UpdateMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateMetricImplementation is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetMetricImplementation(context.Context, *connect.Request[orchestrator.GetMetricImplementationRequest]) (*connect.Response[assessment.MetricImplementation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetMetricImplementation is not implemented"))
}

func (UnimplementedOrchestratorHandler) SubscribeMetricChangeEvents(context.Context, *connect.Request[orchestrator.SubscribeMetricChangeEventRequest], *connect.ServerStream[orchestrator.MetricChangeEvent]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.SubscribeMetricChangeEvents is not implemented"))
}

func (UnimplementedOrchestratorHandler) CreateCertificate(context.Context, *connect.Request[orchestrator.CreateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.CreateCertificate is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetCertificate(context.Context, *connect.Request[orchestrator.GetCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetCertificate is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListCertificates(context.Context, *connect.Request[orchestrator.ListCertificatesRequest]) (*connect.Response[orchestrator.ListCertificatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListCertificates is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListPublicCertificates(context.Context, *connect.Request[orchestrator.ListPublicCertificatesRequest]) (*connect.Response[orchestrator.ListPublicCertificatesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListPublicCertificates is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateCertificate(context.Context, *connect.Request[orchestrator.UpdateCertificateRequest]) (*connect.Response[orchestrator.Certificate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateCertificate is not implemented"))
}

func (UnimplementedOrchestratorHandler) RemoveCertificate(context.Context, *connect.Request[orchestrator.RemoveCertificateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RemoveCertificate is not implemented"))
}

func (UnimplementedOrchestratorHandler) CreateCatalog(context.Context, *connect.Request[orchestrator.CreateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.CreateCatalog is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListCatalogs(context.Context, *connect.Request[orchestrator.ListCatalogsRequest]) (*connect.Response[orchestrator.ListCatalogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListCatalogs is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetCatalog(context.Context, *connect.Request[orchestrator.GetCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetCatalog is not implemented"))
}

func (UnimplementedOrchestratorHandler) RemoveCatalog(context.Context, *connect.Request[orchestrator.RemoveCatalogRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RemoveCatalog is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateCatalog(context.Context, *connect.Request[orchestrator.UpdateCatalogRequest]) (*connect.Response[orchestrator.Catalog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateCatalog is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetCategory(context.Context, *connect.Request[orchestrator.GetCategoryRequest]) (*connect.Response[orchestrator.Category], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetCategory is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListControls(context.Context, *connect.Request[orchestrator.ListControlsRequest]) (*connect.Response[orchestrator.ListControlsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListControls is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetControl(context.Context, *connect.Request[orchestrator.GetControlRequest]) (*connect.Response[orchestrator.Control], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetControl is not implemented"))
}

func (UnimplementedOrchestratorHandler) CreateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.CreateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.CreateTargetOfEvaluation is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetTargetOfEvaluation(context.Context, *connect.Request[orchestrator.GetTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetTargetOfEvaluation is not implemented"))
}

func (UnimplementedOrchestratorHandler) ListTargetsOfEvaluation(context.Context, *connect.Request[orchestrator.ListTargetsOfEvaluationRequest]) (*connect.Response[orchestrator.ListTargetsOfEvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.ListTargetsOfEvaluation is not implemented"))
}

func (UnimplementedOrchestratorHandler) UpdateTargetOfEvaluation(context.Context, *connect.Request[orchestrator.UpdateTargetOfEvaluationRequest]) (*connect.Response[orchestrator.TargetOfEvaluation], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.UpdateTargetOfEvaluation is not implemented"))
}

func (UnimplementedOrchestratorHandler) RemoveTargetOfEvaluation(context.Context, *connect.Request[orchestrator.RemoveTargetOfEvaluationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.RemoveTargetOfEvaluation is not implemented"))
}

func (UnimplementedOrchestratorHandler) GetRuntimeInfo(context.Context, *connect.Request[runtime.GetRuntimeInfoRequest]) (*connect.Response[runtime.Runtime], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.orchestrator.v1.Orchestrator.GetRuntimeInfo is not implemented"))
}
