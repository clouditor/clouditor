// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/orchestrator/orchestrator.proto

package orchestrator

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _orchestrator_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterAssessmentToolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAssessmentToolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAssessmentToolRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RegisterAssessmentToolRequestMultiError, or nil if none found.
func (m *RegisterAssessmentToolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAssessmentToolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTool() == nil {
		err := RegisterAssessmentToolRequestValidationError{
			field:  "Tool",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterAssessmentToolRequestValidationError{
					field:  "Tool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterAssessmentToolRequestValidationError{
					field:  "Tool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterAssessmentToolRequestValidationError{
				field:  "Tool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterAssessmentToolRequestMultiError(errors)
	}

	return nil
}

// RegisterAssessmentToolRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterAssessmentToolRequest.ValidateAll()
// if the designated constraints aren't met.
type RegisterAssessmentToolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAssessmentToolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAssessmentToolRequestMultiError) AllErrors() []error { return m }

// RegisterAssessmentToolRequestValidationError is the validation error
// returned by RegisterAssessmentToolRequest.Validate if the designated
// constraints aren't met.
type RegisterAssessmentToolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAssessmentToolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAssessmentToolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAssessmentToolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAssessmentToolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAssessmentToolRequestValidationError) ErrorName() string {
	return "RegisterAssessmentToolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAssessmentToolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAssessmentToolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAssessmentToolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAssessmentToolRequestValidationError{}

// Validate checks the field values on ListAssessmentToolsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentToolsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentToolsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssessmentToolsRequestMultiError, or nil if none found.
func (m *ListAssessmentToolsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentToolsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if m.Filter != nil {

		if all {
			switch v := interface{}(m.GetFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssessmentToolsRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssessmentToolsRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssessmentToolsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAssessmentToolsRequestMultiError(errors)
	}

	return nil
}

// ListAssessmentToolsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentToolsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAssessmentToolsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentToolsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentToolsRequestMultiError) AllErrors() []error { return m }

// ListAssessmentToolsRequestValidationError is the validation error returned
// by ListAssessmentToolsRequest.Validate if the designated constraints aren't met.
type ListAssessmentToolsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentToolsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentToolsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentToolsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentToolsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentToolsRequestValidationError) ErrorName() string {
	return "ListAssessmentToolsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentToolsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentToolsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentToolsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentToolsRequestValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetricIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := FilterValidationError{
				field:  fmt.Sprintf("MetricIds[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CloudServiceId != nil {

		if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
			err = FilterValidationError{
				field:  "CloudServiceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Compliant != nil {
		// no validation rules for Compliant
	}

	if m.MetricId != nil {

		if utf8.RuneCountInString(m.GetMetricId()) < 1 {
			err := FilterValidationError{
				field:  "MetricId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ToolId != nil {

		if utf8.RuneCountInString(m.GetToolId()) < 1 {
			err := FilterValidationError{
				field:  "ToolId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

func (m *Filter) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on ListAssessmentToolsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentToolsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentToolsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssessmentToolsResponseMultiError, or nil if none found.
func (m *ListAssessmentToolsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentToolsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssessmentToolsResponseValidationError{
						field:  fmt.Sprintf("Tools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssessmentToolsResponseValidationError{
						field:  fmt.Sprintf("Tools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssessmentToolsResponseValidationError{
					field:  fmt.Sprintf("Tools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAssessmentToolsResponseMultiError(errors)
	}

	return nil
}

// ListAssessmentToolsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentToolsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAssessmentToolsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentToolsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentToolsResponseMultiError) AllErrors() []error { return m }

// ListAssessmentToolsResponseValidationError is the validation error returned
// by ListAssessmentToolsResponse.Validate if the designated constraints
// aren't met.
type ListAssessmentToolsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentToolsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentToolsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentToolsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentToolsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentToolsResponseValidationError) ErrorName() string {
	return "ListAssessmentToolsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentToolsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentToolsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentToolsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentToolsResponseValidationError{}

// Validate checks the field values on GetAssessmentToolRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssessmentToolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssessmentToolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssessmentToolRequestMultiError, or nil if none found.
func (m *GetAssessmentToolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssessmentToolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToolId()) < 1 {
		err := GetAssessmentToolRequestValidationError{
			field:  "ToolId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAssessmentToolRequestMultiError(errors)
	}

	return nil
}

// GetAssessmentToolRequestMultiError is an error wrapping multiple validation
// errors returned by GetAssessmentToolRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAssessmentToolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssessmentToolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssessmentToolRequestMultiError) AllErrors() []error { return m }

// GetAssessmentToolRequestValidationError is the validation error returned by
// GetAssessmentToolRequest.Validate if the designated constraints aren't met.
type GetAssessmentToolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssessmentToolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssessmentToolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssessmentToolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssessmentToolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssessmentToolRequestValidationError) ErrorName() string {
	return "GetAssessmentToolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssessmentToolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssessmentToolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssessmentToolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssessmentToolRequestValidationError{}

// Validate checks the field values on UpdateAssessmentToolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssessmentToolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssessmentToolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssessmentToolRequestMultiError, or nil if none found.
func (m *UpdateAssessmentToolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssessmentToolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTool() == nil {
		err := UpdateAssessmentToolRequestValidationError{
			field:  "Tool",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssessmentToolRequestValidationError{
					field:  "Tool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssessmentToolRequestValidationError{
					field:  "Tool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssessmentToolRequestValidationError{
				field:  "Tool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAssessmentToolRequestMultiError(errors)
	}

	return nil
}

// UpdateAssessmentToolRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAssessmentToolRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAssessmentToolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssessmentToolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssessmentToolRequestMultiError) AllErrors() []error { return m }

// UpdateAssessmentToolRequestValidationError is the validation error returned
// by UpdateAssessmentToolRequest.Validate if the designated constraints
// aren't met.
type UpdateAssessmentToolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssessmentToolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssessmentToolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssessmentToolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssessmentToolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssessmentToolRequestValidationError) ErrorName() string {
	return "UpdateAssessmentToolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssessmentToolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssessmentToolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssessmentToolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssessmentToolRequestValidationError{}

// Validate checks the field values on DeregisterAssessmentToolRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeregisterAssessmentToolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeregisterAssessmentToolRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeregisterAssessmentToolRequestMultiError, or nil if none found.
func (m *DeregisterAssessmentToolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeregisterAssessmentToolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToolId()) < 1 {
		err := DeregisterAssessmentToolRequestValidationError{
			field:  "ToolId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeregisterAssessmentToolRequestMultiError(errors)
	}

	return nil
}

// DeregisterAssessmentToolRequestMultiError is an error wrapping multiple
// validation errors returned by DeregisterAssessmentToolRequest.ValidateAll()
// if the designated constraints aren't met.
type DeregisterAssessmentToolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeregisterAssessmentToolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeregisterAssessmentToolRequestMultiError) AllErrors() []error { return m }

// DeregisterAssessmentToolRequestValidationError is the validation error
// returned by DeregisterAssessmentToolRequest.Validate if the designated
// constraints aren't met.
type DeregisterAssessmentToolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeregisterAssessmentToolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeregisterAssessmentToolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeregisterAssessmentToolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeregisterAssessmentToolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeregisterAssessmentToolRequestValidationError) ErrorName() string {
	return "DeregisterAssessmentToolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeregisterAssessmentToolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeregisterAssessmentToolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeregisterAssessmentToolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeregisterAssessmentToolRequestValidationError{}

// Validate checks the field values on StoreAssessmentResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreAssessmentResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreAssessmentResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreAssessmentResultRequestMultiError, or nil if none found.
func (m *StoreAssessmentResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreAssessmentResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResult() == nil {
		err := StoreAssessmentResultRequestValidationError{
			field:  "Result",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreAssessmentResultRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreAssessmentResultRequestValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreAssessmentResultRequestValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StoreAssessmentResultRequestMultiError(errors)
	}

	return nil
}

// StoreAssessmentResultRequestMultiError is an error wrapping multiple
// validation errors returned by StoreAssessmentResultRequest.ValidateAll() if
// the designated constraints aren't met.
type StoreAssessmentResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreAssessmentResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreAssessmentResultRequestMultiError) AllErrors() []error { return m }

// StoreAssessmentResultRequestValidationError is the validation error returned
// by StoreAssessmentResultRequest.Validate if the designated constraints
// aren't met.
type StoreAssessmentResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreAssessmentResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreAssessmentResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreAssessmentResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreAssessmentResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreAssessmentResultRequestValidationError) ErrorName() string {
	return "StoreAssessmentResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StoreAssessmentResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreAssessmentResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreAssessmentResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreAssessmentResultRequestValidationError{}

// Validate checks the field values on StoreAssessmentResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreAssessmentResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreAssessmentResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StoreAssessmentResultResponseMultiError, or nil if none found.
func (m *StoreAssessmentResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreAssessmentResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StoreAssessmentResultResponseMultiError(errors)
	}

	return nil
}

// StoreAssessmentResultResponseMultiError is an error wrapping multiple
// validation errors returned by StoreAssessmentResultResponse.ValidateAll()
// if the designated constraints aren't met.
type StoreAssessmentResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreAssessmentResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreAssessmentResultResponseMultiError) AllErrors() []error { return m }

// StoreAssessmentResultResponseValidationError is the validation error
// returned by StoreAssessmentResultResponse.Validate if the designated
// constraints aren't met.
type StoreAssessmentResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreAssessmentResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreAssessmentResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreAssessmentResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreAssessmentResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreAssessmentResultResponseValidationError) ErrorName() string {
	return "StoreAssessmentResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StoreAssessmentResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreAssessmentResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreAssessmentResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreAssessmentResultResponseValidationError{}

// Validate checks the field values on StoreAssessmentResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreAssessmentResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreAssessmentResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StoreAssessmentResultsResponseMultiError, or nil if none found.
func (m *StoreAssessmentResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreAssessmentResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for StatusMessage

	if len(errors) > 0 {
		return StoreAssessmentResultsResponseMultiError(errors)
	}

	return nil
}

// StoreAssessmentResultsResponseMultiError is an error wrapping multiple
// validation errors returned by StoreAssessmentResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type StoreAssessmentResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreAssessmentResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreAssessmentResultsResponseMultiError) AllErrors() []error { return m }

// StoreAssessmentResultsResponseValidationError is the validation error
// returned by StoreAssessmentResultsResponse.Validate if the designated
// constraints aren't met.
type StoreAssessmentResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreAssessmentResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreAssessmentResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreAssessmentResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreAssessmentResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreAssessmentResultsResponseValidationError) ErrorName() string {
	return "StoreAssessmentResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StoreAssessmentResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreAssessmentResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreAssessmentResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreAssessmentResultsResponseValidationError{}

// Validate checks the field values on CreateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetricRequestMultiError, or nil if none found.
func (m *CreateMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMetric() == nil {
		err := CreateMetricRequestValidationError{
			field:  "Metric",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetricRequestMultiError(errors)
	}

	return nil
}

// CreateMetricRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetricRequestMultiError) AllErrors() []error { return m }

// CreateMetricRequestValidationError is the validation error returned by
// CreateMetricRequest.Validate if the designated constraints aren't met.
type CreateMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricRequestValidationError) ErrorName() string {
	return "CreateMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricRequestValidationError{}

// Validate checks the field values on UpdateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMetricRequestMultiError, or nil if none found.
func (m *UpdateMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMetric() == nil {
		err := UpdateMetricRequestValidationError{
			field:  "Metric",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetricRequestMultiError(errors)
	}

	return nil
}

// UpdateMetricRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetricRequestMultiError) AllErrors() []error { return m }

// UpdateMetricRequestValidationError is the validation error returned by
// UpdateMetricRequest.Validate if the designated constraints aren't met.
type UpdateMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetricRequestValidationError) ErrorName() string {
	return "UpdateMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetricRequestValidationError{}

// Validate checks the field values on GetMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricRequestMultiError, or nil if none found.
func (m *GetMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := GetMetricRequestValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetricRequestMultiError(errors)
	}

	return nil
}

// GetMetricRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetricRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricRequestMultiError) AllErrors() []error { return m }

// GetMetricRequestValidationError is the validation error returned by
// GetMetricRequest.Validate if the designated constraints aren't met.
type GetMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricRequestValidationError) ErrorName() string { return "GetMetricRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricRequestValidationError{}

// Validate checks the field values on ListMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetricsRequestMultiError, or nil if none found.
func (m *ListMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListMetricsRequestMultiError(errors)
	}

	return nil
}

// ListMetricsRequestMultiError is an error wrapping multiple validation errors
// returned by ListMetricsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetricsRequestMultiError) AllErrors() []error { return m }

// ListMetricsRequestValidationError is the validation error returned by
// ListMetricsRequest.Validate if the designated constraints aren't met.
type ListMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricsRequestValidationError) ErrorName() string {
	return "ListMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricsRequestValidationError{}

// Validate checks the field values on ListMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMetricsResponseMultiError, or nil if none found.
func (m *ListMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMetricsResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMetricsResponseMultiError(errors)
	}

	return nil
}

// ListMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetricsResponseMultiError) AllErrors() []error { return m }

// ListMetricsResponseValidationError is the validation error returned by
// ListMetricsResponse.Validate if the designated constraints aren't met.
type ListMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricsResponseValidationError) ErrorName() string {
	return "ListMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricsResponseValidationError{}

// Validate checks the field values on GetCloudServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCloudServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCloudServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCloudServiceRequestMultiError, or nil if none found.
func (m *GetCloudServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCloudServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = GetCloudServiceRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCloudServiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetCloudServiceRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCloudServiceRequestMultiError is an error wrapping multiple validation
// errors returned by GetCloudServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCloudServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCloudServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCloudServiceRequestMultiError) AllErrors() []error { return m }

// GetCloudServiceRequestValidationError is the validation error returned by
// GetCloudServiceRequest.Validate if the designated constraints aren't met.
type GetCloudServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCloudServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCloudServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCloudServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCloudServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCloudServiceRequestValidationError) ErrorName() string {
	return "GetCloudServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCloudServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCloudServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCloudServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCloudServiceRequestValidationError{}

// Validate checks the field values on RegisterCloudServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCloudServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCloudServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCloudServiceRequestMultiError, or nil if none found.
func (m *RegisterCloudServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCloudServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCloudService() == nil {
		err := RegisterCloudServiceRequestValidationError{
			field:  "CloudService",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCloudService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterCloudServiceRequestValidationError{
					field:  "CloudService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterCloudServiceRequestValidationError{
					field:  "CloudService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterCloudServiceRequestValidationError{
				field:  "CloudService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterCloudServiceRequestMultiError(errors)
	}

	return nil
}

// RegisterCloudServiceRequestMultiError is an error wrapping multiple
// validation errors returned by RegisterCloudServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type RegisterCloudServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCloudServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCloudServiceRequestMultiError) AllErrors() []error { return m }

// RegisterCloudServiceRequestValidationError is the validation error returned
// by RegisterCloudServiceRequest.Validate if the designated constraints
// aren't met.
type RegisterCloudServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCloudServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCloudServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCloudServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCloudServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCloudServiceRequestValidationError) ErrorName() string {
	return "RegisterCloudServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCloudServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCloudServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCloudServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCloudServiceRequestValidationError{}

// Validate checks the field values on UpdateCloudServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCloudServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCloudServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCloudServiceRequestMultiError, or nil if none found.
func (m *UpdateCloudServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCloudServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCloudService() == nil {
		err := UpdateCloudServiceRequestValidationError{
			field:  "CloudService",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCloudService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCloudServiceRequestValidationError{
					field:  "CloudService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCloudServiceRequestValidationError{
					field:  "CloudService",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudServiceRequestValidationError{
				field:  "CloudService",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCloudServiceRequestMultiError(errors)
	}

	return nil
}

// UpdateCloudServiceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCloudServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateCloudServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCloudServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCloudServiceRequestMultiError) AllErrors() []error { return m }

// UpdateCloudServiceRequestValidationError is the validation error returned by
// UpdateCloudServiceRequest.Validate if the designated constraints aren't met.
type UpdateCloudServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudServiceRequestValidationError) ErrorName() string {
	return "UpdateCloudServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudServiceRequestValidationError{}

// Validate checks the field values on RemoveCloudServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCloudServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCloudServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCloudServiceRequestMultiError, or nil if none found.
func (m *RemoveCloudServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCloudServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = RemoveCloudServiceRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveCloudServiceRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveCloudServiceRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveCloudServiceRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveCloudServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type RemoveCloudServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCloudServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCloudServiceRequestMultiError) AllErrors() []error { return m }

// RemoveCloudServiceRequestValidationError is the validation error returned by
// RemoveCloudServiceRequest.Validate if the designated constraints aren't met.
type RemoveCloudServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCloudServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCloudServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCloudServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCloudServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCloudServiceRequestValidationError) ErrorName() string {
	return "RemoveCloudServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCloudServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCloudServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCloudServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCloudServiceRequestValidationError{}

// Validate checks the field values on ListCloudServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudServicesRequestMultiError, or nil if none found.
func (m *ListCloudServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListCloudServicesRequestMultiError(errors)
	}

	return nil
}

// ListCloudServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCloudServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCloudServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudServicesRequestMultiError) AllErrors() []error { return m }

// ListCloudServicesRequestValidationError is the validation error returned by
// ListCloudServicesRequest.Validate if the designated constraints aren't met.
type ListCloudServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudServicesRequestValidationError) ErrorName() string {
	return "ListCloudServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudServicesRequestValidationError{}

// Validate checks the field values on ListCloudServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCloudServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCloudServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCloudServicesResponseMultiError, or nil if none found.
func (m *ListCloudServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCloudServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCloudServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCloudServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCloudServicesResponseMultiError(errors)
	}

	return nil
}

// ListCloudServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCloudServicesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListCloudServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCloudServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCloudServicesResponseMultiError) AllErrors() []error { return m }

// ListCloudServicesResponseValidationError is the validation error returned by
// ListCloudServicesResponse.Validate if the designated constraints aren't met.
type ListCloudServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudServicesResponseValidationError) ErrorName() string {
	return "ListCloudServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudServicesResponseValidationError{}

// Validate checks the field values on UpdateMetricConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateMetricConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetricConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateMetricConfigurationRequestMultiError, or nil if none found.
func (m *UpdateMetricConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetricConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = UpdateMetricConfigurationRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := UpdateMetricConfigurationRequestValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfiguration() == nil {
		err := UpdateMetricConfigurationRequestValidationError{
			field:  "Configuration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetricConfigurationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetricConfigurationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetricConfigurationRequestValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetricConfigurationRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateMetricConfigurationRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateMetricConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateMetricConfigurationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetricConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetricConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetricConfigurationRequestMultiError) AllErrors() []error { return m }

// UpdateMetricConfigurationRequestValidationError is the validation error
// returned by UpdateMetricConfigurationRequest.Validate if the designated
// constraints aren't met.
type UpdateMetricConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetricConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetricConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetricConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetricConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetricConfigurationRequestValidationError) ErrorName() string {
	return "UpdateMetricConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetricConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetricConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetricConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetricConfigurationRequestValidationError{}

// Validate checks the field values on GetMetricConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMetricConfigurationRequestMultiError, or nil if none found.
func (m *GetMetricConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = GetMetricConfigurationRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := GetMetricConfigurationRequestValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetricConfigurationRequestMultiError(errors)
	}

	return nil
}

func (m *GetMetricConfigurationRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetMetricConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by GetMetricConfigurationRequest.ValidateAll()
// if the designated constraints aren't met.
type GetMetricConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricConfigurationRequestMultiError) AllErrors() []error { return m }

// GetMetricConfigurationRequestValidationError is the validation error
// returned by GetMetricConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetMetricConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricConfigurationRequestValidationError) ErrorName() string {
	return "GetMetricConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricConfigurationRequestValidationError{}

// Validate checks the field values on ListMetricConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetricConfigurationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetricConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMetricConfigurationRequestMultiError, or nil if none found.
func (m *ListMetricConfigurationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetricConfigurationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = ListMetricConfigurationRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMetricConfigurationRequestMultiError(errors)
	}

	return nil
}

func (m *ListMetricConfigurationRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListMetricConfigurationRequestMultiError is an error wrapping multiple
// validation errors returned by ListMetricConfigurationRequest.ValidateAll()
// if the designated constraints aren't met.
type ListMetricConfigurationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetricConfigurationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetricConfigurationRequestMultiError) AllErrors() []error { return m }

// ListMetricConfigurationRequestValidationError is the validation error
// returned by ListMetricConfigurationRequest.Validate if the designated
// constraints aren't met.
type ListMetricConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricConfigurationRequestValidationError) ErrorName() string {
	return "ListMetricConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricConfigurationRequestValidationError{}

// Validate checks the field values on ListMetricConfigurationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMetricConfigurationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMetricConfigurationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMetricConfigurationResponseMultiError, or nil if none found.
func (m *ListMetricConfigurationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMetricConfigurationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetConfigurations()))
		i := 0
		for key := range m.GetConfigurations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetConfigurations()[key]
			_ = val

			// no validation rules for Configurations[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListMetricConfigurationResponseValidationError{
							field:  fmt.Sprintf("Configurations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListMetricConfigurationResponseValidationError{
							field:  fmt.Sprintf("Configurations[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListMetricConfigurationResponseValidationError{
						field:  fmt.Sprintf("Configurations[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListMetricConfigurationResponseMultiError(errors)
	}

	return nil
}

// ListMetricConfigurationResponseMultiError is an error wrapping multiple
// validation errors returned by ListMetricConfigurationResponse.ValidateAll()
// if the designated constraints aren't met.
type ListMetricConfigurationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetricConfigurationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetricConfigurationResponseMultiError) AllErrors() []error { return m }

// ListMetricConfigurationResponseValidationError is the validation error
// returned by ListMetricConfigurationResponse.Validate if the designated
// constraints aren't met.
type ListMetricConfigurationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetricConfigurationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetricConfigurationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetricConfigurationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetricConfigurationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetricConfigurationResponseValidationError) ErrorName() string {
	return "ListMetricConfigurationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMetricConfigurationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMetricConfigurationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetricConfigurationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetricConfigurationResponseValidationError{}

// Validate checks the field values on UpdateMetricImplementationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateMetricImplementationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMetricImplementationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateMetricImplementationRequestMultiError, or nil if none found.
func (m *UpdateMetricImplementationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMetricImplementationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetImplementation() == nil {
		err := UpdateMetricImplementationRequestValidationError{
			field:  "Implementation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetImplementation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMetricImplementationRequestValidationError{
					field:  "Implementation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMetricImplementationRequestValidationError{
					field:  "Implementation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImplementation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMetricImplementationRequestValidationError{
				field:  "Implementation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMetricImplementationRequestMultiError(errors)
	}

	return nil
}

// UpdateMetricImplementationRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateMetricImplementationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMetricImplementationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMetricImplementationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMetricImplementationRequestMultiError) AllErrors() []error { return m }

// UpdateMetricImplementationRequestValidationError is the validation error
// returned by UpdateMetricImplementationRequest.Validate if the designated
// constraints aren't met.
type UpdateMetricImplementationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMetricImplementationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMetricImplementationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMetricImplementationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMetricImplementationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMetricImplementationRequestValidationError) ErrorName() string {
	return "UpdateMetricImplementationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMetricImplementationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMetricImplementationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMetricImplementationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMetricImplementationRequestValidationError{}

// Validate checks the field values on GetMetricImplementationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricImplementationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricImplementationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetMetricImplementationRequestMultiError, or nil if none found.
func (m *GetMetricImplementationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricImplementationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := GetMetricImplementationRequestValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetricImplementationRequestMultiError(errors)
	}

	return nil
}

// GetMetricImplementationRequestMultiError is an error wrapping multiple
// validation errors returned by GetMetricImplementationRequest.ValidateAll()
// if the designated constraints aren't met.
type GetMetricImplementationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricImplementationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricImplementationRequestMultiError) AllErrors() []error { return m }

// GetMetricImplementationRequestValidationError is the validation error
// returned by GetMetricImplementationRequest.Validate if the designated
// constraints aren't met.
type GetMetricImplementationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricImplementationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricImplementationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricImplementationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricImplementationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricImplementationRequestValidationError) ErrorName() string {
	return "GetMetricImplementationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricImplementationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricImplementationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricImplementationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricImplementationRequestValidationError{}

// Validate checks the field values on SubscribeMetricChangeEventRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SubscribeMetricChangeEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeMetricChangeEventRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SubscribeMetricChangeEventRequestMultiError, or nil if none found.
func (m *SubscribeMetricChangeEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeMetricChangeEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeMetricChangeEventRequestMultiError(errors)
	}

	return nil
}

// SubscribeMetricChangeEventRequestMultiError is an error wrapping multiple
// validation errors returned by
// SubscribeMetricChangeEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SubscribeMetricChangeEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeMetricChangeEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeMetricChangeEventRequestMultiError) AllErrors() []error { return m }

// SubscribeMetricChangeEventRequestValidationError is the validation error
// returned by SubscribeMetricChangeEventRequest.Validate if the designated
// constraints aren't met.
type SubscribeMetricChangeEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeMetricChangeEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeMetricChangeEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeMetricChangeEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeMetricChangeEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeMetricChangeEventRequestValidationError) ErrorName() string {
	return "SubscribeMetricChangeEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeMetricChangeEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeMetricChangeEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeMetricChangeEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeMetricChangeEventRequestValidationError{}

// Validate checks the field values on MetricChangeEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricChangeEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricChangeEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricChangeEventMultiError, or nil if none found.
func (m *MetricChangeEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricChangeEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := MetricChangeEvent_Type_name[int32(m.GetType())]; !ok {
		err := MetricChangeEventValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := MetricChangeEventValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = MetricChangeEventValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MetricChangeEventMultiError(errors)
	}

	return nil
}

func (m *MetricChangeEvent) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MetricChangeEventMultiError is an error wrapping multiple validation errors
// returned by MetricChangeEvent.ValidateAll() if the designated constraints
// aren't met.
type MetricChangeEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricChangeEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricChangeEventMultiError) AllErrors() []error { return m }

// MetricChangeEventValidationError is the validation error returned by
// MetricChangeEvent.Validate if the designated constraints aren't met.
type MetricChangeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricChangeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricChangeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricChangeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricChangeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricChangeEventValidationError) ErrorName() string {
	return "MetricChangeEventValidationError"
}

// Error satisfies the builtin error interface
func (e MetricChangeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricChangeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricChangeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricChangeEventValidationError{}

// Validate checks the field values on AssessmentTool with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssessmentTool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessmentTool with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssessmentToolMultiError,
// or nil if none found.
func (m *AssessmentTool) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessmentTool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = AssessmentToolValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AssessmentToolValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetAvailableMetrics() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := AssessmentToolValidationError{
				field:  fmt.Sprintf("AvailableMetrics[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return AssessmentToolMultiError(errors)
	}

	return nil
}

func (m *AssessmentTool) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssessmentToolMultiError is an error wrapping multiple validation errors
// returned by AssessmentTool.ValidateAll() if the designated constraints
// aren't met.
type AssessmentToolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessmentToolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessmentToolMultiError) AllErrors() []error { return m }

// AssessmentToolValidationError is the validation error returned by
// AssessmentTool.Validate if the designated constraints aren't met.
type AssessmentToolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessmentToolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessmentToolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessmentToolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessmentToolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessmentToolValidationError) ErrorName() string { return "AssessmentToolValidationError" }

// Error satisfies the builtin error interface
func (e AssessmentToolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessmentTool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessmentToolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessmentToolValidationError{}

// Validate checks the field values on CloudService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloudService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloudServiceMultiError, or
// nil if none found.
func (m *CloudService) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

		if err := m._validateUuid(m.GetId()); err != nil {
			err = CloudServiceValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CloudServiceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetCatalogsInScope() {
		_, _ = idx, item

		if item == nil {
			err := CloudServiceValidationError{
				field:  fmt.Sprintf("CatalogsInScope[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudServiceValidationError{
						field:  fmt.Sprintf("CatalogsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudServiceValidationError{
						field:  fmt.Sprintf("CatalogsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudServiceValidationError{
					field:  fmt.Sprintf("CatalogsInScope[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetConfiguredMetrics() {
		_, _ = idx, item

		if item == nil {
			err := CloudServiceValidationError{
				field:  fmt.Sprintf("ConfiguredMetrics[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudServiceValidationError{
						field:  fmt.Sprintf("ConfiguredMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudServiceValidationError{
						field:  fmt.Sprintf("ConfiguredMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudServiceValidationError{
					field:  fmt.Sprintf("ConfiguredMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudServiceMultiError(errors)
	}

	return nil
}

func (m *CloudService) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CloudServiceMultiError is an error wrapping multiple validation errors
// returned by CloudService.ValidateAll() if the designated constraints aren't met.
type CloudServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudServiceMultiError) AllErrors() []error { return m }

// CloudServiceValidationError is the validation error returned by
// CloudService.Validate if the designated constraints aren't met.
type CloudServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudServiceValidationError) ErrorName() string { return "CloudServiceValidationError" }

// Error satisfies the builtin error interface
func (e CloudServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudServiceValidationError{}

// Validate checks the field values on Catalog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Catalog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Catalog with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CatalogMultiError, or nil if none found.
func (m *Catalog) ValidateAll() error {
	return m.validate(true)
}

func (m *Catalog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CatalogValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CatalogValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if item == nil {
			err := CatalogValidationError{
				field:  fmt.Sprintf("Categories[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AllInScope

	if len(m.GetAssuranceLevels()) < 3 {
		err := CatalogValidationError{
			field:  "AssuranceLevels",
			reason: "value must contain at least 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAssuranceLevels() {
		_, _ = idx, item

		if !_Catalog_AssuranceLevels_Pattern.MatchString(item) {
			err := CatalogValidationError{
				field:  fmt.Sprintf("AssuranceLevels[%v]", idx),
				reason: "value does not match regex pattern \"^(|basic|substantial|high|low|medium)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CatalogMultiError(errors)
	}

	return nil
}

// CatalogMultiError is an error wrapping multiple validation errors returned
// by Catalog.ValidateAll() if the designated constraints aren't met.
type CatalogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogMultiError) AllErrors() []error { return m }

// CatalogValidationError is the validation error returned by Catalog.Validate
// if the designated constraints aren't met.
type CatalogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogValidationError) ErrorName() string { return "CatalogValidationError" }

// Error satisfies the builtin error interface
func (e CatalogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogValidationError{}

var _Catalog_AssuranceLevels_Pattern = regexp.MustCompile("^(|basic|substantial|high|low|medium)$")

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CategoryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := CategoryValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetControls() {
		_, _ = idx, item

		if item == nil {
			err := CategoryValidationError{
				field:  fmt.Sprintf("Controls[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryValidationError{
					field:  fmt.Sprintf("Controls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}

	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on Control with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Control) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Control with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ControlMultiError, or nil if none found.
func (m *Control) ValidateAll() error {
	return m.validate(true)
}

func (m *Control) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ControlValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCategoryName()) < 1 {
		err := ControlValidationError{
			field:  "CategoryName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCategoryCatalogId()) < 1 {
		err := ControlValidationError{
			field:  "CategoryCatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ControlValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetControls() {
		_, _ = idx, item

		if item == nil {
			err := ControlValidationError{
				field:  fmt.Sprintf("Controls[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlValidationError{
					field:  fmt.Sprintf("Controls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if item == nil {
			err := ControlValidationError{
				field:  fmt.Sprintf("Metrics[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ControlValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ControlValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ControlValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ParentControlId != nil {

		if utf8.RuneCountInString(m.GetParentControlId()) < 1 {
			err := ControlValidationError{
				field:  "ParentControlId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ParentControlCategoryName != nil {

		if utf8.RuneCountInString(m.GetParentControlCategoryName()) < 1 {
			err := ControlValidationError{
				field:  "ParentControlCategoryName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ParentControlCategoryCatalogId != nil {

		if utf8.RuneCountInString(m.GetParentControlCategoryCatalogId()) < 1 {
			err := ControlValidationError{
				field:  "ParentControlCategoryCatalogId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AssuranceLevel != nil {

		if !_Control_AssuranceLevel_Pattern.MatchString(m.GetAssuranceLevel()) {
			err := ControlValidationError{
				field:  "AssuranceLevel",
				reason: "value does not match regex pattern \"^(|basic|substantial|high|low|medium)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ControlMultiError(errors)
	}

	return nil
}

// ControlMultiError is an error wrapping multiple validation errors returned
// by Control.ValidateAll() if the designated constraints aren't met.
type ControlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlMultiError) AllErrors() []error { return m }

// ControlValidationError is the validation error returned by Control.Validate
// if the designated constraints aren't met.
type ControlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlValidationError) ErrorName() string { return "ControlValidationError" }

// Error satisfies the builtin error interface
func (e ControlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlValidationError{}

var _Control_AssuranceLevel_Pattern = regexp.MustCompile("^(|basic|substantial|high|low|medium)$")

// Validate checks the field values on TargetOfEvaluation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOfEvaluation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOfEvaluation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TargetOfEvaluationMultiError, or nil if none found.
func (m *TargetOfEvaluation) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOfEvaluation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = TargetOfEvaluationValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := TargetOfEvaluationValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetControlsInScope() {
		_, _ = idx, item

		if item == nil {
			err := TargetOfEvaluationValidationError{
				field:  fmt.Sprintf("ControlsInScope[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TargetOfEvaluationValidationError{
						field:  fmt.Sprintf("ControlsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TargetOfEvaluationValidationError{
						field:  fmt.Sprintf("ControlsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TargetOfEvaluationValidationError{
					field:  fmt.Sprintf("ControlsInScope[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.AssuranceLevel != nil {

		if !_TargetOfEvaluation_AssuranceLevel_Pattern.MatchString(m.GetAssuranceLevel()) {
			err := TargetOfEvaluationValidationError{
				field:  "AssuranceLevel",
				reason: "value does not match regex pattern \"^(|basic|substantial|high|low|medium)$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return TargetOfEvaluationMultiError(errors)
	}

	return nil
}

func (m *TargetOfEvaluation) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TargetOfEvaluationMultiError is an error wrapping multiple validation errors
// returned by TargetOfEvaluation.ValidateAll() if the designated constraints
// aren't met.
type TargetOfEvaluationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOfEvaluationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOfEvaluationMultiError) AllErrors() []error { return m }

// TargetOfEvaluationValidationError is the validation error returned by
// TargetOfEvaluation.Validate if the designated constraints aren't met.
type TargetOfEvaluationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOfEvaluationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOfEvaluationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOfEvaluationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOfEvaluationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOfEvaluationValidationError) ErrorName() string {
	return "TargetOfEvaluationValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOfEvaluationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOfEvaluation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOfEvaluationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOfEvaluationValidationError{}

var _TargetOfEvaluation_AssuranceLevel_Pattern = regexp.MustCompile("^(|basic|substantial|high|low|medium)$")

// Validate checks the field values on GetAssessmentResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAssessmentResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssessmentResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssessmentResultRequestMultiError, or nil if none found.
func (m *GetAssessmentResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssessmentResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetAssessmentResultRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAssessmentResultRequestMultiError(errors)
	}

	return nil
}

func (m *GetAssessmentResultRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetAssessmentResultRequestMultiError is an error wrapping multiple
// validation errors returned by GetAssessmentResultRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAssessmentResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssessmentResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssessmentResultRequestMultiError) AllErrors() []error { return m }

// GetAssessmentResultRequestValidationError is the validation error returned
// by GetAssessmentResultRequest.Validate if the designated constraints aren't met.
type GetAssessmentResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssessmentResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssessmentResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssessmentResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssessmentResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssessmentResultRequestValidationError) ErrorName() string {
	return "GetAssessmentResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAssessmentResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssessmentResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssessmentResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssessmentResultRequestValidationError{}

// Validate checks the field values on ListAssessmentResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssessmentResultsRequestMultiError, or nil if none found.
func (m *ListAssessmentResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if m.Filter != nil {

		if all {
			switch v := interface{}(m.GetFilter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssessmentResultsRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssessmentResultsRequestValidationError{
						field:  "Filter",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssessmentResultsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LatestByResourceId != nil {
		// no validation rules for LatestByResourceId
	}

	if len(errors) > 0 {
		return ListAssessmentResultsRequestMultiError(errors)
	}

	return nil
}

// ListAssessmentResultsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentResultsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAssessmentResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentResultsRequestMultiError) AllErrors() []error { return m }

// ListAssessmentResultsRequestValidationError is the validation error returned
// by ListAssessmentResultsRequest.Validate if the designated constraints
// aren't met.
type ListAssessmentResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentResultsRequestValidationError) ErrorName() string {
	return "ListAssessmentResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentResultsRequestValidationError{}

// Validate checks the field values on ListAssessmentResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAssessmentResultsResponseMultiError, or nil if none found.
func (m *ListAssessmentResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssessmentResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssessmentResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssessmentResultsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAssessmentResultsResponseMultiError(errors)
	}

	return nil
}

// ListAssessmentResultsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAssessmentResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentResultsResponseMultiError) AllErrors() []error { return m }

// ListAssessmentResultsResponseValidationError is the validation error
// returned by ListAssessmentResultsResponse.Validate if the designated
// constraints aren't met.
type ListAssessmentResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentResultsResponseValidationError) ErrorName() string {
	return "ListAssessmentResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentResultsResponseValidationError{}

// Validate checks the field values on ListControlsInScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControlsInScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControlsInScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControlsInScopeRequestMultiError, or nil if none found.
func (m *ListControlsInScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControlsInScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = ListControlsInScopeRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := ListControlsInScopeRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListControlsInScopeRequestMultiError(errors)
	}

	return nil
}

func (m *ListControlsInScopeRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListControlsInScopeRequestMultiError is an error wrapping multiple
// validation errors returned by ListControlsInScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type ListControlsInScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControlsInScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControlsInScopeRequestMultiError) AllErrors() []error { return m }

// ListControlsInScopeRequestValidationError is the validation error returned
// by ListControlsInScopeRequest.Validate if the designated constraints aren't met.
type ListControlsInScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControlsInScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControlsInScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControlsInScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControlsInScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControlsInScopeRequestValidationError) ErrorName() string {
	return "ListControlsInScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListControlsInScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControlsInScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControlsInScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControlsInScopeRequestValidationError{}

// Validate checks the field values on ListControlsInScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControlsInScopeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControlsInScopeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControlsInScopeResponseMultiError, or nil if none found.
func (m *ListControlsInScopeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControlsInScopeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetControlsInScope() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListControlsInScopeResponseValidationError{
						field:  fmt.Sprintf("ControlsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListControlsInScopeResponseValidationError{
						field:  fmt.Sprintf("ControlsInScope[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListControlsInScopeResponseValidationError{
					field:  fmt.Sprintf("ControlsInScope[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListControlsInScopeResponseMultiError(errors)
	}

	return nil
}

// ListControlsInScopeResponseMultiError is an error wrapping multiple
// validation errors returned by ListControlsInScopeResponse.ValidateAll() if
// the designated constraints aren't met.
type ListControlsInScopeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControlsInScopeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControlsInScopeResponseMultiError) AllErrors() []error { return m }

// ListControlsInScopeResponseValidationError is the validation error returned
// by ListControlsInScopeResponse.Validate if the designated constraints
// aren't met.
type ListControlsInScopeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControlsInScopeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControlsInScopeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControlsInScopeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControlsInScopeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControlsInScopeResponseValidationError) ErrorName() string {
	return "ListControlsInScopeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListControlsInScopeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControlsInScopeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControlsInScopeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControlsInScopeResponseValidationError{}

// Validate checks the field values on UpdateControlInScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateControlInScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateControlInScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateControlInScopeRequestMultiError, or nil if none found.
func (m *UpdateControlInScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateControlInScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetScope() == nil {
		err := UpdateControlInScopeRequestValidationError{
			field:  "Scope",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateControlInScopeRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateControlInScopeRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateControlInScopeRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateControlInScopeRequestMultiError(errors)
	}

	return nil
}

// UpdateControlInScopeRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateControlInScopeRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateControlInScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateControlInScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateControlInScopeRequestMultiError) AllErrors() []error { return m }

// UpdateControlInScopeRequestValidationError is the validation error returned
// by UpdateControlInScopeRequest.Validate if the designated constraints
// aren't met.
type UpdateControlInScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateControlInScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateControlInScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateControlInScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateControlInScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateControlInScopeRequestValidationError) ErrorName() string {
	return "UpdateControlInScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateControlInScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateControlInScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateControlInScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateControlInScopeRequestValidationError{}

// Validate checks the field values on AddControlToScopeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddControlToScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddControlToScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddControlToScopeRequestMultiError, or nil if none found.
func (m *AddControlToScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddControlToScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetScope() == nil {
		err := AddControlToScopeRequestValidationError{
			field:  "Scope",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetScope()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddControlToScopeRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddControlToScopeRequestValidationError{
					field:  "Scope",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScope()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddControlToScopeRequestValidationError{
				field:  "Scope",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddControlToScopeRequestMultiError(errors)
	}

	return nil
}

// AddControlToScopeRequestMultiError is an error wrapping multiple validation
// errors returned by AddControlToScopeRequest.ValidateAll() if the designated
// constraints aren't met.
type AddControlToScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddControlToScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddControlToScopeRequestMultiError) AllErrors() []error { return m }

// AddControlToScopeRequestValidationError is the validation error returned by
// AddControlToScopeRequest.Validate if the designated constraints aren't met.
type AddControlToScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddControlToScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddControlToScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddControlToScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddControlToScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddControlToScopeRequestValidationError) ErrorName() string {
	return "AddControlToScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddControlToScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddControlToScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddControlToScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddControlToScopeRequestValidationError{}

// Validate checks the field values on RemoveControlFromScopeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveControlFromScopeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveControlFromScopeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveControlFromScopeRequestMultiError, or nil if none found.
func (m *RemoveControlFromScopeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveControlFromScopeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCloudServiceId()) < 1 {
		err := RemoveControlFromScopeRequestValidationError{
			field:  "CloudServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := RemoveControlFromScopeRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlId()) < 1 {
		err := RemoveControlFromScopeRequestValidationError{
			field:  "ControlId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlCategoryName()) < 1 {
		err := RemoveControlFromScopeRequestValidationError{
			field:  "ControlCategoryName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveControlFromScopeRequestMultiError(errors)
	}

	return nil
}

// RemoveControlFromScopeRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveControlFromScopeRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveControlFromScopeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveControlFromScopeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveControlFromScopeRequestMultiError) AllErrors() []error { return m }

// RemoveControlFromScopeRequestValidationError is the validation error
// returned by RemoveControlFromScopeRequest.Validate if the designated
// constraints aren't met.
type RemoveControlFromScopeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveControlFromScopeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveControlFromScopeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveControlFromScopeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveControlFromScopeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveControlFromScopeRequestValidationError) ErrorName() string {
	return "RemoveControlFromScopeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveControlFromScopeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveControlFromScopeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveControlFromScopeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveControlFromScopeRequestValidationError{}

// Validate checks the field values on ControlInScope with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ControlInScope) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControlInScope with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ControlInScopeMultiError,
// or nil if none found.
func (m *ControlInScope) ValidateAll() error {
	return m.validate(true)
}

func (m *ControlInScope) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTargetOfEvaluationCloudServiceId()) < 1 {
		err := ControlInScopeValidationError{
			field:  "TargetOfEvaluationCloudServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetOfEvaluationCatalogId()) < 1 {
		err := ControlInScopeValidationError{
			field:  "TargetOfEvaluationCatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlId()) < 1 {
		err := ControlInScopeValidationError{
			field:  "ControlId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlCategoryName()) < 1 {
		err := ControlInScopeValidationError{
			field:  "ControlCategoryName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlCategoryCatalogId()) < 1 {
		err := ControlInScopeValidationError{
			field:  "ControlCategoryCatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MonitoringStatus

	if len(errors) > 0 {
		return ControlInScopeMultiError(errors)
	}

	return nil
}

// ControlInScopeMultiError is an error wrapping multiple validation errors
// returned by ControlInScope.ValidateAll() if the designated constraints
// aren't met.
type ControlInScopeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControlInScopeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControlInScopeMultiError) AllErrors() []error { return m }

// ControlInScopeValidationError is the validation error returned by
// ControlInScope.Validate if the designated constraints aren't met.
type ControlInScopeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControlInScopeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControlInScopeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControlInScopeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControlInScopeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControlInScopeValidationError) ErrorName() string { return "ControlInScopeValidationError" }

// Error satisfies the builtin error interface
func (e ControlInScopeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControlInScope.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControlInScopeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControlInScopeValidationError{}

// Validate checks the field values on CreateTargetOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTargetOfEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTargetOfEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTargetOfEvaluationRequestMultiError, or nil if none found.
func (m *CreateTargetOfEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTargetOfEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetOfEvaluation() == nil {
		err := CreateTargetOfEvaluationRequestValidationError{
			field:  "TargetOfEvaluation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTargetOfEvaluation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTargetOfEvaluationRequestValidationError{
					field:  "TargetOfEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTargetOfEvaluationRequestValidationError{
					field:  "TargetOfEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOfEvaluation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTargetOfEvaluationRequestValidationError{
				field:  "TargetOfEvaluation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTargetOfEvaluationRequestMultiError(errors)
	}

	return nil
}

// CreateTargetOfEvaluationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTargetOfEvaluationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTargetOfEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTargetOfEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTargetOfEvaluationRequestMultiError) AllErrors() []error { return m }

// CreateTargetOfEvaluationRequestValidationError is the validation error
// returned by CreateTargetOfEvaluationRequest.Validate if the designated
// constraints aren't met.
type CreateTargetOfEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTargetOfEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTargetOfEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTargetOfEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTargetOfEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTargetOfEvaluationRequestValidationError) ErrorName() string {
	return "CreateTargetOfEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTargetOfEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTargetOfEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTargetOfEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTargetOfEvaluationRequestValidationError{}

// Validate checks the field values on RemoveTargetOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveTargetOfEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveTargetOfEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveTargetOfEvaluationRequestMultiError, or nil if none found.
func (m *RemoveTargetOfEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveTargetOfEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = RemoveTargetOfEvaluationRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := RemoveTargetOfEvaluationRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveTargetOfEvaluationRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveTargetOfEvaluationRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RemoveTargetOfEvaluationRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveTargetOfEvaluationRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveTargetOfEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveTargetOfEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveTargetOfEvaluationRequestMultiError) AllErrors() []error { return m }

// RemoveTargetOfEvaluationRequestValidationError is the validation error
// returned by RemoveTargetOfEvaluationRequest.Validate if the designated
// constraints aren't met.
type RemoveTargetOfEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveTargetOfEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveTargetOfEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveTargetOfEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveTargetOfEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveTargetOfEvaluationRequestValidationError) ErrorName() string {
	return "RemoveTargetOfEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveTargetOfEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveTargetOfEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveTargetOfEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveTargetOfEvaluationRequestValidationError{}

// Validate checks the field values on GetTargetOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTargetOfEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTargetOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTargetOfEvaluationRequestMultiError, or nil if none found.
func (m *GetTargetOfEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTargetOfEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = GetTargetOfEvaluationRequestValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := GetTargetOfEvaluationRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTargetOfEvaluationRequestMultiError(errors)
	}

	return nil
}

func (m *GetTargetOfEvaluationRequest) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTargetOfEvaluationRequestMultiError is an error wrapping multiple
// validation errors returned by GetTargetOfEvaluationRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTargetOfEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTargetOfEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTargetOfEvaluationRequestMultiError) AllErrors() []error { return m }

// GetTargetOfEvaluationRequestValidationError is the validation error returned
// by GetTargetOfEvaluationRequest.Validate if the designated constraints
// aren't met.
type GetTargetOfEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTargetOfEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTargetOfEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTargetOfEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTargetOfEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTargetOfEvaluationRequestValidationError) ErrorName() string {
	return "GetTargetOfEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTargetOfEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTargetOfEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTargetOfEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTargetOfEvaluationRequestValidationError{}

// Validate checks the field values on ListTargetsOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTargetsOfEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTargetsOfEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTargetsOfEvaluationRequestMultiError, or nil if none found.
func (m *ListTargetsOfEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTargetsOfEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CloudServiceId

	// no validation rules for CatalogId

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListTargetsOfEvaluationRequestMultiError(errors)
	}

	return nil
}

// ListTargetsOfEvaluationRequestMultiError is an error wrapping multiple
// validation errors returned by ListTargetsOfEvaluationRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTargetsOfEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTargetsOfEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTargetsOfEvaluationRequestMultiError) AllErrors() []error { return m }

// ListTargetsOfEvaluationRequestValidationError is the validation error
// returned by ListTargetsOfEvaluationRequest.Validate if the designated
// constraints aren't met.
type ListTargetsOfEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTargetsOfEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTargetsOfEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTargetsOfEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTargetsOfEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTargetsOfEvaluationRequestValidationError) ErrorName() string {
	return "ListTargetsOfEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTargetsOfEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTargetsOfEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTargetsOfEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTargetsOfEvaluationRequestValidationError{}

// Validate checks the field values on ListTargetsOfEvaluationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTargetsOfEvaluationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTargetsOfEvaluationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTargetsOfEvaluationResponseMultiError, or nil if none found.
func (m *ListTargetsOfEvaluationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTargetsOfEvaluationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTargetOfEvaluation() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTargetsOfEvaluationResponseValidationError{
						field:  fmt.Sprintf("TargetOfEvaluation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTargetsOfEvaluationResponseValidationError{
						field:  fmt.Sprintf("TargetOfEvaluation[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTargetsOfEvaluationResponseValidationError{
					field:  fmt.Sprintf("TargetOfEvaluation[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListTargetsOfEvaluationResponseMultiError(errors)
	}

	return nil
}

// ListTargetsOfEvaluationResponseMultiError is an error wrapping multiple
// validation errors returned by ListTargetsOfEvaluationResponse.ValidateAll()
// if the designated constraints aren't met.
type ListTargetsOfEvaluationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTargetsOfEvaluationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTargetsOfEvaluationResponseMultiError) AllErrors() []error { return m }

// ListTargetsOfEvaluationResponseValidationError is the validation error
// returned by ListTargetsOfEvaluationResponse.Validate if the designated
// constraints aren't met.
type ListTargetsOfEvaluationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTargetsOfEvaluationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTargetsOfEvaluationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTargetsOfEvaluationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTargetsOfEvaluationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTargetsOfEvaluationResponseValidationError) ErrorName() string {
	return "ListTargetsOfEvaluationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTargetsOfEvaluationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTargetsOfEvaluationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTargetsOfEvaluationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTargetsOfEvaluationResponseValidationError{}

// Validate checks the field values on UpdateTargetOfEvaluationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTargetOfEvaluationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTargetOfEvaluationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTargetOfEvaluationRequestMultiError, or nil if none found.
func (m *UpdateTargetOfEvaluationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTargetOfEvaluationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetOfEvaluation() == nil {
		err := UpdateTargetOfEvaluationRequestValidationError{
			field:  "TargetOfEvaluation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTargetOfEvaluation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTargetOfEvaluationRequestValidationError{
					field:  "TargetOfEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTargetOfEvaluationRequestValidationError{
					field:  "TargetOfEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetOfEvaluation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTargetOfEvaluationRequestValidationError{
				field:  "TargetOfEvaluation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTargetOfEvaluationRequestMultiError(errors)
	}

	return nil
}

// UpdateTargetOfEvaluationRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTargetOfEvaluationRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateTargetOfEvaluationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTargetOfEvaluationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTargetOfEvaluationRequestMultiError) AllErrors() []error { return m }

// UpdateTargetOfEvaluationRequestValidationError is the validation error
// returned by UpdateTargetOfEvaluationRequest.Validate if the designated
// constraints aren't met.
type UpdateTargetOfEvaluationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTargetOfEvaluationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTargetOfEvaluationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTargetOfEvaluationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTargetOfEvaluationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTargetOfEvaluationRequestValidationError) ErrorName() string {
	return "UpdateTargetOfEvaluationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTargetOfEvaluationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTargetOfEvaluationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTargetOfEvaluationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTargetOfEvaluationRequestValidationError{}

// Validate checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCertificateRequestMultiError, or nil if none found.
func (m *GetCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCertificateId()) < 1 {
		err := GetCertificateRequestValidationError{
			field:  "CertificateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCertificateRequestMultiError(errors)
	}

	return nil
}

// GetCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by GetCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCertificateRequestMultiError) AllErrors() []error { return m }

// GetCertificateRequestValidationError is the validation error returned by
// GetCertificateRequest.Validate if the designated constraints aren't met.
type GetCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCertificateRequestValidationError) ErrorName() string {
	return "GetCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCertificateRequestValidationError{}

// Validate checks the field values on ListCertificatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCertificatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCertificatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCertificatesRequestMultiError, or nil if none found.
func (m *ListCertificatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCertificatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListCertificatesRequestMultiError(errors)
	}

	return nil
}

// ListCertificatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCertificatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCertificatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCertificatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCertificatesRequestMultiError) AllErrors() []error { return m }

// ListCertificatesRequestValidationError is the validation error returned by
// ListCertificatesRequest.Validate if the designated constraints aren't met.
type ListCertificatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertificatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertificatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertificatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertificatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertificatesRequestValidationError) ErrorName() string {
	return "ListCertificatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertificatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertificatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertificatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertificatesRequestValidationError{}

// Validate checks the field values on ListCertificatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCertificatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCertificatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCertificatesResponseMultiError, or nil if none found.
func (m *ListCertificatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCertificatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCertificates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCertificatesResponseValidationError{
					field:  fmt.Sprintf("Certificates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCertificatesResponseMultiError(errors)
	}

	return nil
}

// ListCertificatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCertificatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCertificatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCertificatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCertificatesResponseMultiError) AllErrors() []error { return m }

// ListCertificatesResponseValidationError is the validation error returned by
// ListCertificatesResponse.Validate if the designated constraints aren't met.
type ListCertificatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCertificatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCertificatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCertificatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCertificatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCertificatesResponseValidationError) ErrorName() string {
	return "ListCertificatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCertificatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCertificatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCertificatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCertificatesResponseValidationError{}

// Validate checks the field values on UpdateCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCertificateRequestMultiError, or nil if none found.
func (m *UpdateCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCertificate() == nil {
		err := UpdateCertificateRequestValidationError{
			field:  "Certificate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCertificateRequestValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCertificateRequestMultiError(errors)
	}

	return nil
}

// UpdateCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCertificateRequestMultiError) AllErrors() []error { return m }

// UpdateCertificateRequestValidationError is the validation error returned by
// UpdateCertificateRequest.Validate if the designated constraints aren't met.
type UpdateCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCertificateRequestValidationError) ErrorName() string {
	return "UpdateCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCertificateRequestValidationError{}

// Validate checks the field values on CreateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCatalogRequestMultiError, or nil if none found.
func (m *CreateCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCatalog() == nil {
		err := CreateCatalogRequestValidationError{
			field:  "Catalog",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCatalogRequestValidationError{
					field:  "Catalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCatalogRequestValidationError{
					field:  "Catalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCatalogRequestValidationError{
				field:  "Catalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCatalogRequestMultiError(errors)
	}

	return nil
}

// CreateCatalogRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCatalogRequestMultiError) AllErrors() []error { return m }

// CreateCatalogRequestValidationError is the validation error returned by
// CreateCatalogRequest.Validate if the designated constraints aren't met.
type CreateCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCatalogRequestValidationError) ErrorName() string {
	return "CreateCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCatalogRequestValidationError{}

// Validate checks the field values on RemoveCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCatalogRequestMultiError, or nil if none found.
func (m *RemoveCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := RemoveCatalogRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveCatalogRequestMultiError(errors)
	}

	return nil
}

// RemoveCatalogRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCatalogRequestMultiError) AllErrors() []error { return m }

// RemoveCatalogRequestValidationError is the validation error returned by
// RemoveCatalogRequest.Validate if the designated constraints aren't met.
type RemoveCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCatalogRequestValidationError) ErrorName() string {
	return "RemoveCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCatalogRequestValidationError{}

// Validate checks the field values on GetCatalogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCatalogRequestMultiError, or nil if none found.
func (m *GetCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := GetCatalogRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCatalogRequestMultiError(errors)
	}

	return nil
}

// GetCatalogRequestMultiError is an error wrapping multiple validation errors
// returned by GetCatalogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCatalogRequestMultiError) AllErrors() []error { return m }

// GetCatalogRequestValidationError is the validation error returned by
// GetCatalogRequest.Validate if the designated constraints aren't met.
type GetCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCatalogRequestValidationError) ErrorName() string {
	return "GetCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCatalogRequestValidationError{}

// Validate checks the field values on ListCatalogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCatalogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCatalogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCatalogsRequestMultiError, or nil if none found.
func (m *ListCatalogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCatalogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListCatalogsRequestMultiError(errors)
	}

	return nil
}

// ListCatalogsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCatalogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCatalogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCatalogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCatalogsRequestMultiError) AllErrors() []error { return m }

// ListCatalogsRequestValidationError is the validation error returned by
// ListCatalogsRequest.Validate if the designated constraints aren't met.
type ListCatalogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogsRequestValidationError) ErrorName() string {
	return "ListCatalogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogsRequestValidationError{}

// Validate checks the field values on ListCatalogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCatalogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCatalogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCatalogsResponseMultiError, or nil if none found.
func (m *ListCatalogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCatalogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCatalogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCatalogsResponseValidationError{
						field:  fmt.Sprintf("Catalogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCatalogsResponseValidationError{
						field:  fmt.Sprintf("Catalogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCatalogsResponseValidationError{
					field:  fmt.Sprintf("Catalogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListCatalogsResponseMultiError(errors)
	}

	return nil
}

// ListCatalogsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCatalogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCatalogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCatalogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCatalogsResponseMultiError) AllErrors() []error { return m }

// ListCatalogsResponseValidationError is the validation error returned by
// ListCatalogsResponse.Validate if the designated constraints aren't met.
type ListCatalogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogsResponseValidationError) ErrorName() string {
	return "ListCatalogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogsResponseValidationError{}

// Validate checks the field values on UpdateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCatalogRequestMultiError, or nil if none found.
func (m *UpdateCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCatalog() == nil {
		err := UpdateCatalogRequestValidationError{
			field:  "Catalog",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCatalog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCatalogRequestValidationError{
					field:  "Catalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCatalogRequestValidationError{
					field:  "Catalog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCatalog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCatalogRequestValidationError{
				field:  "Catalog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCatalogRequestMultiError(errors)
	}

	return nil
}

// UpdateCatalogRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCatalogRequestMultiError) AllErrors() []error { return m }

// UpdateCatalogRequestValidationError is the validation error returned by
// UpdateCatalogRequest.Validate if the designated constraints aren't met.
type UpdateCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCatalogRequestValidationError) ErrorName() string {
	return "UpdateCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCatalogRequestValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := GetCategoryRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCategoryName()) < 1 {
		err := GetCategoryRequestValidationError{
			field:  "CategoryName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}

	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on GetControlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetControlRequestMultiError, or nil if none found.
func (m *GetControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCatalogId()) < 1 {
		err := GetControlRequestValidationError{
			field:  "CatalogId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCategoryName()) < 1 {
		err := GetControlRequestValidationError{
			field:  "CategoryName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlId()) < 1 {
		err := GetControlRequestValidationError{
			field:  "ControlId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetControlRequestMultiError(errors)
	}

	return nil
}

// GetControlRequestMultiError is an error wrapping multiple validation errors
// returned by GetControlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetControlRequestMultiError) AllErrors() []error { return m }

// GetControlRequestValidationError is the validation error returned by
// GetControlRequest.Validate if the designated constraints aren't met.
type GetControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetControlRequestValidationError) ErrorName() string {
	return "GetControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetControlRequestValidationError{}

// Validate checks the field values on ListControlsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControlsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControlsRequestMultiError, or nil if none found.
func (m *ListControlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CatalogId

	// no validation rules for CategoryName

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if len(errors) > 0 {
		return ListControlsRequestMultiError(errors)
	}

	return nil
}

// ListControlsRequestMultiError is an error wrapping multiple validation
// errors returned by ListControlsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListControlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControlsRequestMultiError) AllErrors() []error { return m }

// ListControlsRequestValidationError is the validation error returned by
// ListControlsRequest.Validate if the designated constraints aren't met.
type ListControlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControlsRequestValidationError) ErrorName() string {
	return "ListControlsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListControlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControlsRequestValidationError{}

// Validate checks the field values on ListControlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListControlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListControlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListControlsResponseMultiError, or nil if none found.
func (m *ListControlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListControlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetControls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListControlsResponseValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListControlsResponseValidationError{
						field:  fmt.Sprintf("Controls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListControlsResponseValidationError{
					field:  fmt.Sprintf("Controls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListControlsResponseMultiError(errors)
	}

	return nil
}

// ListControlsResponseMultiError is an error wrapping multiple validation
// errors returned by ListControlsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListControlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListControlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListControlsResponseMultiError) AllErrors() []error { return m }

// ListControlsResponseValidationError is the validation error returned by
// ListControlsResponse.Validate if the designated constraints aren't met.
type ListControlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListControlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListControlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListControlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListControlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListControlsResponseValidationError) ErrorName() string {
	return "ListControlsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListControlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListControlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListControlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListControlsResponseValidationError{}

// Validate checks the field values on CreateCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCertificateRequestMultiError, or nil if none found.
func (m *CreateCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCertificate() == nil {
		err := CreateCertificateRequestValidationError{
			field:  "Certificate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCertificateRequestValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCertificateRequestValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCertificateRequestMultiError(errors)
	}

	return nil
}

// CreateCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCertificateRequestMultiError) AllErrors() []error { return m }

// CreateCertificateRequestValidationError is the validation error returned by
// CreateCertificateRequest.Validate if the designated constraints aren't met.
type CreateCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCertificateRequestValidationError) ErrorName() string {
	return "CreateCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCertificateRequestValidationError{}

// Validate checks the field values on RemoveCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveCertificateRequestMultiError, or nil if none found.
func (m *RemoveCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCertificateId()) < 1 {
		err := RemoveCertificateRequestValidationError{
			field:  "CertificateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveCertificateRequestMultiError(errors)
	}

	return nil
}

// RemoveCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveCertificateRequestMultiError) AllErrors() []error { return m }

// RemoveCertificateRequestValidationError is the validation error returned by
// RemoveCertificateRequest.Validate if the designated constraints aren't met.
type RemoveCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCertificateRequestValidationError) ErrorName() string {
	return "RemoveCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCertificateRequestValidationError{}

// Validate checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Certificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CertificateMultiError, or
// nil if none found.
func (m *Certificate) ValidateAll() error {
	return m.validate(true)
}

func (m *Certificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CertificateValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CertificateValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = CertificateValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IssueDate

	// no validation rules for ExpirationDate

	// no validation rules for Standard

	// no validation rules for AssuranceLevel

	// no validation rules for Cab

	// no validation rules for Description

	for idx, item := range m.GetStates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CertificateValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CertificateValidationError{
						field:  fmt.Sprintf("States[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CertificateValidationError{
					field:  fmt.Sprintf("States[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CertificateMultiError(errors)
	}

	return nil
}

func (m *Certificate) _validateUuid(uuid string) error {
	if matched := _orchestrator_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CertificateMultiError is an error wrapping multiple validation errors
// returned by Certificate.ValidateAll() if the designated constraints aren't met.
type CertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateMultiError) AllErrors() []error { return m }

// CertificateValidationError is the validation error returned by
// Certificate.Validate if the designated constraints aren't met.
type CertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateValidationError) ErrorName() string { return "CertificateValidationError" }

// Error satisfies the builtin error interface
func (e CertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateValidationError{}

// Validate checks the field values on State with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *State) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on State with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StateMultiError, or nil if none found.
func (m *State) ValidateAll() error {
	return m.validate(true)
}

func (m *State) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	// no validation rules for TreeId

	// no validation rules for Timestamp

	// no validation rules for CertificateId

	if len(errors) > 0 {
		return StateMultiError(errors)
	}

	return nil
}

// StateMultiError is an error wrapping multiple validation errors returned by
// State.ValidateAll() if the designated constraints aren't met.
type StateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StateMultiError) AllErrors() []error { return m }

// StateValidationError is the validation error returned by State.Validate if
// the designated constraints aren't met.
type StateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StateValidationError) ErrorName() string { return "StateValidationError" }

// Error satisfies the builtin error interface
func (e StateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StateValidationError{}

// Validate checks the field values on TargetOfEvaluationChangeEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TargetOfEvaluationChangeEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetOfEvaluationChangeEvent with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TargetOfEvaluationChangeEventMultiError, or nil if none found.
func (m *TargetOfEvaluationChangeEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetOfEvaluationChangeEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := TargetOfEvaluationChangeEvent_Type_name[int32(m.GetType())]; !ok {
		err := TargetOfEvaluationChangeEventValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.TargetOfEvaluation != nil {

		if m.GetTargetOfEvaluation() == nil {
			err := TargetOfEvaluationChangeEventValidationError{
				field:  "TargetOfEvaluation",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetOfEvaluation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TargetOfEvaluationChangeEventValidationError{
						field:  "TargetOfEvaluation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TargetOfEvaluationChangeEventValidationError{
						field:  "TargetOfEvaluation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetOfEvaluation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TargetOfEvaluationChangeEventValidationError{
					field:  "TargetOfEvaluation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ControlInScope != nil {

		if m.GetControlInScope() == nil {
			err := TargetOfEvaluationChangeEventValidationError{
				field:  "ControlInScope",
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetControlInScope()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TargetOfEvaluationChangeEventValidationError{
						field:  "ControlInScope",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TargetOfEvaluationChangeEventValidationError{
						field:  "ControlInScope",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetControlInScope()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TargetOfEvaluationChangeEventValidationError{
					field:  "ControlInScope",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TargetOfEvaluationChangeEventMultiError(errors)
	}

	return nil
}

// TargetOfEvaluationChangeEventMultiError is an error wrapping multiple
// validation errors returned by TargetOfEvaluationChangeEvent.ValidateAll()
// if the designated constraints aren't met.
type TargetOfEvaluationChangeEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetOfEvaluationChangeEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetOfEvaluationChangeEventMultiError) AllErrors() []error { return m }

// TargetOfEvaluationChangeEventValidationError is the validation error
// returned by TargetOfEvaluationChangeEvent.Validate if the designated
// constraints aren't met.
type TargetOfEvaluationChangeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetOfEvaluationChangeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetOfEvaluationChangeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetOfEvaluationChangeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetOfEvaluationChangeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetOfEvaluationChangeEventValidationError) ErrorName() string {
	return "TargetOfEvaluationChangeEventValidationError"
}

// Error satisfies the builtin error interface
func (e TargetOfEvaluationChangeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetOfEvaluationChangeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetOfEvaluationChangeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetOfEvaluationChangeEventValidationError{}
