// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/assessment/assessment.proto

package assessmentconnect

import (
	assessment "clouditor.io/clouditor/v2/api/assessment"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AssessmentName is the fully-qualified name of the Assessment service.
	AssessmentName = "clouditor.assessment.v1.Assessment"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AssessmentCalculateComplianceProcedure is the fully-qualified name of the Assessment's
	// CalculateCompliance RPC.
	AssessmentCalculateComplianceProcedure = "/clouditor.assessment.v1.Assessment/CalculateCompliance"
	// AssessmentAssessEvidenceProcedure is the fully-qualified name of the Assessment's AssessEvidence
	// RPC.
	AssessmentAssessEvidenceProcedure = "/clouditor.assessment.v1.Assessment/AssessEvidence"
	// AssessmentAssessEvidencesProcedure is the fully-qualified name of the Assessment's
	// AssessEvidences RPC.
	AssessmentAssessEvidencesProcedure = "/clouditor.assessment.v1.Assessment/AssessEvidences"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	assessmentServiceDescriptor                   = assessment.File_api_assessment_assessment_proto.Services().ByName("Assessment")
	assessmentCalculateComplianceMethodDescriptor = assessmentServiceDescriptor.Methods().ByName("CalculateCompliance")
	assessmentAssessEvidenceMethodDescriptor      = assessmentServiceDescriptor.Methods().ByName("AssessEvidence")
	assessmentAssessEvidencesMethodDescriptor     = assessmentServiceDescriptor.Methods().ByName("AssessEvidences")
)

// AssessmentClient is a client for the clouditor.assessment.v1.Assessment service.
type AssessmentClient interface {
	// Triggers the compliance calculation. Part of the private API. Not exposed
	// as REST.
	CalculateCompliance(context.Context, *connect.Request[assessment.CalculateComplianceRequest]) (*connect.Response[emptypb.Empty], error)
	// Assesses the evidence sent by the discovery. Part of the public API, also
	// exposed as REST.
	AssessEvidence(context.Context, *connect.Request[assessment.AssessEvidenceRequest]) (*connect.Response[assessment.AssessEvidenceResponse], error)
	// Assesses stream of evidences sent by the discovery and returns a response
	// stream. Part of the public API. Not exposed as REST.
	AssessEvidences(context.Context) *connect.BidiStreamForClient[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse]
}

// NewAssessmentClient constructs a client for the clouditor.assessment.v1.Assessment service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAssessmentClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AssessmentClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &assessmentClient{
		calculateCompliance: connect.NewClient[assessment.CalculateComplianceRequest, emptypb.Empty](
			httpClient,
			baseURL+AssessmentCalculateComplianceProcedure,
			connect.WithSchema(assessmentCalculateComplianceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assessEvidence: connect.NewClient[assessment.AssessEvidenceRequest, assessment.AssessEvidenceResponse](
			httpClient,
			baseURL+AssessmentAssessEvidenceProcedure,
			connect.WithSchema(assessmentAssessEvidenceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		assessEvidences: connect.NewClient[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse](
			httpClient,
			baseURL+AssessmentAssessEvidencesProcedure,
			connect.WithSchema(assessmentAssessEvidencesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// assessmentClient implements AssessmentClient.
type assessmentClient struct {
	calculateCompliance *connect.Client[assessment.CalculateComplianceRequest, emptypb.Empty]
	assessEvidence      *connect.Client[assessment.AssessEvidenceRequest, assessment.AssessEvidenceResponse]
	assessEvidences     *connect.Client[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse]
}

// CalculateCompliance calls clouditor.assessment.v1.Assessment.CalculateCompliance.
func (c *assessmentClient) CalculateCompliance(ctx context.Context, req *connect.Request[assessment.CalculateComplianceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.calculateCompliance.CallUnary(ctx, req)
}

// AssessEvidence calls clouditor.assessment.v1.Assessment.AssessEvidence.
func (c *assessmentClient) AssessEvidence(ctx context.Context, req *connect.Request[assessment.AssessEvidenceRequest]) (*connect.Response[assessment.AssessEvidenceResponse], error) {
	return c.assessEvidence.CallUnary(ctx, req)
}

// AssessEvidences calls clouditor.assessment.v1.Assessment.AssessEvidences.
func (c *assessmentClient) AssessEvidences(ctx context.Context) *connect.BidiStreamForClient[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse] {
	return c.assessEvidences.CallBidiStream(ctx)
}

// AssessmentHandler is an implementation of the clouditor.assessment.v1.Assessment service.
type AssessmentHandler interface {
	// Triggers the compliance calculation. Part of the private API. Not exposed
	// as REST.
	CalculateCompliance(context.Context, *connect.Request[assessment.CalculateComplianceRequest]) (*connect.Response[emptypb.Empty], error)
	// Assesses the evidence sent by the discovery. Part of the public API, also
	// exposed as REST.
	AssessEvidence(context.Context, *connect.Request[assessment.AssessEvidenceRequest]) (*connect.Response[assessment.AssessEvidenceResponse], error)
	// Assesses stream of evidences sent by the discovery and returns a response
	// stream. Part of the public API. Not exposed as REST.
	AssessEvidences(context.Context, *connect.BidiStream[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse]) error
}

// NewAssessmentHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAssessmentHandler(svc AssessmentHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	assessmentCalculateComplianceHandler := connect.NewUnaryHandler(
		AssessmentCalculateComplianceProcedure,
		svc.CalculateCompliance,
		connect.WithSchema(assessmentCalculateComplianceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assessmentAssessEvidenceHandler := connect.NewUnaryHandler(
		AssessmentAssessEvidenceProcedure,
		svc.AssessEvidence,
		connect.WithSchema(assessmentAssessEvidenceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	assessmentAssessEvidencesHandler := connect.NewBidiStreamHandler(
		AssessmentAssessEvidencesProcedure,
		svc.AssessEvidences,
		connect.WithSchema(assessmentAssessEvidencesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.assessment.v1.Assessment/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AssessmentCalculateComplianceProcedure:
			assessmentCalculateComplianceHandler.ServeHTTP(w, r)
		case AssessmentAssessEvidenceProcedure:
			assessmentAssessEvidenceHandler.ServeHTTP(w, r)
		case AssessmentAssessEvidencesProcedure:
			assessmentAssessEvidencesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAssessmentHandler returns CodeUnimplemented from all methods.
type UnimplementedAssessmentHandler struct{}

func (UnimplementedAssessmentHandler) CalculateCompliance(context.Context, *connect.Request[assessment.CalculateComplianceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.assessment.v1.Assessment.CalculateCompliance is not implemented"))
}

func (UnimplementedAssessmentHandler) AssessEvidence(context.Context, *connect.Request[assessment.AssessEvidenceRequest]) (*connect.Response[assessment.AssessEvidenceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.assessment.v1.Assessment.AssessEvidence is not implemented"))
}

func (UnimplementedAssessmentHandler) AssessEvidences(context.Context, *connect.BidiStream[assessment.AssessEvidenceRequest, assessment.AssessEvidencesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.assessment.v1.Assessment.AssessEvidences is not implemented"))
}
