/*
 * Copyright 2016-2022 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
syntax = "proto3";

package clouditor.assessment.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "api/evidence/evidence.proto";
import "api/assessment/metric.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "clouditor.io/clouditor/api/assessment";

// Representing the link between orchestrator and discovery: Assessing evidences
// from discovery and sending results to orchestrator
service Assessment {

  // Triggers the compliance calculation. Part of the private API. Not exposed
  // as REST.
  rpc CalculateCompliance(CalculateComplianceRequest)
      returns (google.protobuf.Empty) {}

  // Assesses the evidence sent by the discovery. Part of the public API, also
  // exposed as REST.
  rpc AssessEvidence(AssessEvidenceRequest) returns (AssessEvidenceResponse) {
    option (google.api.http) = {
      post : "/v1/assessment/evidences"
      body : "evidence"
    };
  }

  // Assesses stream of evidences sent by the discovery and returns a response
  // stream. Part of the public API. Not exposed as REST.
  rpc AssessEvidences(stream AssessEvidenceRequest)
      returns (stream AssessEvidencesResponse) {};
};

message ConfigureAssessmentRequest {}
message ConfigureAssessmentResponse {}

message CalculateComplianceRequest { string control_id = 1; }

message AssessEvidenceRequest {
  clouditor.evidence.v1.Evidence evidence = 1
      [ (validate.rules).message.required = true ];
}

// AssessEvidenceResponse belongs to AssessEvidence, which uses a custom unary
// RPC and therefore requires a response message according to the style
// convention. Since no return values are required, this is empty.
message AssessEvidenceResponse {}

// AssessEvidencesResponse belongs to AssessEvidences, which uses a custom
// bidirectional streaming RPC and therefore requires a response message
// according to the style convention. The bidirectional streaming needs the
// status and its message in the response for error handling.
message AssessEvidencesResponse {
  enum AssessmentStatus {
    ASSESSMENT_STATUS_UNSPECIFIED = 0;
    WAITING_FOR_RELATED = 1;
    ASSESSED = 2;
    FAILED = 3;
  }
  AssessmentStatus status = 1;

  string status_message = 2;
}

// A result resource, representing the result after assessing the cloud resource
// with id resource_id.
message AssessmentResult {
  // Assessment result id
  string id = 1 [ (validate.rules).string.uuid = true ];

  // Time of assessment
  google.protobuf.Timestamp timestamp = 2 [
    (tagger.tags) = "gorm:\"serializer:timestamppb;type:datetime\"",
    (validate.rules).timestamp.required = true
  ];

  // Reference to the metric the assessment was based on
  string metric_id = 3 [ (validate.rules).string.min_len = 1 ];

  // Data corresponding to the metric by the given metric id
  MetricConfiguration metric_configuration = 4 [
    (tagger.tags) = "gorm:\"serializer:json\"",
    (validate.rules).message.required = true
  ];

  // Compliant case: true or false
  bool compliant = 5;

  // Reference to the assessed evidence
  string evidence_id = 6 [ (validate.rules).string.uuid = true ];

  // Reference to the resource of the assessed evidence
  string resource_id = 7 [ (validate.rules).string.min_len = 1 ];

  // Resource types
  repeated string resource_types = 8 [
    (tagger.tags) = "gorm:\"serializer:json\"",
    (validate.rules).repeated .min_items = 1
  ];

  // Some comments on the reason for non-compliance
  string non_compliance_comments = 9;

  // The cloud service which this assessment result belongs to
  string cloud_service_id = 10 [ (validate.rules).string.uuid = true ];

  // Reference to the tool which provided the assessment result
  optional string tool_id = 11 [ (validate.rules).string.min_len = 1 ];
}

/*
prepared for future use
message ComplianceResult {
  string id = 1;

  enum Status {
    STATUS_UNSPECIFIED = 0;
    COMPLIANT = 1;
    NOT_COMPLIANT = 2;
    PENDING = 3;
  }

  Status status = 2;

  google.protobuf.Timestamp timestamp = 3
      [ (tagger.tags) = "gorm:\"serializer:timestamppb;type:datetime\"" ];

  string control_id = 4;

  string cloud_service_id = 5;

  repeated AssessmentResult results = 6;
}*/