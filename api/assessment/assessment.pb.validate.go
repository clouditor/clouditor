// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/assessment/assessment.proto

package assessment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _assessment_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ListAssessmentResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssessmentResultsRequestMultiError, or nil if none found.
func (m *ListAssessmentResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilteredMetricId() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := ListAssessmentResultsRequestValidationError{
				field:  fmt.Sprintf("FilteredMetricId[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for OrderBy

	// no validation rules for Asc

	if m.FilteredCloudServiceId != nil {

		if err := m._validateUuid(m.GetFilteredCloudServiceId()); err != nil {
			err = ListAssessmentResultsRequestValidationError{
				field:  "FilteredCloudServiceId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.FilteredCompliant != nil {
		// no validation rules for FilteredCompliant
	}

	if len(errors) > 0 {
		return ListAssessmentResultsRequestMultiError(errors)
	}

	return nil
}

func (m *ListAssessmentResultsRequest) _validateUuid(uuid string) error {
	if matched := _assessment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListAssessmentResultsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentResultsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAssessmentResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentResultsRequestMultiError) AllErrors() []error { return m }

// ListAssessmentResultsRequestValidationError is the validation error returned
// by ListAssessmentResultsRequest.Validate if the designated constraints
// aren't met.
type ListAssessmentResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentResultsRequestValidationError) ErrorName() string {
	return "ListAssessmentResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentResultsRequestValidationError{}

// Validate checks the field values on ListAssessmentResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssessmentResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssessmentResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListAssessmentResultsResponseMultiError, or nil if none found.
func (m *ListAssessmentResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssessmentResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssessmentResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssessmentResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssessmentResultsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAssessmentResultsResponseMultiError(errors)
	}

	return nil
}

// ListAssessmentResultsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAssessmentResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListAssessmentResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssessmentResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssessmentResultsResponseMultiError) AllErrors() []error { return m }

// ListAssessmentResultsResponseValidationError is the validation error
// returned by ListAssessmentResultsResponse.Validate if the designated
// constraints aren't met.
type ListAssessmentResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssessmentResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssessmentResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssessmentResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssessmentResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssessmentResultsResponseValidationError) ErrorName() string {
	return "ListAssessmentResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssessmentResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssessmentResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssessmentResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssessmentResultsResponseValidationError{}

// Validate checks the field values on ConfigureAssessmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureAssessmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureAssessmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureAssessmentRequestMultiError, or nil if none found.
func (m *ConfigureAssessmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureAssessmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigureAssessmentRequestMultiError(errors)
	}

	return nil
}

// ConfigureAssessmentRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigureAssessmentRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfigureAssessmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureAssessmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureAssessmentRequestMultiError) AllErrors() []error { return m }

// ConfigureAssessmentRequestValidationError is the validation error returned
// by ConfigureAssessmentRequest.Validate if the designated constraints aren't met.
type ConfigureAssessmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAssessmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAssessmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAssessmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAssessmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAssessmentRequestValidationError) ErrorName() string {
	return "ConfigureAssessmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAssessmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAssessmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAssessmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAssessmentRequestValidationError{}

// Validate checks the field values on ConfigureAssessmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigureAssessmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigureAssessmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigureAssessmentResponseMultiError, or nil if none found.
func (m *ConfigureAssessmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigureAssessmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigureAssessmentResponseMultiError(errors)
	}

	return nil
}

// ConfigureAssessmentResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigureAssessmentResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigureAssessmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigureAssessmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigureAssessmentResponseMultiError) AllErrors() []error { return m }

// ConfigureAssessmentResponseValidationError is the validation error returned
// by ConfigureAssessmentResponse.Validate if the designated constraints
// aren't met.
type ConfigureAssessmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureAssessmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureAssessmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureAssessmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureAssessmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureAssessmentResponseValidationError) ErrorName() string {
	return "ConfigureAssessmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureAssessmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureAssessmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureAssessmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureAssessmentResponseValidationError{}

// Validate checks the field values on CalculateComplianceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateComplianceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateComplianceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateComplianceRequestMultiError, or nil if none found.
func (m *CalculateComplianceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateComplianceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ControlId

	if len(errors) > 0 {
		return CalculateComplianceRequestMultiError(errors)
	}

	return nil
}

// CalculateComplianceRequestMultiError is an error wrapping multiple
// validation errors returned by CalculateComplianceRequest.ValidateAll() if
// the designated constraints aren't met.
type CalculateComplianceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateComplianceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateComplianceRequestMultiError) AllErrors() []error { return m }

// CalculateComplianceRequestValidationError is the validation error returned
// by CalculateComplianceRequest.Validate if the designated constraints aren't met.
type CalculateComplianceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateComplianceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateComplianceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateComplianceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateComplianceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateComplianceRequestValidationError) ErrorName() string {
	return "CalculateComplianceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateComplianceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateComplianceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateComplianceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateComplianceRequestValidationError{}

// Validate checks the field values on AssessEvidenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssessEvidenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessEvidenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssessEvidenceRequestMultiError, or nil if none found.
func (m *AssessEvidenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessEvidenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEvidence() == nil {
		err := AssessEvidenceRequestValidationError{
			field:  "Evidence",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEvidence()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssessEvidenceRequestValidationError{
					field:  "Evidence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssessEvidenceRequestValidationError{
					field:  "Evidence",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvidence()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssessEvidenceRequestValidationError{
				field:  "Evidence",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssessEvidenceRequestMultiError(errors)
	}

	return nil
}

// AssessEvidenceRequestMultiError is an error wrapping multiple validation
// errors returned by AssessEvidenceRequest.ValidateAll() if the designated
// constraints aren't met.
type AssessEvidenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessEvidenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessEvidenceRequestMultiError) AllErrors() []error { return m }

// AssessEvidenceRequestValidationError is the validation error returned by
// AssessEvidenceRequest.Validate if the designated constraints aren't met.
type AssessEvidenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessEvidenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessEvidenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessEvidenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessEvidenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessEvidenceRequestValidationError) ErrorName() string {
	return "AssessEvidenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssessEvidenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessEvidenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessEvidenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessEvidenceRequestValidationError{}

// Validate checks the field values on AssessEvidenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssessEvidenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessEvidenceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssessEvidenceResponseMultiError, or nil if none found.
func (m *AssessEvidenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessEvidenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for StatusMessage

	if len(errors) > 0 {
		return AssessEvidenceResponseMultiError(errors)
	}

	return nil
}

// AssessEvidenceResponseMultiError is an error wrapping multiple validation
// errors returned by AssessEvidenceResponse.ValidateAll() if the designated
// constraints aren't met.
type AssessEvidenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessEvidenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessEvidenceResponseMultiError) AllErrors() []error { return m }

// AssessEvidenceResponseValidationError is the validation error returned by
// AssessEvidenceResponse.Validate if the designated constraints aren't met.
type AssessEvidenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessEvidenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessEvidenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessEvidenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessEvidenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessEvidenceResponseValidationError) ErrorName() string {
	return "AssessEvidenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssessEvidenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessEvidenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessEvidenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessEvidenceResponseValidationError{}

// Validate checks the field values on AssessmentResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssessmentResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessmentResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssessmentResultMultiError, or nil if none found.
func (m *AssessmentResult) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessmentResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = AssessmentResultValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTimestamp() == nil {
		err := AssessmentResultValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMetricId()) < 1 {
		err := AssessmentResultValidationError{
			field:  "MetricId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMetricConfiguration() == nil {
		err := AssessmentResultValidationError{
			field:  "MetricConfiguration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetricConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssessmentResultValidationError{
					field:  "MetricConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssessmentResultValidationError{
					field:  "MetricConfiguration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetricConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssessmentResultValidationError{
				field:  "MetricConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Compliant

	if err := m._validateUuid(m.GetEvidenceId()); err != nil {
		err = AssessmentResultValidationError{
			field:  "EvidenceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResourceId()) < 1 {
		err := AssessmentResultValidationError{
			field:  "ResourceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetResourceTypes()) < 1 {
		err := AssessmentResultValidationError{
			field:  "ResourceTypes",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NonComplianceComments

	if err := m._validateUuid(m.GetCloudServiceId()); err != nil {
		err = AssessmentResultValidationError{
			field:  "CloudServiceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssessmentResultMultiError(errors)
	}

	return nil
}

func (m *AssessmentResult) _validateUuid(uuid string) error {
	if matched := _assessment_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AssessmentResultMultiError is an error wrapping multiple validation errors
// returned by AssessmentResult.ValidateAll() if the designated constraints
// aren't met.
type AssessmentResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessmentResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessmentResultMultiError) AllErrors() []error { return m }

// AssessmentResultValidationError is the validation error returned by
// AssessmentResult.Validate if the designated constraints aren't met.
type AssessmentResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessmentResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessmentResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessmentResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessmentResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessmentResultValidationError) ErrorName() string { return "AssessmentResultValidationError" }

// Error satisfies the builtin error interface
func (e AssessmentResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessmentResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessmentResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessmentResultValidationError{}
