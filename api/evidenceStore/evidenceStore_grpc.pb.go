// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package evidenceStore

import (
	assessment "api/assessment"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EvidenceStoreClient is the client API for EvidenceStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvidenceStoreClient interface {
	StoreEvidence(ctx context.Context, in *assessment.Evidence, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StoreEvidences(ctx context.Context, opts ...grpc.CallOption) (EvidenceStore_StoreEvidencesClient, error)
}

type evidenceStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEvidenceStoreClient(cc grpc.ClientConnInterface) EvidenceStoreClient {
	return &evidenceStoreClient{cc}
}

func (c *evidenceStoreClient) StoreEvidence(ctx context.Context, in *assessment.Evidence, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/clouditor.EvidenceStore/StoreEvidence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evidenceStoreClient) StoreEvidences(ctx context.Context, opts ...grpc.CallOption) (EvidenceStore_StoreEvidencesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EvidenceStore_ServiceDesc.Streams[0], "/clouditor.EvidenceStore/StoreEvidences", opts...)
	if err != nil {
		return nil, err
	}
	x := &evidenceStoreStoreEvidencesClient{stream}
	return x, nil
}

type EvidenceStore_StoreEvidencesClient interface {
	Send(*assessment.Evidence) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type evidenceStoreStoreEvidencesClient struct {
	grpc.ClientStream
}

func (x *evidenceStoreStoreEvidencesClient) Send(m *assessment.Evidence) error {
	return x.ClientStream.SendMsg(m)
}

func (x *evidenceStoreStoreEvidencesClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EvidenceStoreServer is the server API for EvidenceStore service.
// All implementations must embed UnimplementedEvidenceStoreServer
// for forward compatibility
type EvidenceStoreServer interface {
	StoreEvidence(context.Context, *assessment.Evidence) (*emptypb.Empty, error)
	StoreEvidences(EvidenceStore_StoreEvidencesServer) error
	mustEmbedUnimplementedEvidenceStoreServer()
}

// UnimplementedEvidenceStoreServer must be embedded to have forward compatible implementations.
type UnimplementedEvidenceStoreServer struct {
}

func (UnimplementedEvidenceStoreServer) StoreEvidence(context.Context, *assessment.Evidence) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreEvidence not implemented")
}
func (UnimplementedEvidenceStoreServer) StoreEvidences(EvidenceStore_StoreEvidencesServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreEvidences not implemented")
}
func (UnimplementedEvidenceStoreServer) mustEmbedUnimplementedEvidenceStoreServer() {}

// UnsafeEvidenceStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvidenceStoreServer will
// result in compilation errors.
type UnsafeEvidenceStoreServer interface {
	mustEmbedUnimplementedEvidenceStoreServer()
}

func RegisterEvidenceStoreServer(s grpc.ServiceRegistrar, srv EvidenceStoreServer) {
	s.RegisterService(&EvidenceStore_ServiceDesc, srv)
}

func _EvidenceStore_StoreEvidence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(assessment.Evidence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvidenceStoreServer).StoreEvidence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.EvidenceStore/StoreEvidence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvidenceStoreServer).StoreEvidence(ctx, req.(*assessment.Evidence))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvidenceStore_StoreEvidences_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EvidenceStoreServer).StoreEvidences(&evidenceStoreStoreEvidencesServer{stream})
}

type EvidenceStore_StoreEvidencesServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*assessment.Evidence, error)
	grpc.ServerStream
}

type evidenceStoreStoreEvidencesServer struct {
	grpc.ServerStream
}

func (x *evidenceStoreStoreEvidencesServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *evidenceStoreStoreEvidencesServer) Recv() (*assessment.Evidence, error) {
	m := new(assessment.Evidence)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EvidenceStore_ServiceDesc is the grpc.ServiceDesc for EvidenceStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvidenceStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouditor.EvidenceStore",
	HandlerType: (*EvidenceStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreEvidence",
			Handler:    _EvidenceStore_StoreEvidence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreEvidences",
			Handler:       _EvidenceStore_StoreEvidences_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "evidenceStore.proto",
}
