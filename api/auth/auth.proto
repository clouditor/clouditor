/*
 * Copyright 2016-2022 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
syntax = "proto3";

package clouditor;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "api/auth";

service Authentication {
  rpc Login(LoginRequest) returns (TokenResponse) {
    option (google.api.http) = {
      post : "/v1/auth/login"
      // TODO: Here, "*" is good since username and password (fields of
      // LoginRequest) will be the corresponding fields, right?
      body : "*"
      response_body : "*"
    };
  };

  // GetToken is an OAuth 2.0 compliant token endpoint
  rpc Token(TokenRequest) returns (TokenResponse) {
    option (google.api.http) = {
      // this needs to be a GET request in order for grpc-gateway to map
      // application/x-www-form-urlencoded form params into the request
      get : "/v1/auth/token"
    };
  };

  // ListPublicKeys lists all available public keys of the authentication
  // server in the JSON Web Key Set (JWKS) format.
  rpc ListPublicKeys(ListPublicKeysRequest) returns (ListPublicResponse) {
    option (google.api.http) = {
      get : "/.well-known/jwks.json"
      response_body : "*"
    };
  }
}

// A clouditor user
message User {
  string username = 1;
  string password = 2;
  string email = 3;
  string full_name = 4;
  bool shadow = 5;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

// LoginResponse is a response to a Login call, it is aligned to a OAuth 2.0
// token response (see
// https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.4).
message TokenResponse {
  // access_token contains the token which can be used to authenticate further
  // calls to a resource endpoint
  string access_token = 1;

  // token_type describes the access token type. The usual value in most
  // scenarios is "bearer".
  string token_type = 2;

  // refresh_token is a token that can be used to refresh the access token if
  // it expires. Reserved for future use, not currently used.
  string refresh_token = 3;

  // expiry is an optional expiration time of the access token.
  google.protobuf.Timestamp expiry = 4;
}

// TokenRequest is a data structure that contains all necessary request
// parameters for an OAuth 2.0 access token request (see
// https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3).
message TokenRequest {
  string grant_type = 1;

  string refresh_token = 2;

  string scope = 3;

  string client_id = 4;
}

message ListPublicKeysRequest {}
message ListPublicResponse { repeated JsonWebKey keys = 1; }

// JsonWebKey describes a JSON Web Key (JWK) according to RFC 7517 (see
// https://datatracker.ietf.org/doc/html/rfc7517) and RFC 7518
// (https://datatracker.ietf.org/doc/html/rfc7518).
message JsonWebKey {
  // kid is the Key ID Parameter (see
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.5).
  string kid = 1;

  // kty is the Key Type Parameter (see
  // https://datatracker.ietf.org/doc/html/rfc7517#section-4.1).
  string kty = 22;

  // crv is the Curve Parameter when using an elliptic curve public key in a JWK
  // (see https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.1).
  string crv = 10;

  // x is the X Coordinate Parameter when using an elliptic curve public key in
  // a JWK (see https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.2).
  string x = 11;

  // y is the Y Coordinate Parameter when using an elliptic curve public key in
  // a JWK (see https://datatracker.ietf.org/doc/html/rfc7518#section-6.2.1.3).
  string y = 12;
}