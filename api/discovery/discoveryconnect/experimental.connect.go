// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/discovery/experimental.proto

package discoveryconnect

import (
	discovery "clouditor.io/clouditor/v2/api/discovery"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExperimentalDiscoveryName is the fully-qualified name of the ExperimentalDiscovery service.
	ExperimentalDiscoveryName = "clouditor.discovery.v1experimental.ExperimentalDiscovery"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExperimentalDiscoveryUpdateResourceProcedure is the fully-qualified name of the
	// ExperimentalDiscovery's UpdateResource RPC.
	ExperimentalDiscoveryUpdateResourceProcedure = "/clouditor.discovery.v1experimental.ExperimentalDiscovery/UpdateResource"
	// ExperimentalDiscoveryListGraphEdgesProcedure is the fully-qualified name of the
	// ExperimentalDiscovery's ListGraphEdges RPC.
	ExperimentalDiscoveryListGraphEdgesProcedure = "/clouditor.discovery.v1experimental.ExperimentalDiscovery/ListGraphEdges"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	experimentalDiscoveryServiceDescriptor              = discovery.File_api_discovery_experimental_proto.Services().ByName("ExperimentalDiscovery")
	experimentalDiscoveryUpdateResourceMethodDescriptor = experimentalDiscoveryServiceDescriptor.Methods().ByName("UpdateResource")
	experimentalDiscoveryListGraphEdgesMethodDescriptor = experimentalDiscoveryServiceDescriptor.Methods().ByName("ListGraphEdges")
)

// ExperimentalDiscoveryClient is a client for the
// clouditor.discovery.v1experimental.ExperimentalDiscovery service.
type ExperimentalDiscoveryClient interface {
	// UpdateResource updates a resource (or creates it, if it does not exist).
	// This is used to give third-party tools the possibility to add something to
	// the resource graph.
	//
	// Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE
	UpdateResource(context.Context, *connect.Request[discovery.UpdateResourceRequest]) (*connect.Response[discovery.Resource], error)
	// ListGraphEdges returns the edges (relationship) between resources in our
	// resource graph.
	//
	// Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE
	ListGraphEdges(context.Context, *connect.Request[discovery.ListGraphEdgesRequest]) (*connect.Response[discovery.ListGraphEdgesResponse], error)
}

// NewExperimentalDiscoveryClient constructs a client for the
// clouditor.discovery.v1experimental.ExperimentalDiscovery service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExperimentalDiscoveryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExperimentalDiscoveryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &experimentalDiscoveryClient{
		updateResource: connect.NewClient[discovery.UpdateResourceRequest, discovery.Resource](
			httpClient,
			baseURL+ExperimentalDiscoveryUpdateResourceProcedure,
			connect.WithSchema(experimentalDiscoveryUpdateResourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGraphEdges: connect.NewClient[discovery.ListGraphEdgesRequest, discovery.ListGraphEdgesResponse](
			httpClient,
			baseURL+ExperimentalDiscoveryListGraphEdgesProcedure,
			connect.WithSchema(experimentalDiscoveryListGraphEdgesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// experimentalDiscoveryClient implements ExperimentalDiscoveryClient.
type experimentalDiscoveryClient struct {
	updateResource *connect.Client[discovery.UpdateResourceRequest, discovery.Resource]
	listGraphEdges *connect.Client[discovery.ListGraphEdgesRequest, discovery.ListGraphEdgesResponse]
}

// UpdateResource calls clouditor.discovery.v1experimental.ExperimentalDiscovery.UpdateResource.
func (c *experimentalDiscoveryClient) UpdateResource(ctx context.Context, req *connect.Request[discovery.UpdateResourceRequest]) (*connect.Response[discovery.Resource], error) {
	return c.updateResource.CallUnary(ctx, req)
}

// ListGraphEdges calls clouditor.discovery.v1experimental.ExperimentalDiscovery.ListGraphEdges.
func (c *experimentalDiscoveryClient) ListGraphEdges(ctx context.Context, req *connect.Request[discovery.ListGraphEdgesRequest]) (*connect.Response[discovery.ListGraphEdgesResponse], error) {
	return c.listGraphEdges.CallUnary(ctx, req)
}

// ExperimentalDiscoveryHandler is an implementation of the
// clouditor.discovery.v1experimental.ExperimentalDiscovery service.
type ExperimentalDiscoveryHandler interface {
	// UpdateResource updates a resource (or creates it, if it does not exist).
	// This is used to give third-party tools the possibility to add something to
	// the resource graph.
	//
	// Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE
	UpdateResource(context.Context, *connect.Request[discovery.UpdateResourceRequest]) (*connect.Response[discovery.Resource], error)
	// ListGraphEdges returns the edges (relationship) between resources in our
	// resource graph.
	//
	// Note: THIS API IS EXPERIMENTAL AND SUBJECT TO CHANGE
	ListGraphEdges(context.Context, *connect.Request[discovery.ListGraphEdgesRequest]) (*connect.Response[discovery.ListGraphEdgesResponse], error)
}

// NewExperimentalDiscoveryHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExperimentalDiscoveryHandler(svc ExperimentalDiscoveryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	experimentalDiscoveryUpdateResourceHandler := connect.NewUnaryHandler(
		ExperimentalDiscoveryUpdateResourceProcedure,
		svc.UpdateResource,
		connect.WithSchema(experimentalDiscoveryUpdateResourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	experimentalDiscoveryListGraphEdgesHandler := connect.NewUnaryHandler(
		ExperimentalDiscoveryListGraphEdgesProcedure,
		svc.ListGraphEdges,
		connect.WithSchema(experimentalDiscoveryListGraphEdgesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.discovery.v1experimental.ExperimentalDiscovery/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExperimentalDiscoveryUpdateResourceProcedure:
			experimentalDiscoveryUpdateResourceHandler.ServeHTTP(w, r)
		case ExperimentalDiscoveryListGraphEdgesProcedure:
			experimentalDiscoveryListGraphEdgesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExperimentalDiscoveryHandler returns CodeUnimplemented from all methods.
type UnimplementedExperimentalDiscoveryHandler struct{}

func (UnimplementedExperimentalDiscoveryHandler) UpdateResource(context.Context, *connect.Request[discovery.UpdateResourceRequest]) (*connect.Response[discovery.Resource], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.discovery.v1experimental.ExperimentalDiscovery.UpdateResource is not implemented"))
}

func (UnimplementedExperimentalDiscoveryHandler) ListGraphEdges(context.Context, *connect.Request[discovery.ListGraphEdgesRequest]) (*connect.Response[discovery.ListGraphEdgesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.discovery.v1experimental.ExperimentalDiscovery.ListGraphEdges is not implemented"))
}
