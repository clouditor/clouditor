// Copyright 2016-2022 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/discovery/discovery.proto

package discoveryconnect

import (
	discovery "clouditor.io/clouditor/v2/api/discovery"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiscoveryName is the fully-qualified name of the Discovery service.
	DiscoveryName = "clouditor.discovery.v1.Discovery"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiscoveryStartProcedure is the fully-qualified name of the Discovery's Start RPC.
	DiscoveryStartProcedure = "/clouditor.discovery.v1.Discovery/Start"
	// DiscoveryListResourcesProcedure is the fully-qualified name of the Discovery's ListResources RPC.
	DiscoveryListResourcesProcedure = "/clouditor.discovery.v1.Discovery/ListResources"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	discoveryServiceDescriptor             = discovery.File_api_discovery_discovery_proto.Services().ByName("Discovery")
	discoveryStartMethodDescriptor         = discoveryServiceDescriptor.Methods().ByName("Start")
	discoveryListResourcesMethodDescriptor = discoveryServiceDescriptor.Methods().ByName("ListResources")
)

// DiscoveryClient is a client for the clouditor.discovery.v1.Discovery service.
type DiscoveryClient interface {
	// Starts discovering the cloud resources, exposed as REST.
	Start(context.Context, *connect.Request[discovery.StartDiscoveryRequest]) (*connect.Response[discovery.StartDiscoveryResponse], error)
	// Lists all evidences collected in the last run, exposed as REST.
	ListResources(context.Context, *connect.Request[discovery.ListResourcesRequest]) (*connect.Response[discovery.ListResourcesResponse], error)
}

// NewDiscoveryClient constructs a client for the clouditor.discovery.v1.Discovery service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscoveryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiscoveryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discoveryClient{
		start: connect.NewClient[discovery.StartDiscoveryRequest, discovery.StartDiscoveryResponse](
			httpClient,
			baseURL+DiscoveryStartProcedure,
			connect.WithSchema(discoveryStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listResources: connect.NewClient[discovery.ListResourcesRequest, discovery.ListResourcesResponse](
			httpClient,
			baseURL+DiscoveryListResourcesProcedure,
			connect.WithSchema(discoveryListResourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// discoveryClient implements DiscoveryClient.
type discoveryClient struct {
	start         *connect.Client[discovery.StartDiscoveryRequest, discovery.StartDiscoveryResponse]
	listResources *connect.Client[discovery.ListResourcesRequest, discovery.ListResourcesResponse]
}

// Start calls clouditor.discovery.v1.Discovery.Start.
func (c *discoveryClient) Start(ctx context.Context, req *connect.Request[discovery.StartDiscoveryRequest]) (*connect.Response[discovery.StartDiscoveryResponse], error) {
	return c.start.CallUnary(ctx, req)
}

// ListResources calls clouditor.discovery.v1.Discovery.ListResources.
func (c *discoveryClient) ListResources(ctx context.Context, req *connect.Request[discovery.ListResourcesRequest]) (*connect.Response[discovery.ListResourcesResponse], error) {
	return c.listResources.CallUnary(ctx, req)
}

// DiscoveryHandler is an implementation of the clouditor.discovery.v1.Discovery service.
type DiscoveryHandler interface {
	// Starts discovering the cloud resources, exposed as REST.
	Start(context.Context, *connect.Request[discovery.StartDiscoveryRequest]) (*connect.Response[discovery.StartDiscoveryResponse], error)
	// Lists all evidences collected in the last run, exposed as REST.
	ListResources(context.Context, *connect.Request[discovery.ListResourcesRequest]) (*connect.Response[discovery.ListResourcesResponse], error)
}

// NewDiscoveryHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscoveryHandler(svc DiscoveryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	discoveryStartHandler := connect.NewUnaryHandler(
		DiscoveryStartProcedure,
		svc.Start,
		connect.WithSchema(discoveryStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	discoveryListResourcesHandler := connect.NewUnaryHandler(
		DiscoveryListResourcesProcedure,
		svc.ListResources,
		connect.WithSchema(discoveryListResourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.discovery.v1.Discovery/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscoveryStartProcedure:
			discoveryStartHandler.ServeHTTP(w, r)
		case DiscoveryListResourcesProcedure:
			discoveryListResourcesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscoveryHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscoveryHandler struct{}

func (UnimplementedDiscoveryHandler) Start(context.Context, *connect.Request[discovery.StartDiscoveryRequest]) (*connect.Response[discovery.StartDiscoveryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.discovery.v1.Discovery.Start is not implemented"))
}

func (UnimplementedDiscoveryHandler) ListResources(context.Context, *connect.Request[discovery.ListResourcesRequest]) (*connect.Response[discovery.ListResourcesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.discovery.v1.Discovery.ListResources is not implemented"))
}
