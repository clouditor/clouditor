// Auto-generated code by owl2proto (https://github.com/oxisto/owl2proto)

// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/ontology/ontology.proto

package ontology

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ABAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ABAC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ABAC) Reset() {
	*x = ABAC{}
	mi := &file_api_ontology_ontology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ABAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABAC) ProtoMessage() {}

func (x *ABAC) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABAC.ProtoReflect.Descriptor instead.
func (*ABAC) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{0}
}

// AccessRestriction is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type AccessRestriction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AccessRestriction_L3Firewall
	//	*AccessRestriction_WebApplicationFirewall
	Type          isAccessRestriction_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRestriction) Reset() {
	*x = AccessRestriction{}
	mi := &file_api_ontology_ontology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRestriction) ProtoMessage() {}

func (x *AccessRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRestriction.ProtoReflect.Descriptor instead.
func (*AccessRestriction) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{1}
}

func (x *AccessRestriction) GetType() isAccessRestriction_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AccessRestriction) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*AccessRestriction_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *AccessRestriction) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*AccessRestriction_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

type isAccessRestriction_Type interface {
	isAccessRestriction_Type()
}

type AccessRestriction_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type AccessRestriction_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

func (*AccessRestriction_L3Firewall) isAccessRestriction_Type() {}

func (*AccessRestriction_WebApplicationFirewall) isAccessRestriction_Type() {}

// Account is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This represents the cloud account as a whole, e.g., an Azure subscription.
type Account struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,12742,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,8955,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,1395,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5528,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6485,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18836,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14088,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,2374,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,8494,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15991,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,12102,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,11624,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_api_ontology_ontology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Account) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Account) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Account) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Account) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Account) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Account) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Account) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ActivityLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ActivityLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,18133,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,13626,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,10788,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,17680,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ActivityLogging) Reset() {
	*x = ActivityLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLogging) ProtoMessage() {}

func (x *ActivityLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLogging.ProtoReflect.Descriptor instead.
func (*ActivityLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{3}
}

func (x *ActivityLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ActivityLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ActivityLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ActivityLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

// AnomalyDetection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// Analyzes the activity of a NetworkService (which includes DatabaseServices).
// Scope contains the resource ID of the protected resource.
type AnomalyDetection struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Enabled            bool                   `protobuf:"varint,8852,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ApplicationLogging *ApplicationLogging    `protobuf:"bytes,11132,opt,name=application_logging,json=applicationLogging,proto3" json:"application_logging,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AnomalyDetection) Reset() {
	*x = AnomalyDetection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyDetection) ProtoMessage() {}

func (x *AnomalyDetection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyDetection.ProtoReflect.Descriptor instead.
func (*AnomalyDetection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{4}
}

func (x *AnomalyDetection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AnomalyDetection) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		return x.ApplicationLogging
	}
	return nil
}

// Application is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This encapsulates the whole (source) code of an application.
type Application struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreationTime        *timestamppb.Timestamp `protobuf:"bytes,15057,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description         string                 `protobuf:"bytes,2283,opt,name=description,proto3" json:"description,omitempty"`
	Id                  string                 `protobuf:"bytes,9299,opt,name=id,proto3" json:"id,omitempty"`
	Labels              map[string]string      `protobuf:"bytes,12760,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                string                 `protobuf:"bytes,1409,opt,name=name,proto3" json:"name,omitempty"`
	ProgrammingLanguage string                 `protobuf:"bytes,1665,opt,name=programming_language,json=programmingLanguage,proto3" json:"programming_language,omitempty"`
	ProgrammingVersion  string                 `protobuf:"bytes,3150,opt,name=programming_version,json=programmingVersion,proto3" json:"programming_version,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,18684,opt,name=raw,proto3" json:"raw,omitempty"`
	TranslationUnits []string          `protobuf:"bytes,9449,rep,name=translation_units,json=translationUnits,proto3" json:"translation_units,omitempty"`
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,1953,opt,name=automatic_updates,json=automaticUpdates,proto3" json:"automatic_updates,omitempty"`
	CodeModuleIds    []string          `protobuf:"bytes,15130,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string           `protobuf:"bytes,12633,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	ComputeId        *string           `protobuf:"bytes,8224,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	Functionalities  []*Functionality  `protobuf:"bytes,7253,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	LibraryIds       []string          `protobuf:"bytes,14815,rep,name=library_ids,json=libraryIds,proto3" json:"library_ids,omitempty"`
	ParentId         *string           `protobuf:"bytes,13276,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Application) Reset() {
	*x = Application{}
	mi := &file_api_ontology_ontology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{5}
}

func (x *Application) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetProgrammingLanguage() string {
	if x != nil {
		return x.ProgrammingLanguage
	}
	return ""
}

func (x *Application) GetProgrammingVersion() string {
	if x != nil {
		return x.ProgrammingVersion
	}
	return ""
}

func (x *Application) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Application) GetTranslationUnits() []string {
	if x != nil {
		return x.TranslationUnits
	}
	return nil
}

func (x *Application) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		return x.AutomaticUpdates
	}
	return nil
}

func (x *Application) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *Application) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *Application) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *Application) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *Application) GetLibraryIds() []string {
	if x != nil {
		return x.LibraryIds
	}
	return nil
}

func (x *Application) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// ApplicationLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ApplicationLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,13571,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,4205,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,6319,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,17870,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ApplicationLogging) Reset() {
	*x = ApplicationLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLogging) ProtoMessage() {}

func (x *ApplicationLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLogging.ProtoReflect.Descriptor instead.
func (*ApplicationLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ApplicationLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ApplicationLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ApplicationLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

// AtRestEncryption is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type AtRestEncryption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AtRestEncryption_CustomerKeyEncryption
	//	*AtRestEncryption_ManagedKeyEncryption
	Type          isAtRestEncryption_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AtRestEncryption) Reset() {
	*x = AtRestEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtRestEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtRestEncryption) ProtoMessage() {}

func (x *AtRestEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtRestEncryption.ProtoReflect.Descriptor instead.
func (*AtRestEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{7}
}

func (x *AtRestEncryption) GetType() isAtRestEncryption_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AtRestEncryption) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*AtRestEncryption_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *AtRestEncryption) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*AtRestEncryption_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

type isAtRestEncryption_Type interface {
	isAtRestEncryption_Type()
}

type AtRestEncryption_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type AtRestEncryption_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

func (*AtRestEncryption_CustomerKeyEncryption) isAtRestEncryption_Type() {}

func (*AtRestEncryption_ManagedKeyEncryption) isAtRestEncryption_Type() {}

// Attestation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Attestation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Attestation_LocalAttestation
	//	*Attestation_RemoteAttestation
	Type          isAttestation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{8}
}

func (x *Attestation) GetType() isAttestation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Attestation) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*Attestation_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *Attestation) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*Attestation_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

type isAttestation_Type interface {
	isAttestation_Type()
}

type Attestation_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type Attestation_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

func (*Attestation_LocalAttestation) isAttestation_Type() {}

func (*Attestation_RemoteAttestation) isAttestation_Type() {}

// Auditing is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Auditing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Auditing_AnomalyDetection
	//	*Auditing_ActivityLogging
	//	*Auditing_ApplicationLogging
	//	*Auditing_BootLogging
	//	*Auditing_OsLogging
	//	*Auditing_ResourceLogging
	//	*Auditing_MalwareProtection
	//	*Auditing_UsageStatistics
	Type          isAuditing_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auditing) Reset() {
	*x = Auditing{}
	mi := &file_api_ontology_ontology_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auditing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auditing) ProtoMessage() {}

func (x *Auditing) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auditing.ProtoReflect.Descriptor instead.
func (*Auditing) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{9}
}

func (x *Auditing) GetType() isAuditing_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Auditing) GetAnomalyDetection() *AnomalyDetection {
	if x != nil {
		if x, ok := x.Type.(*Auditing_AnomalyDetection); ok {
			return x.AnomalyDetection
		}
	}
	return nil
}

func (x *Auditing) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *Auditing) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *Auditing) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *Auditing) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *Auditing) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

func (x *Auditing) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		if x, ok := x.Type.(*Auditing_MalwareProtection); ok {
			return x.MalwareProtection
		}
	}
	return nil
}

func (x *Auditing) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		if x, ok := x.Type.(*Auditing_UsageStatistics); ok {
			return x.UsageStatistics
		}
	}
	return nil
}

type isAuditing_Type interface {
	isAuditing_Type()
}

type Auditing_AnomalyDetection struct {
	AnomalyDetection *AnomalyDetection `protobuf:"bytes,4728,opt,name=anomaly_detection,json=anomalyDetection,proto3,oneof"`
}

type Auditing_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type Auditing_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type Auditing_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type Auditing_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type Auditing_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

type Auditing_MalwareProtection struct {
	MalwareProtection *MalwareProtection `protobuf:"bytes,7265,opt,name=malware_protection,json=malwareProtection,proto3,oneof"`
}

type Auditing_UsageStatistics struct {
	UsageStatistics *UsageStatistics `protobuf:"bytes,15242,opt,name=usage_statistics,json=usageStatistics,proto3,oneof"`
}

func (*Auditing_AnomalyDetection) isAuditing_Type() {}

func (*Auditing_ActivityLogging) isAuditing_Type() {}

func (*Auditing_ApplicationLogging) isAuditing_Type() {}

func (*Auditing_BootLogging) isAuditing_Type() {}

func (*Auditing_OsLogging) isAuditing_Type() {}

func (*Auditing_ResourceLogging) isAuditing_Type() {}

func (*Auditing_MalwareProtection) isAuditing_Type() {}

func (*Auditing_UsageStatistics) isAuditing_Type() {}

// Authenticity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Authenticity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Authenticity_CertificateBasedAuthentication
	//	*Authenticity_TokenBasedAuthentication
	//	*Authenticity_MultiFactorAuthentiation
	//	*Authenticity_NoAuthentication
	//	*Authenticity_OtpBasedAuthentication
	//	*Authenticity_PasswordBasedAuthentication
	//	*Authenticity_SingleSignOn
	Type          isAuthenticity_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticity) Reset() {
	*x = Authenticity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticity) ProtoMessage() {}

func (x *Authenticity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticity.ProtoReflect.Descriptor instead.
func (*Authenticity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{10}
}

func (x *Authenticity) GetType() isAuthenticity_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Authenticity) GetCertificateBasedAuthentication() *CertificateBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_CertificateBasedAuthentication); ok {
			return x.CertificateBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetTokenBasedAuthentication() *TokenBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_TokenBasedAuthentication); ok {
			return x.TokenBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetMultiFactorAuthentiation() *MultiFactorAuthentiation {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_MultiFactorAuthentiation); ok {
			return x.MultiFactorAuthentiation
		}
	}
	return nil
}

func (x *Authenticity) GetNoAuthentication() *NoAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_NoAuthentication); ok {
			return x.NoAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetOtpBasedAuthentication() *OTPBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_OtpBasedAuthentication); ok {
			return x.OtpBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetPasswordBasedAuthentication() *PasswordBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_PasswordBasedAuthentication); ok {
			return x.PasswordBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetSingleSignOn() *SingleSignOn {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_SingleSignOn); ok {
			return x.SingleSignOn
		}
	}
	return nil
}

type isAuthenticity_Type interface {
	isAuthenticity_Type()
}

type Authenticity_CertificateBasedAuthentication struct {
	CertificateBasedAuthentication *CertificateBasedAuthentication `protobuf:"bytes,560,opt,name=certificate_based_authentication,json=certificateBasedAuthentication,proto3,oneof"`
}

type Authenticity_TokenBasedAuthentication struct {
	TokenBasedAuthentication *TokenBasedAuthentication `protobuf:"bytes,3684,opt,name=token_based_authentication,json=tokenBasedAuthentication,proto3,oneof"`
}

type Authenticity_MultiFactorAuthentiation struct {
	MultiFactorAuthentiation *MultiFactorAuthentiation `protobuf:"bytes,13104,opt,name=multi_factor_authentiation,json=multiFactorAuthentiation,proto3,oneof"`
}

type Authenticity_NoAuthentication struct {
	NoAuthentication *NoAuthentication `protobuf:"bytes,17718,opt,name=no_authentication,json=noAuthentication,proto3,oneof"`
}

type Authenticity_OtpBasedAuthentication struct {
	OtpBasedAuthentication *OTPBasedAuthentication `protobuf:"bytes,18743,opt,name=otp_based_authentication,json=otpBasedAuthentication,proto3,oneof"`
}

type Authenticity_PasswordBasedAuthentication struct {
	PasswordBasedAuthentication *PasswordBasedAuthentication `protobuf:"bytes,16941,opt,name=password_based_authentication,json=passwordBasedAuthentication,proto3,oneof"`
}

type Authenticity_SingleSignOn struct {
	SingleSignOn *SingleSignOn `protobuf:"bytes,9281,opt,name=single_sign_on,json=singleSignOn,proto3,oneof"`
}

func (*Authenticity_CertificateBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_TokenBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_MultiFactorAuthentiation) isAuthenticity_Type() {}

func (*Authenticity_NoAuthentication) isAuthenticity_Type() {}

func (*Authenticity_OtpBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_PasswordBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_SingleSignOn) isAuthenticity_Type() {}

// Authorization is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Authorization_Abac
	//	*Authorization_L3Firewall
	//	*Authorization_WebApplicationFirewall
	//	*Authorization_Rbac
	Type          isAuthorization_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	mi := &file_api_ontology_ontology_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{11}
}

func (x *Authorization) GetType() isAuthorization_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Authorization) GetAbac() *ABAC {
	if x != nil {
		if x, ok := x.Type.(*Authorization_Abac); ok {
			return x.Abac
		}
	}
	return nil
}

func (x *Authorization) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*Authorization_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *Authorization) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*Authorization_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

func (x *Authorization) GetRbac() *RBAC {
	if x != nil {
		if x, ok := x.Type.(*Authorization_Rbac); ok {
			return x.Rbac
		}
	}
	return nil
}

type isAuthorization_Type interface {
	isAuthorization_Type()
}

type Authorization_Abac struct {
	Abac *ABAC `protobuf:"bytes,14694,opt,name=abac,proto3,oneof"`
}

type Authorization_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type Authorization_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

type Authorization_Rbac struct {
	Rbac *RBAC `protobuf:"bytes,18783,opt,name=rbac,proto3,oneof"`
}

func (*Authorization_Abac) isAuthorization_Type() {}

func (*Authorization_L3Firewall) isAuthorization_Type() {}

func (*Authorization_WebApplicationFirewall) isAuthorization_Type() {}

func (*Authorization_Rbac) isAuthorization_Type() {}

// AutomaticUpdates is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This feature is, e.g., available on some VM services to automatically update their software. It ensures that a resource is protected from tampering with its state.
type AutomaticUpdates struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Enabled bool                   `protobuf:"varint,2283,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The interval refers to the update interval in days.
	Interval      *durationpb.Duration `protobuf:"bytes,2309,opt,name=interval,proto3" json:"interval,omitempty"`
	SecurityOnly  bool                 `protobuf:"varint,1034,opt,name=security_only,json=securityOnly,proto3" json:"security_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutomaticUpdates) Reset() {
	*x = AutomaticUpdates{}
	mi := &file_api_ontology_ontology_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomaticUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomaticUpdates) ProtoMessage() {}

func (x *AutomaticUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomaticUpdates.ProtoReflect.Descriptor instead.
func (*AutomaticUpdates) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{12}
}

func (x *AutomaticUpdates) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AutomaticUpdates) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AutomaticUpdates) GetSecurityOnly() bool {
	if x != nil {
		return x.SecurityOnly
	}
	return false
}

// Availability is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Availability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Availability_Backup
	//	*Availability_DDoSProtection
	//	*Availability_GeoLocation
	//	*Availability_GeoRedundancy
	//	*Availability_LocalRedundancy
	//	*Availability_ZoneRedundancy
	Type          isAvailability_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Availability) Reset() {
	*x = Availability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{13}
}

func (x *Availability) GetType() isAvailability_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Availability) GetBackup() *Backup {
	if x != nil {
		if x, ok := x.Type.(*Availability_Backup); ok {
			return x.Backup
		}
	}
	return nil
}

func (x *Availability) GetDDoSProtection() *DDoSProtection {
	if x != nil {
		if x, ok := x.Type.(*Availability_DDoSProtection); ok {
			return x.DDoSProtection
		}
	}
	return nil
}

func (x *Availability) GetGeoLocation() *GeoLocation {
	if x != nil {
		if x, ok := x.Type.(*Availability_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *Availability) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *Availability) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *Availability) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

type isAvailability_Type interface {
	isAvailability_Type()
}

type Availability_Backup struct {
	Backup *Backup `protobuf:"bytes,16413,opt,name=backup,proto3,oneof"`
}

type Availability_DDoSProtection struct {
	DDoSProtection *DDoSProtection `protobuf:"bytes,16707,opt,name=d_do_s_protection,json=dDoSProtection,proto3,oneof"`
}

type Availability_GeoLocation struct {
	GeoLocation *GeoLocation `protobuf:"bytes,10970,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type Availability_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type Availability_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type Availability_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

func (*Availability_Backup) isAvailability_Type() {}

func (*Availability_DDoSProtection) isAvailability_Type() {}

func (*Availability_GeoLocation) isAvailability_Type() {}

func (*Availability_GeoRedundancy) isAvailability_Type() {}

func (*Availability_LocalRedundancy) isAvailability_Type() {}

func (*Availability_ZoneRedundancy) isAvailability_Type() {}

// AwarenessTraining is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type AwarenessTraining struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AnnualUpdateCompleted bool                   `protobuf:"varint,15890,opt,name=annual_update_completed,json=annualUpdateCompleted,proto3" json:"annual_update_completed,omitempty"`
	CreationTime          *timestamppb.Timestamp `protobuf:"bytes,15810,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description           string                 `protobuf:"bytes,345,opt,name=description,proto3" json:"description,omitempty"`
	Id                    string                 `protobuf:"bytes,6931,opt,name=id,proto3" json:"id,omitempty"`
	Labels                map[string]string      `protobuf:"bytes,4947,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                  string                 `protobuf:"bytes,18874,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                             string  `protobuf:"bytes,8066,opt,name=raw,proto3" json:"raw,omitempty"`
	SuccessfullyCompletedPercentage bool    `protobuf:"varint,3826,opt,name=successfully_completed_percentage,json=successfullyCompletedPercentage,proto3" json:"successfully_completed_percentage,omitempty"`
	ParentId                        *string `protobuf:"bytes,6137,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *AwarenessTraining) Reset() {
	*x = AwarenessTraining{}
	mi := &file_api_ontology_ontology_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwarenessTraining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwarenessTraining) ProtoMessage() {}

func (x *AwarenessTraining) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwarenessTraining.ProtoReflect.Descriptor instead.
func (*AwarenessTraining) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{14}
}

func (x *AwarenessTraining) GetAnnualUpdateCompleted() bool {
	if x != nil {
		return x.AnnualUpdateCompleted
	}
	return false
}

func (x *AwarenessTraining) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *AwarenessTraining) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AwarenessTraining) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AwarenessTraining) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AwarenessTraining) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwarenessTraining) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *AwarenessTraining) GetSuccessfullyCompletedPercentage() bool {
	if x != nil {
		return x.SuccessfullyCompletedPercentage
	}
	return false
}

func (x *AwarenessTraining) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// Backup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// RetentionPeriod in hours
type Backup struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Enabled bool                   `protobuf:"varint,2815,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The interval refers to the update interval in days.
	Interval            *durationpb.Duration `protobuf:"bytes,7186,opt,name=interval,proto3" json:"interval,omitempty"`
	RetentionPeriod     *durationpb.Duration `protobuf:"bytes,6795,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	StorageId           *string              `protobuf:"bytes,7061,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
	TransportEncryption *TransportEncryption `protobuf:"bytes,1921,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Backup) Reset() {
	*x = Backup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{15}
}

func (x *Backup) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Backup) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Backup) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *Backup) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

func (x *Backup) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// BlockStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type BlockStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11167,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2163,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7003,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15007,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15784,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13869,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,11057,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging  *ActivityLogging  `protobuf:"bytes,4784,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,4444,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,4533,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,3522,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,9844,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Loggings         []*Logging        `protobuf:"bytes,13592,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,14466,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,8468,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,12392,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,17806,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BlockStorage) Reset() {
	*x = BlockStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStorage) ProtoMessage() {}

func (x *BlockStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStorage.ProtoReflect.Descriptor instead.
func (*BlockStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{16}
}

func (x *BlockStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *BlockStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BlockStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *BlockStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BlockStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *BlockStorage) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *BlockStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *BlockStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *BlockStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *BlockStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *BlockStorage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *BlockStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *BlockStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *BlockStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *BlockStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// BootLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type BootLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,17321,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,9135,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,2338,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,3133,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BootLogging) Reset() {
	*x = BootLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootLogging) ProtoMessage() {}

func (x *BootLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootLogging.ProtoReflect.Descriptor instead.
func (*BootLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{17}
}

func (x *BootLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BootLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *BootLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *BootLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

// CICDService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type CICDService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CICDService_Job
	//	*CICDService_Workflow
	Type          isCICDService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CICDService) Reset() {
	*x = CICDService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CICDService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICDService) ProtoMessage() {}

func (x *CICDService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICDService.ProtoReflect.Descriptor instead.
func (*CICDService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{18}
}

func (x *CICDService) GetType() isCICDService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CICDService) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*CICDService_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *CICDService) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*CICDService_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

type isCICDService_Type interface {
	isCICDService_Type()
}

type CICDService_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type CICDService_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

func (*CICDService_Job) isCICDService_Type() {}

func (*CICDService_Workflow) isCICDService_Type() {}

// Certificate is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Certificate struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,18284,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10382,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,11036,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,17025,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,1585,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15261,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,16025,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1369,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18981,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,11770,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,7199,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,12402,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,8357,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Loggings         []*Logging       `protobuf:"bytes,13577,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,7304,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,10685,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,11629,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_api_ontology_ontology_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{19}
}

func (x *Certificate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Certificate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Certificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Certificate) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Certificate) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Certificate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Certificate) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Certificate) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Certificate) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Certificate) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Certificate) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Certificate) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Certificate) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// CertificateBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CertificateBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,14958,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,11983,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CertificateBasedAuthentication) Reset() {
	*x = CertificateBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBasedAuthentication) ProtoMessage() {}

func (x *CertificateBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBasedAuthentication.ProtoReflect.Descriptor instead.
func (*CertificateBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{20}
}

func (x *CertificateBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *CertificateBasedAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// CertificationTarget is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CertificationTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificationTarget) Reset() {
	*x = CertificationTarget{}
	mi := &file_api_ontology_ontology_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificationTarget) ProtoMessage() {}

func (x *CertificationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificationTarget.ProtoReflect.Descriptor instead.
func (*CertificationTarget) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{21}
}

// CipherSuite is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CipherSuite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// for example: RSA, ECDSA
	AuthenticationMechanism string `protobuf:"bytes,3667,opt,name=authentication_mechanism,json=authenticationMechanism,proto3" json:"authentication_mechanism,omitempty"`
	KeyExchangeAlgorithm    string `protobuf:"bytes,14920,opt,name=key_exchange_algorithm,json=keyExchangeAlgorithm,proto3" json:"key_exchange_algorithm,omitempty"`
	// naming schema: SHA-256
	MacAlgorithm string `protobuf:"bytes,2344,opt,name=mac_algorithm,json=macAlgorithm,proto3" json:"mac_algorithm,omitempty"`
	// naming schema: AES-128-GCM
	SessionCipher string `protobuf:"bytes,5742,opt,name=session_cipher,json=sessionCipher,proto3" json:"session_cipher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CipherSuite) Reset() {
	*x = CipherSuite{}
	mi := &file_api_ontology_ontology_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CipherSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipherSuite) ProtoMessage() {}

func (x *CipherSuite) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipherSuite.ProtoReflect.Descriptor instead.
func (*CipherSuite) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{22}
}

func (x *CipherSuite) GetAuthenticationMechanism() string {
	if x != nil {
		return x.AuthenticationMechanism
	}
	return ""
}

func (x *CipherSuite) GetKeyExchangeAlgorithm() string {
	if x != nil {
		return x.KeyExchangeAlgorithm
	}
	return ""
}

func (x *CipherSuite) GetMacAlgorithm() string {
	if x != nil {
		return x.MacAlgorithm
	}
	return ""
}

func (x *CipherSuite) GetSessionCipher() string {
	if x != nil {
		return x.SessionCipher
	}
	return ""
}

// Infrastructure is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Infrastructure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Infrastructure_Account
	//	*Infrastructure_Job
	//	*Infrastructure_Workflow
	//	*Infrastructure_CodeRepository
	//	*Infrastructure_Container
	//	*Infrastructure_Function
	//	*Infrastructure_VirtualMachine
	//	*Infrastructure_ContainerOrchestration
	//	*Infrastructure_ContainerRegistry
	//	*Infrastructure_Certificate
	//	*Infrastructure_Key
	//	*Infrastructure_Secret
	//	*Infrastructure_Identity
	//	*Infrastructure_RoleAssignment
	//	*Infrastructure_ContainerImage
	//	*Infrastructure_VmImage
	//	*Infrastructure_DeviceProvisioningService
	//	*Infrastructure_MessagingHub
	//	*Infrastructure_KeyVault
	//	*Infrastructure_NetworkInterface
	//	*Infrastructure_NetworkSecurityGroup
	//	*Infrastructure_FunctionService
	//	*Infrastructure_GenericNetworkService
	//	*Infrastructure_LoadBalancer
	//	*Infrastructure_LoggingService
	//	*Infrastructure_MachineLearningService
	//	*Infrastructure_SecurityAdvisoryService
	//	*Infrastructure_DocumentDatabaseService
	//	*Infrastructure_KeyValueDatabaseService
	//	*Infrastructure_MultiModalDatabaseService
	//	*Infrastructure_RelationalDatabaseService
	//	*Infrastructure_FileStorageService
	//	*Infrastructure_ObjectStorageService
	//	*Infrastructure_VirtualNetwork
	//	*Infrastructure_VirtualSubNetwork
	//	*Infrastructure_PasswordPolicy
	//	*Infrastructure_ResourceGroup
	//	*Infrastructure_BlockStorage
	//	*Infrastructure_DatabaseStorage
	//	*Infrastructure_FileStorage
	//	*Infrastructure_ObjectStorage
	Type          isInfrastructure_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Infrastructure) Reset() {
	*x = Infrastructure{}
	mi := &file_api_ontology_ontology_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Infrastructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infrastructure) ProtoMessage() {}

func (x *Infrastructure) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infrastructure.ProtoReflect.Descriptor instead.
func (*Infrastructure) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{23}
}

func (x *Infrastructure) GetType() isInfrastructure_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Infrastructure) GetAccount() *Account {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Account); ok {
			return x.Account
		}
	}
	return nil
}

func (x *Infrastructure) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *Infrastructure) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

func (x *Infrastructure) GetCodeRepository() *CodeRepository {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_CodeRepository); ok {
			return x.CodeRepository
		}
	}
	return nil
}

func (x *Infrastructure) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Infrastructure) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerOrchestration() *ContainerOrchestration {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerOrchestration); ok {
			return x.ContainerOrchestration
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerRegistry() *ContainerRegistry {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerRegistry); ok {
			return x.ContainerRegistry
		}
	}
	return nil
}

func (x *Infrastructure) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Infrastructure) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Infrastructure) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

func (x *Infrastructure) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Infrastructure) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Infrastructure) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

func (x *Infrastructure) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *Infrastructure) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

func (x *Infrastructure) GetKeyVault() *KeyVault {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_KeyVault); ok {
			return x.KeyVault
		}
	}
	return nil
}

func (x *Infrastructure) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Infrastructure) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Infrastructure) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Infrastructure) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Infrastructure) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Infrastructure) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Infrastructure) GetMachineLearningService() *MachineLearningService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MachineLearningService); ok {
			return x.MachineLearningService
		}
	}
	return nil
}

func (x *Infrastructure) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Infrastructure) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Infrastructure) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

func (x *Infrastructure) GetPasswordPolicy() *PasswordPolicy {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_PasswordPolicy); ok {
			return x.PasswordPolicy
		}
	}
	return nil
}

func (x *Infrastructure) GetResourceGroup() *ResourceGroup {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ResourceGroup); ok {
			return x.ResourceGroup
		}
	}
	return nil
}

func (x *Infrastructure) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

type isInfrastructure_Type interface {
	isInfrastructure_Type()
}

type Infrastructure_Account struct {
	Account *Account `protobuf:"bytes,11456,opt,name=account,proto3,oneof"`
}

type Infrastructure_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type Infrastructure_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

type Infrastructure_CodeRepository struct {
	CodeRepository *CodeRepository `protobuf:"bytes,3431,opt,name=code_repository,json=codeRepository,proto3,oneof"`
}

type Infrastructure_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Infrastructure_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Infrastructure_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

type Infrastructure_ContainerOrchestration struct {
	ContainerOrchestration *ContainerOrchestration `protobuf:"bytes,3211,opt,name=container_orchestration,json=containerOrchestration,proto3,oneof"`
}

type Infrastructure_ContainerRegistry struct {
	ContainerRegistry *ContainerRegistry `protobuf:"bytes,8326,opt,name=container_registry,json=containerRegistry,proto3,oneof"`
}

type Infrastructure_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Infrastructure_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Infrastructure_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

type Infrastructure_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Infrastructure_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type Infrastructure_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Infrastructure_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Infrastructure_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type Infrastructure_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

type Infrastructure_KeyVault struct {
	KeyVault *KeyVault `protobuf:"bytes,18627,opt,name=key_vault,json=keyVault,proto3,oneof"`
}

type Infrastructure_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Infrastructure_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Infrastructure_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Infrastructure_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Infrastructure_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Infrastructure_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Infrastructure_MachineLearningService struct {
	MachineLearningService *MachineLearningService `protobuf:"bytes,16966,opt,name=machine_learning_service,json=machineLearningService,proto3,oneof"`
}

type Infrastructure_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Infrastructure_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Infrastructure_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Infrastructure_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Infrastructure_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Infrastructure_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Infrastructure_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Infrastructure_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Infrastructure_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

type Infrastructure_PasswordPolicy struct {
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,970,opt,name=password_policy,json=passwordPolicy,proto3,oneof"`
}

type Infrastructure_ResourceGroup struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,494,opt,name=resource_group,json=resourceGroup,proto3,oneof"`
}

type Infrastructure_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Infrastructure_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Infrastructure_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Infrastructure_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

func (*Infrastructure_Account) isInfrastructure_Type() {}

func (*Infrastructure_Job) isInfrastructure_Type() {}

func (*Infrastructure_Workflow) isInfrastructure_Type() {}

func (*Infrastructure_CodeRepository) isInfrastructure_Type() {}

func (*Infrastructure_Container) isInfrastructure_Type() {}

func (*Infrastructure_Function) isInfrastructure_Type() {}

func (*Infrastructure_VirtualMachine) isInfrastructure_Type() {}

func (*Infrastructure_ContainerOrchestration) isInfrastructure_Type() {}

func (*Infrastructure_ContainerRegistry) isInfrastructure_Type() {}

func (*Infrastructure_Certificate) isInfrastructure_Type() {}

func (*Infrastructure_Key) isInfrastructure_Type() {}

func (*Infrastructure_Secret) isInfrastructure_Type() {}

func (*Infrastructure_Identity) isInfrastructure_Type() {}

func (*Infrastructure_RoleAssignment) isInfrastructure_Type() {}

func (*Infrastructure_ContainerImage) isInfrastructure_Type() {}

func (*Infrastructure_VmImage) isInfrastructure_Type() {}

func (*Infrastructure_DeviceProvisioningService) isInfrastructure_Type() {}

func (*Infrastructure_MessagingHub) isInfrastructure_Type() {}

func (*Infrastructure_KeyVault) isInfrastructure_Type() {}

func (*Infrastructure_NetworkInterface) isInfrastructure_Type() {}

func (*Infrastructure_NetworkSecurityGroup) isInfrastructure_Type() {}

func (*Infrastructure_FunctionService) isInfrastructure_Type() {}

func (*Infrastructure_GenericNetworkService) isInfrastructure_Type() {}

func (*Infrastructure_LoadBalancer) isInfrastructure_Type() {}

func (*Infrastructure_LoggingService) isInfrastructure_Type() {}

func (*Infrastructure_MachineLearningService) isInfrastructure_Type() {}

func (*Infrastructure_SecurityAdvisoryService) isInfrastructure_Type() {}

func (*Infrastructure_DocumentDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_KeyValueDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_MultiModalDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_RelationalDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_FileStorageService) isInfrastructure_Type() {}

func (*Infrastructure_ObjectStorageService) isInfrastructure_Type() {}

func (*Infrastructure_VirtualNetwork) isInfrastructure_Type() {}

func (*Infrastructure_VirtualSubNetwork) isInfrastructure_Type() {}

func (*Infrastructure_PasswordPolicy) isInfrastructure_Type() {}

func (*Infrastructure_ResourceGroup) isInfrastructure_Type() {}

func (*Infrastructure_BlockStorage) isInfrastructure_Type() {}

func (*Infrastructure_DatabaseStorage) isInfrastructure_Type() {}

func (*Infrastructure_FileStorage) isInfrastructure_Type() {}

func (*Infrastructure_ObjectStorage) isInfrastructure_Type() {}

// CloudSDK is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CloudSDK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSDK) Reset() {
	*x = CloudSDK{}
	mi := &file_api_ontology_ontology_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSDK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSDK) ProtoMessage() {}

func (x *CloudSDK) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSDK.ProtoReflect.Descriptor instead.
func (*CloudSDK) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{24}
}

// CodeRegion is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CodeRegion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,11271,opt,name=code,proto3" json:"code,omitempty"`
	EndColumn     int32                  `protobuf:"varint,18978,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
	EndLine       int32                  `protobuf:"varint,7512,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	File          string                 `protobuf:"bytes,1260,opt,name=file,proto3" json:"file,omitempty"`
	StartColumn   int32                  `protobuf:"varint,5651,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	StartLine     int32                  `protobuf:"varint,11889,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeRegion) Reset() {
	*x = CodeRegion{}
	mi := &file_api_ontology_ontology_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeRegion) ProtoMessage() {}

func (x *CodeRegion) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeRegion.ProtoReflect.Descriptor instead.
func (*CodeRegion) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{25}
}

func (x *CodeRegion) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CodeRegion) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *CodeRegion) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *CodeRegion) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CodeRegion) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *CodeRegion) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

// CodeRepository is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CodeRepository struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14345,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,5754,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,1358,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,8874,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6055,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12766,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,15664,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,3636,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,10882,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2093,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,8043,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,14597,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CodeRepository) Reset() {
	*x = CodeRepository{}
	mi := &file_api_ontology_ontology_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeRepository) ProtoMessage() {}

func (x *CodeRepository) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeRepository.ProtoReflect.Descriptor instead.
func (*CodeRepository) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{26}
}

func (x *CodeRepository) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *CodeRepository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CodeRepository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeRepository) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *CodeRepository) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CodeRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeRepository) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *CodeRepository) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *CodeRepository) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *CodeRepository) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *CodeRepository) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *CodeRepository) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Component is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Component_Application
	//	*Component_Library
	Type          isComponent_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Component) Reset() {
	*x = Component{}
	mi := &file_api_ontology_ontology_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{27}
}

func (x *Component) GetType() isComponent_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Component) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Component_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Component) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Component_Library); ok {
			return x.Library
		}
	}
	return nil
}

type isComponent_Type interface {
	isComponent_Type()
}

type Component_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Component_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

func (*Component_Application) isComponent_Type() {}

func (*Component_Library) isComponent_Type() {}

// Compute is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Compute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Compute_Container
	//	*Compute_Function
	//	*Compute_VirtualMachine
	Type          isCompute_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compute) Reset() {
	*x = Compute{}
	mi := &file_api_ontology_ontology_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compute) ProtoMessage() {}

func (x *Compute) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compute.ProtoReflect.Descriptor instead.
func (*Compute) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{28}
}

func (x *Compute) GetType() isCompute_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Compute) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Compute_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Compute) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Compute_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Compute) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Compute_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

type isCompute_Type interface {
	isCompute_Type()
}

type Compute_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Compute_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Compute_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

func (*Compute_Container) isCompute_Type() {}

func (*Compute_Function) isCompute_Type() {}

func (*Compute_VirtualMachine) isCompute_Type() {}

// Confidentiality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Confidentiality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Confidentiality_CustomerKeyEncryption
	//	*Confidentiality_ManagedKeyEncryption
	//	*Confidentiality_EncryptionInUse
	//	*Confidentiality_TransportEncryption
	Type          isConfidentiality_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Confidentiality) Reset() {
	*x = Confidentiality{}
	mi := &file_api_ontology_ontology_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Confidentiality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confidentiality) ProtoMessage() {}

func (x *Confidentiality) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confidentiality.ProtoReflect.Descriptor instead.
func (*Confidentiality) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{29}
}

func (x *Confidentiality) GetType() isConfidentiality_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Confidentiality) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *Confidentiality) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

func (x *Confidentiality) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_EncryptionInUse); ok {
			return x.EncryptionInUse
		}
	}
	return nil
}

func (x *Confidentiality) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_TransportEncryption); ok {
			return x.TransportEncryption
		}
	}
	return nil
}

type isConfidentiality_Type interface {
	isConfidentiality_Type()
}

type Confidentiality_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type Confidentiality_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

type Confidentiality_EncryptionInUse struct {
	EncryptionInUse *EncryptionInUse `protobuf:"bytes,15775,opt,name=encryption_in_use,json=encryptionInUse,proto3,oneof"`
}

type Confidentiality_TransportEncryption struct {
	TransportEncryption *TransportEncryption `protobuf:"bytes,15929,opt,name=transport_encryption,json=transportEncryption,proto3,oneof"`
}

func (*Confidentiality_CustomerKeyEncryption) isConfidentiality_Type() {}

func (*Confidentiality_ManagedKeyEncryption) isConfidentiality_Type() {}

func (*Confidentiality_EncryptionInUse) isConfidentiality_Type() {}

func (*Confidentiality_TransportEncryption) isConfidentiality_Type() {}

// Container is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Container struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,9429,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12773,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,903,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,10112,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,13214,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,736,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,18367,opt,name=raw,proto3" json:"raw,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,14323,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,1707,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	ImageId             *string            `protobuf:"bytes,9825,opt,name=image_id,json=imageId,proto3,oneof" json:"image_id,omitempty"`
	Loggings            []*Logging         `protobuf:"bytes,10134,rep,name=loggings,proto3" json:"loggings,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,250,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,15735,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,15151,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,16383,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,11967,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,14019,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_api_ontology_ontology_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{30}
}

func (x *Container) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Container) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Container) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Container) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *Container) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Container) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *Container) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Container) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *Container) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Container) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *Container) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Container) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *Container) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerImage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11155,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10874,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6384,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,13186,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18019,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2181,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10543,opt,name=raw,proto3" json:"raw,omitempty"`
	ApplicationId   *string          `protobuf:"bytes,9751,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,13766,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,5622,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,10648,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14165,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6924,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{31}
}

func (x *ContainerImage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerImage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerImage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerImage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerImage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerImage) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *ContainerImage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerImage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ContainerImage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerImage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerImage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerOrchestration is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerOrchestration struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10116,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,259,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,12671,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2619,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15294,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ManagementUrl              string                 `protobuf:"bytes,1007,opt,name=management_url,json=managementUrl,proto3" json:"management_url,omitempty"`
	Name                       string                 `protobuf:"bytes,18187,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,17471,opt,name=raw,proto3" json:"raw,omitempty"`
	ContainerIds    []string         `protobuf:"bytes,12733,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,13354,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,8875,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2264,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,16309,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging *ResourceLogging `protobuf:"bytes,13646,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6319,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerOrchestration) Reset() {
	*x = ContainerOrchestration{}
	mi := &file_api_ontology_ontology_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerOrchestration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerOrchestration) ProtoMessage() {}

func (x *ContainerOrchestration) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerOrchestration.ProtoReflect.Descriptor instead.
func (*ContainerOrchestration) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{32}
}

func (x *ContainerOrchestration) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerOrchestration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerOrchestration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerOrchestration) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerOrchestration) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerOrchestration) GetManagementUrl() string {
	if x != nil {
		return x.ManagementUrl
	}
	return ""
}

func (x *ContainerOrchestration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerOrchestration) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerOrchestration) GetContainerIds() []string {
	if x != nil {
		return x.ContainerIds
	}
	return nil
}

func (x *ContainerOrchestration) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerOrchestration) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ContainerOrchestration) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerOrchestration) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerOrchestration) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *ContainerOrchestration) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerRegistry is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerRegistry struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4243,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17637,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17713,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,12721,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2453,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1523,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,5030,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,15152,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,6570,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18999,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2537,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,17864,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerRegistry) Reset() {
	*x = ContainerRegistry{}
	mi := &file_api_ontology_ontology_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRegistry) ProtoMessage() {}

func (x *ContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRegistry.ProtoReflect.Descriptor instead.
func (*ContainerRegistry) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerRegistry) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerRegistry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerRegistry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerRegistry) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerRegistry) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerRegistry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerRegistry) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerRegistry) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerRegistry) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ContainerRegistry) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerRegistry) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerRegistry) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Core is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Core struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Core_CertificationTarget
	//	*Core_Evidence
	//	*Core_CloudSdk
	//	*Core_HttpClientLibrary
	//	*Core_HttpServer
	//	*Core_Logger
	//	*Core_ResourceType
	//	*Core_Tool
	Type          isCore_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Core) Reset() {
	*x = Core{}
	mi := &file_api_ontology_ontology_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Core) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Core) ProtoMessage() {}

func (x *Core) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Core.ProtoReflect.Descriptor instead.
func (*Core) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{34}
}

func (x *Core) GetType() isCore_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Core) GetCertificationTarget() *CertificationTarget {
	if x != nil {
		if x, ok := x.Type.(*Core_CertificationTarget); ok {
			return x.CertificationTarget
		}
	}
	return nil
}

func (x *Core) GetEvidence() *Evidence {
	if x != nil {
		if x, ok := x.Type.(*Core_Evidence); ok {
			return x.Evidence
		}
	}
	return nil
}

func (x *Core) GetCloudSdk() *CloudSDK {
	if x != nil {
		if x, ok := x.Type.(*Core_CloudSdk); ok {
			return x.CloudSdk
		}
	}
	return nil
}

func (x *Core) GetHttpClientLibrary() *HttpClientLibrary {
	if x != nil {
		if x, ok := x.Type.(*Core_HttpClientLibrary); ok {
			return x.HttpClientLibrary
		}
	}
	return nil
}

func (x *Core) GetHttpServer() *HttpServer {
	if x != nil {
		if x, ok := x.Type.(*Core_HttpServer); ok {
			return x.HttpServer
		}
	}
	return nil
}

func (x *Core) GetLogger() *Logger {
	if x != nil {
		if x, ok := x.Type.(*Core_Logger); ok {
			return x.Logger
		}
	}
	return nil
}

func (x *Core) GetResourceType() *ResourceType {
	if x != nil {
		if x, ok := x.Type.(*Core_ResourceType); ok {
			return x.ResourceType
		}
	}
	return nil
}

func (x *Core) GetTool() *Tool {
	if x != nil {
		if x, ok := x.Type.(*Core_Tool); ok {
			return x.Tool
		}
	}
	return nil
}

type isCore_Type interface {
	isCore_Type()
}

type Core_CertificationTarget struct {
	CertificationTarget *CertificationTarget `protobuf:"bytes,11245,opt,name=certification_target,json=certificationTarget,proto3,oneof"`
}

type Core_Evidence struct {
	Evidence *Evidence `protobuf:"bytes,18196,opt,name=evidence,proto3,oneof"`
}

type Core_CloudSdk struct {
	CloudSdk *CloudSDK `protobuf:"bytes,14752,opt,name=cloud_sdk,json=cloudSdk,proto3,oneof"`
}

type Core_HttpClientLibrary struct {
	HttpClientLibrary *HttpClientLibrary `protobuf:"bytes,8816,opt,name=http_client_library,json=httpClientLibrary,proto3,oneof"`
}

type Core_HttpServer struct {
	HttpServer *HttpServer `protobuf:"bytes,7177,opt,name=http_server,json=httpServer,proto3,oneof"`
}

type Core_Logger struct {
	Logger *Logger `protobuf:"bytes,7437,opt,name=logger,proto3,oneof"`
}

type Core_ResourceType struct {
	ResourceType *ResourceType `protobuf:"bytes,5565,opt,name=resource_type,json=resourceType,proto3,oneof"`
}

type Core_Tool struct {
	Tool *Tool `protobuf:"bytes,10672,opt,name=tool,proto3,oneof"`
}

func (*Core_CertificationTarget) isCore_Type() {}

func (*Core_Evidence) isCore_Type() {}

func (*Core_CloudSdk) isCore_Type() {}

func (*Core_HttpClientLibrary) isCore_Type() {}

func (*Core_HttpServer) isCore_Type() {}

func (*Core_Logger) isCore_Type() {}

func (*Core_ResourceType) isCore_Type() {}

func (*Core_Tool) isCore_Type() {}

// Credential is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Credential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Credential_Certificate
	//	*Credential_Key
	//	*Credential_Secret
	Type          isCredential_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_api_ontology_ontology_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{35}
}

func (x *Credential) GetType() isCredential_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Credential) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Credential_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Credential) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Credential_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Credential) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Credential_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

type isCredential_Type interface {
	isCredential_Type()
}

type Credential_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Credential_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Credential_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

func (*Credential_Certificate) isCredential_Type() {}

func (*Credential_Key) isCredential_Type() {}

func (*Credential_Secret) isCredential_Type() {}

// DocumentChecksum is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentChecksum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,943,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Errors        []*Error               `protobuf:"bytes,17465,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentChecksum) Reset() {
	*x = DocumentChecksum{}
	mi := &file_api_ontology_ontology_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentChecksum) ProtoMessage() {}

func (x *DocumentChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentChecksum.ProtoReflect.Descriptor instead.
func (*DocumentChecksum) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{36}
}

func (x *DocumentChecksum) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DocumentChecksum) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// CryptographicOperation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type CryptographicOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CryptographicOperation_Decryption
	//	*CryptographicOperation_Encryption
	//	*CryptographicOperation_CryptographicHash
	Type          isCryptographicOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptographicOperation) Reset() {
	*x = CryptographicOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptographicOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptographicOperation) ProtoMessage() {}

func (x *CryptographicOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptographicOperation.ProtoReflect.Descriptor instead.
func (*CryptographicOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{37}
}

func (x *CryptographicOperation) GetType() isCryptographicOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CryptographicOperation) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *CryptographicOperation) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *CryptographicOperation) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

type isCryptographicOperation_Type interface {
	isCryptographicOperation_Type()
}

type CryptographicOperation_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type CryptographicOperation_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type CryptographicOperation_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

func (*CryptographicOperation_Decryption) isCryptographicOperation_Type() {}

func (*CryptographicOperation_Encryption) isCryptographicOperation_Type() {}

func (*CryptographicOperation_CryptographicHash) isCryptographicOperation_Type() {}

// CustomerKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CustomerKeyEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,14884,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Enabled       bool                   `protobuf:"varint,12751,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeyUrl        string                 `protobuf:"bytes,6413,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomerKeyEncryption) Reset() {
	*x = CustomerKeyEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerKeyEncryption) ProtoMessage() {}

func (x *CustomerKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerKeyEncryption.ProtoReflect.Descriptor instead.
func (*CustomerKeyEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{38}
}

func (x *CustomerKeyEncryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *CustomerKeyEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CustomerKeyEncryption) GetKeyUrl() string {
	if x != nil {
		return x.KeyUrl
	}
	return ""
}

// DDoSProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DDoSProtection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DDoSProtection) Reset() {
	*x = DDoSProtection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DDoSProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDoSProtection) ProtoMessage() {}

func (x *DDoSProtection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDoSProtection.ProtoReflect.Descriptor instead.
func (*DDoSProtection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{39}
}

// Data is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Data_GenericDocument
	//	*Data_PolicyDocument
	//	*Data_SecurityAdvisoryDocument
	//	*Data_ServiceMetadataDocument
	//	*Data_MachineLearningDataset
	//	*Data_MachineLearningModel
	Type          isData_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_api_ontology_ontology_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{40}
}

func (x *Data) GetType() isData_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Data) GetGenericDocument() *GenericDocument {
	if x != nil {
		if x, ok := x.Type.(*Data_GenericDocument); ok {
			return x.GenericDocument
		}
	}
	return nil
}

func (x *Data) GetPolicyDocument() *PolicyDocument {
	if x != nil {
		if x, ok := x.Type.(*Data_PolicyDocument); ok {
			return x.PolicyDocument
		}
	}
	return nil
}

func (x *Data) GetSecurityAdvisoryDocument() *SecurityAdvisoryDocument {
	if x != nil {
		if x, ok := x.Type.(*Data_SecurityAdvisoryDocument); ok {
			return x.SecurityAdvisoryDocument
		}
	}
	return nil
}

func (x *Data) GetServiceMetadataDocument() *ServiceMetadataDocument {
	if x != nil {
		if x, ok := x.Type.(*Data_ServiceMetadataDocument); ok {
			return x.ServiceMetadataDocument
		}
	}
	return nil
}

func (x *Data) GetMachineLearningDataset() *MachineLearningDataset {
	if x != nil {
		if x, ok := x.Type.(*Data_MachineLearningDataset); ok {
			return x.MachineLearningDataset
		}
	}
	return nil
}

func (x *Data) GetMachineLearningModel() *MachineLearningModel {
	if x != nil {
		if x, ok := x.Type.(*Data_MachineLearningModel); ok {
			return x.MachineLearningModel
		}
	}
	return nil
}

type isData_Type interface {
	isData_Type()
}

type Data_GenericDocument struct {
	GenericDocument *GenericDocument `protobuf:"bytes,4992,opt,name=generic_document,json=genericDocument,proto3,oneof"`
}

type Data_PolicyDocument struct {
	PolicyDocument *PolicyDocument `protobuf:"bytes,14953,opt,name=policy_document,json=policyDocument,proto3,oneof"`
}

type Data_SecurityAdvisoryDocument struct {
	SecurityAdvisoryDocument *SecurityAdvisoryDocument `protobuf:"bytes,14717,opt,name=security_advisory_document,json=securityAdvisoryDocument,proto3,oneof"`
}

type Data_ServiceMetadataDocument struct {
	ServiceMetadataDocument *ServiceMetadataDocument `protobuf:"bytes,272,opt,name=service_metadata_document,json=serviceMetadataDocument,proto3,oneof"`
}

type Data_MachineLearningDataset struct {
	MachineLearningDataset *MachineLearningDataset `protobuf:"bytes,2040,opt,name=machine_learning_dataset,json=machineLearningDataset,proto3,oneof"`
}

type Data_MachineLearningModel struct {
	MachineLearningModel *MachineLearningModel `protobuf:"bytes,15393,opt,name=machine_learning_model,json=machineLearningModel,proto3,oneof"`
}

func (*Data_GenericDocument) isData_Type() {}

func (*Data_PolicyDocument) isData_Type() {}

func (*Data_SecurityAdvisoryDocument) isData_Type() {}

func (*Data_ServiceMetadataDocument) isData_Type() {}

func (*Data_MachineLearningDataset) isData_Type() {}

func (*Data_MachineLearningModel) isData_Type() {}

// DataLocation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// path: Describes either local path or path in URL format
type DataLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DataLocation_LocalDataLocation
	//	*DataLocation_RemoteDataLocation
	Type          isDataLocation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataLocation) Reset() {
	*x = DataLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLocation) ProtoMessage() {}

func (x *DataLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLocation.ProtoReflect.Descriptor instead.
func (*DataLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{41}
}

func (x *DataLocation) GetType() isDataLocation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataLocation) GetLocalDataLocation() *LocalDataLocation {
	if x != nil {
		if x, ok := x.Type.(*DataLocation_LocalDataLocation); ok {
			return x.LocalDataLocation
		}
	}
	return nil
}

func (x *DataLocation) GetRemoteDataLocation() *RemoteDataLocation {
	if x != nil {
		if x, ok := x.Type.(*DataLocation_RemoteDataLocation); ok {
			return x.RemoteDataLocation
		}
	}
	return nil
}

type isDataLocation_Type interface {
	isDataLocation_Type()
}

type DataLocation_LocalDataLocation struct {
	LocalDataLocation *LocalDataLocation `protobuf:"bytes,12313,opt,name=local_data_location,json=localDataLocation,proto3,oneof"`
}

type DataLocation_RemoteDataLocation struct {
	RemoteDataLocation *RemoteDataLocation `protobuf:"bytes,13541,opt,name=remote_data_location,json=remoteDataLocation,proto3,oneof"`
}

func (*DataLocation_LocalDataLocation) isDataLocation_Type() {}

func (*DataLocation_RemoteDataLocation) isDataLocation_Type() {}

// DatabaseConnect is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DatabaseConnect struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Calls              []string               `protobuf:"bytes,12922,rep,name=calls,proto3" json:"calls,omitempty"`
	CodeRegion         *CodeRegion            `protobuf:"bytes,5983,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	DatabaseServiceIds []string               `protobuf:"bytes,5749,rep,name=database_service_ids,json=databaseServiceIds,proto3" json:"database_service_ids,omitempty"`
	DatabaseStorageId  *string                `protobuf:"bytes,3674,opt,name=database_storage_id,json=databaseStorageId,proto3,oneof" json:"database_storage_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DatabaseConnect) Reset() {
	*x = DatabaseConnect{}
	mi := &file_api_ontology_ontology_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConnect) ProtoMessage() {}

func (x *DatabaseConnect) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConnect.ProtoReflect.Descriptor instead.
func (*DatabaseConnect) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{42}
}

func (x *DatabaseConnect) GetCalls() []string {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *DatabaseConnect) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *DatabaseConnect) GetDatabaseServiceIds() []string {
	if x != nil {
		return x.DatabaseServiceIds
	}
	return nil
}

func (x *DatabaseConnect) GetDatabaseStorageId() string {
	if x != nil && x.DatabaseStorageId != nil {
		return *x.DatabaseStorageId
	}
	return ""
}

// DatabaseOperation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type DatabaseOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DatabaseOperation_DatabaseConnect
	//	*DatabaseOperation_DatabaseQuery
	Type          isDatabaseOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseOperation) Reset() {
	*x = DatabaseOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseOperation) ProtoMessage() {}

func (x *DatabaseOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseOperation.ProtoReflect.Descriptor instead.
func (*DatabaseOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{43}
}

func (x *DatabaseOperation) GetType() isDatabaseOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DatabaseOperation) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*DatabaseOperation_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *DatabaseOperation) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*DatabaseOperation_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

type isDatabaseOperation_Type interface {
	isDatabaseOperation_Type()
}

type DatabaseOperation_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type DatabaseOperation_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

func (*DatabaseOperation_DatabaseConnect) isDatabaseOperation_Type() {}

func (*DatabaseOperation_DatabaseQuery) isDatabaseOperation_Type() {}

// DatabaseQuery is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DatabaseQuery struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Calls              []string               `protobuf:"bytes,7647,rep,name=calls,proto3" json:"calls,omitempty"`
	Modify             bool                   `protobuf:"varint,7601,opt,name=modify,proto3" json:"modify,omitempty"`
	CodeRegion         *CodeRegion            `protobuf:"bytes,8496,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	DatabaseServiceIds []string               `protobuf:"bytes,14358,rep,name=database_service_ids,json=databaseServiceIds,proto3" json:"database_service_ids,omitempty"`
	DatabaseStorageId  *string                `protobuf:"bytes,17880,opt,name=database_storage_id,json=databaseStorageId,proto3,oneof" json:"database_storage_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DatabaseQuery) Reset() {
	*x = DatabaseQuery{}
	mi := &file_api_ontology_ontology_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseQuery) ProtoMessage() {}

func (x *DatabaseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseQuery.ProtoReflect.Descriptor instead.
func (*DatabaseQuery) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{44}
}

func (x *DatabaseQuery) GetCalls() []string {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *DatabaseQuery) GetModify() bool {
	if x != nil {
		return x.Modify
	}
	return false
}

func (x *DatabaseQuery) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *DatabaseQuery) GetDatabaseServiceIds() []string {
	if x != nil {
		return x.DatabaseServiceIds
	}
	return nil
}

func (x *DatabaseQuery) GetDatabaseStorageId() string {
	if x != nil && x.DatabaseStorageId != nil {
		return *x.DatabaseStorageId
	}
	return ""
}

// DatabaseService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This class represents a database service. For example, a postgres SQL server would be modelled as a database service (with a host and IP) and the individual tables or collections would be modelled as a DatabaseStorage entity.
type DatabaseService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DatabaseService_DocumentDatabaseService
	//	*DatabaseService_KeyValueDatabaseService
	//	*DatabaseService_MultiModalDatabaseService
	//	*DatabaseService_RelationalDatabaseService
	Type          isDatabaseService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseService) Reset() {
	*x = DatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseService) ProtoMessage() {}

func (x *DatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseService.ProtoReflect.Descriptor instead.
func (*DatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{45}
}

func (x *DatabaseService) GetType() isDatabaseService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DatabaseService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

type isDatabaseService_Type interface {
	isDatabaseService_Type()
}

type DatabaseService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type DatabaseService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type DatabaseService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type DatabaseService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

func (*DatabaseService_DocumentDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_KeyValueDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_MultiModalDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_RelationalDatabaseService) isDatabaseService_Type() {}

// DatabaseStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// describes the actual database or a table in a database
type DatabaseStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14609,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4217,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,5278,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,10131,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15362,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1264,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,11538,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging  *ActivityLogging  `protobuf:"bytes,5640,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,14578,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,12872,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,16892,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,13674,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Loggings         []*Logging        `protobuf:"bytes,440,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,15577,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,3160,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,16054,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,283,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DatabaseStorage) Reset() {
	*x = DatabaseStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseStorage) ProtoMessage() {}

func (x *DatabaseStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseStorage.ProtoReflect.Descriptor instead.
func (*DatabaseStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{46}
}

func (x *DatabaseStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DatabaseStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DatabaseStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DatabaseStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DatabaseStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DatabaseStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DatabaseStorage) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *DatabaseStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *DatabaseStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *DatabaseStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DatabaseStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *DatabaseStorage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *DatabaseStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DatabaseStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DatabaseStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *DatabaseStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Decryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Decryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,3758,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,12634,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decryption) Reset() {
	*x = Decryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decryption) ProtoMessage() {}

func (x *Decryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decryption.ProtoReflect.Descriptor instead.
func (*Decryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{47}
}

func (x *Decryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Decryption) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// DeviceProvisioningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DeviceProvisioningService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,17874,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,18095,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18723,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15029,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5934,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,9731,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14841,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,9853,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,12189,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,12751,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,4221,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,8367,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceProvisioningService) Reset() {
	*x = DeviceProvisioningService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceProvisioningService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProvisioningService) ProtoMessage() {}

func (x *DeviceProvisioningService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProvisioningService.ProtoReflect.Descriptor instead.
func (*DeviceProvisioningService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{48}
}

func (x *DeviceProvisioningService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DeviceProvisioningService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceProvisioningService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceProvisioningService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DeviceProvisioningService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeviceProvisioningService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceProvisioningService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DeviceProvisioningService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DeviceProvisioningService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *DeviceProvisioningService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DeviceProvisioningService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DeviceProvisioningService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Document is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// DataLocation: Describes the location as local or remote location
type Document struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Document_GenericDocument
	//	*Document_PolicyDocument
	//	*Document_SecurityAdvisoryDocument
	//	*Document_ServiceMetadataDocument
	Type          isDocument_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_api_ontology_ontology_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{49}
}

func (x *Document) GetType() isDocument_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Document) GetGenericDocument() *GenericDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_GenericDocument); ok {
			return x.GenericDocument
		}
	}
	return nil
}

func (x *Document) GetPolicyDocument() *PolicyDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_PolicyDocument); ok {
			return x.PolicyDocument
		}
	}
	return nil
}

func (x *Document) GetSecurityAdvisoryDocument() *SecurityAdvisoryDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_SecurityAdvisoryDocument); ok {
			return x.SecurityAdvisoryDocument
		}
	}
	return nil
}

func (x *Document) GetServiceMetadataDocument() *ServiceMetadataDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_ServiceMetadataDocument); ok {
			return x.ServiceMetadataDocument
		}
	}
	return nil
}

type isDocument_Type interface {
	isDocument_Type()
}

type Document_GenericDocument struct {
	GenericDocument *GenericDocument `protobuf:"bytes,4992,opt,name=generic_document,json=genericDocument,proto3,oneof"`
}

type Document_PolicyDocument struct {
	PolicyDocument *PolicyDocument `protobuf:"bytes,14953,opt,name=policy_document,json=policyDocument,proto3,oneof"`
}

type Document_SecurityAdvisoryDocument struct {
	SecurityAdvisoryDocument *SecurityAdvisoryDocument `protobuf:"bytes,14717,opt,name=security_advisory_document,json=securityAdvisoryDocument,proto3,oneof"`
}

type Document_ServiceMetadataDocument struct {
	ServiceMetadataDocument *ServiceMetadataDocument `protobuf:"bytes,272,opt,name=service_metadata_document,json=serviceMetadataDocument,proto3,oneof"`
}

func (*Document_GenericDocument) isDocument_Type() {}

func (*Document_PolicyDocument) isDocument_Type() {}

func (*Document_SecurityAdvisoryDocument) isDocument_Type() {}

func (*Document_ServiceMetadataDocument) isDocument_Type() {}

// DocumentDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11758,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,13774,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7556,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,9855,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,7051,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,3177,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12726,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,10225,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,7317,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,8,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,1003,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6961,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,6197,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,9480,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,7406,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,4410,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,15064,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,953,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,17568,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,1112,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7020,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,10295,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,10074,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DocumentDatabaseService) Reset() {
	*x = DocumentDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentDatabaseService) ProtoMessage() {}

func (x *DocumentDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentDatabaseService.ProtoReflect.Descriptor instead.
func (*DocumentDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{50}
}

func (x *DocumentDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DocumentDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DocumentDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DocumentDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *DocumentDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DocumentDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DocumentDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DocumentDatabaseService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *DocumentDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *DocumentDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *DocumentDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *DocumentDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DocumentDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *DocumentDatabaseService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *DocumentDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *DocumentDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DocumentDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DocumentDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *DocumentDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *DocumentDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *DocumentDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// EncryptionInUse is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type EncryptionInUse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,8542,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionInUse) Reset() {
	*x = EncryptionInUse{}
	mi := &file_api_ontology_ontology_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionInUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInUse) ProtoMessage() {}

func (x *EncryptionInUse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInUse.ProtoReflect.Descriptor instead.
func (*EncryptionInUse) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{51}
}

func (x *EncryptionInUse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Encryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Encryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,16274,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,9339,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{52}
}

func (x *Encryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Encryption) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// Error is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,3497,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_api_ontology_ontology_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{53}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Evidence is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Evidence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	mi := &file_api_ontology_ontology_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{54}
}

// ExplainableResults is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ExplainableResults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExplainableResults) Reset() {
	*x = ExplainableResults{}
	mi := &file_api_ontology_ontology_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExplainableResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainableResults) ProtoMessage() {}

func (x *ExplainableResults) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainableResults.ProtoReflect.Descriptor instead.
func (*ExplainableResults) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{55}
}

// FileStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type FileStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3786,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,6154,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4569,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,3582,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2787,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,16132,opt,name=name,proto3" json:"name,omitempty"`
	PublicAccess               bool                   `protobuf:"varint,10539,opt,name=public_access,json=publicAccess,proto3" json:"public_access,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,4379,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging  *ActivityLogging  `protobuf:"bytes,17409,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,1429,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,17584,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,5391,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,7897,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Loggings         []*Logging        `protobuf:"bytes,884,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,1278,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,4433,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,18223,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,8987,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FileStorage) Reset() {
	*x = FileStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStorage) ProtoMessage() {}

func (x *FileStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStorage.ProtoReflect.Descriptor instead.
func (*FileStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{56}
}

func (x *FileStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FileStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FileStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileStorage) GetPublicAccess() bool {
	if x != nil {
		return x.PublicAccess
	}
	return false
}

func (x *FileStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FileStorage) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *FileStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *FileStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *FileStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FileStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *FileStorage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *FileStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FileStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *FileStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// FileStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An file storage service represents the network service that is used to access a list of file storage shares. The storage itself is modelled as a FileStorage. The service has an http endpoint.
type FileStorageService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,18615,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9940,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17295,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16036,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,6543,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,9347,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,3149,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,12509,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,13948,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,12272,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,16174,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,15440,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,16763,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,12282,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,18653,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,4497,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,3568,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,10599,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,5495,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,18341,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,1779,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FileStorageService) Reset() {
	*x = FileStorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStorageService) ProtoMessage() {}

func (x *FileStorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStorageService.ProtoReflect.Descriptor instead.
func (*FileStorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{57}
}

func (x *FileStorageService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FileStorageService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileStorageService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileStorageService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FileStorageService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *FileStorageService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileStorageService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileStorageService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FileStorageService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FileStorageService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *FileStorageService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *FileStorageService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *FileStorageService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FileStorageService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *FileStorageService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *FileStorageService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FileStorageService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileStorageService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *FileStorageService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *FileStorageService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *FileStorageService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Firewall is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Firewall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Firewall_L3Firewall
	//	*Firewall_WebApplicationFirewall
	Type          isFirewall_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{58}
}

func (x *Firewall) GetType() isFirewall_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Firewall) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*Firewall_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *Firewall) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*Firewall_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

type isFirewall_Type interface {
	isFirewall_Type()
}

type Firewall_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type Firewall_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

func (*Firewall_L3Firewall) isFirewall_Type() {}

func (*Firewall_WebApplicationFirewall) isFirewall_Type() {}

// Framework is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Framework struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Framework_CloudSdk
	//	*Framework_HttpClientLibrary
	//	*Framework_HttpServer
	//	*Framework_Logger
	Type          isFramework_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Framework) Reset() {
	*x = Framework{}
	mi := &file_api_ontology_ontology_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{59}
}

func (x *Framework) GetType() isFramework_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Framework) GetCloudSdk() *CloudSDK {
	if x != nil {
		if x, ok := x.Type.(*Framework_CloudSdk); ok {
			return x.CloudSdk
		}
	}
	return nil
}

func (x *Framework) GetHttpClientLibrary() *HttpClientLibrary {
	if x != nil {
		if x, ok := x.Type.(*Framework_HttpClientLibrary); ok {
			return x.HttpClientLibrary
		}
	}
	return nil
}

func (x *Framework) GetHttpServer() *HttpServer {
	if x != nil {
		if x, ok := x.Type.(*Framework_HttpServer); ok {
			return x.HttpServer
		}
	}
	return nil
}

func (x *Framework) GetLogger() *Logger {
	if x != nil {
		if x, ok := x.Type.(*Framework_Logger); ok {
			return x.Logger
		}
	}
	return nil
}

type isFramework_Type interface {
	isFramework_Type()
}

type Framework_CloudSdk struct {
	CloudSdk *CloudSDK `protobuf:"bytes,14752,opt,name=cloud_sdk,json=cloudSdk,proto3,oneof"`
}

type Framework_HttpClientLibrary struct {
	HttpClientLibrary *HttpClientLibrary `protobuf:"bytes,8816,opt,name=http_client_library,json=httpClientLibrary,proto3,oneof"`
}

type Framework_HttpServer struct {
	HttpServer *HttpServer `protobuf:"bytes,7177,opt,name=http_server,json=httpServer,proto3,oneof"`
}

type Framework_Logger struct {
	Logger *Logger `protobuf:"bytes,7437,opt,name=logger,proto3,oneof"`
}

func (*Framework_CloudSdk) isFramework_Type() {}

func (*Framework_HttpClientLibrary) isFramework_Type() {}

func (*Framework_HttpServer) isFramework_Type() {}

func (*Framework_Logger) isFramework_Type() {}

// Function is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Function struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4066,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,18203,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11465,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,4184,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15030,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,6517,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,1531,opt,name=raw,proto3" json:"raw,omitempty"`
	RuntimeLanguage     string             `protobuf:"bytes,7048,opt,name=runtime_language,json=runtimeLanguage,proto3" json:"runtime_language,omitempty"`
	RuntimeVersion      string             `protobuf:"bytes,16017,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,16630,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,8822,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings            []*Logging         `protobuf:"bytes,5609,rep,name=loggings,proto3" json:"loggings,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,3840,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,18216,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,13435,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,11924,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,5288,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,9808,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Function) Reset() {
	*x = Function{}
	mi := &file_api_ontology_ontology_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{60}
}

func (x *Function) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Function) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Function) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Function) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Function) GetRuntimeLanguage() string {
	if x != nil {
		return x.RuntimeLanguage
	}
	return ""
}

func (x *Function) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *Function) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *Function) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Function) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Function) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *Function) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Function) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *Function) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Function) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *Function) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// FunctionService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type FunctionService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3632,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17359,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,3617,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5242,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,7370,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18713,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,15731,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,17713,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,4925,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,17652,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,5429,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	FunctionIds               []string             `protobuf:"bytes,2362,rep,name=function_ids,json=functionIds,proto3" json:"function_ids,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,8116,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,15412,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,17787,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,11473,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,5508,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,8143,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,7485,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FunctionService) Reset() {
	*x = FunctionService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionService) ProtoMessage() {}

func (x *FunctionService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionService.ProtoReflect.Descriptor instead.
func (*FunctionService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{61}
}

func (x *FunctionService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FunctionService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunctionService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FunctionService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *FunctionService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FunctionService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FunctionService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FunctionService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *FunctionService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *FunctionService) GetFunctionIds() []string {
	if x != nil {
		return x.FunctionIds
	}
	return nil
}

func (x *FunctionService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FunctionService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *FunctionService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FunctionService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FunctionService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *FunctionService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *FunctionService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Functionality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Functionality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Functionality_CipherSuite
	//	*Functionality_CodeRegion
	//	*Functionality_LocalDataLocation
	//	*Functionality_RemoteDataLocation
	//	*Functionality_Error
	//	*Functionality_HttpEndpoint
	//	*Functionality_HttpRequestHandler
	//	*Functionality_Decryption
	//	*Functionality_Encryption
	//	*Functionality_CryptographicHash
	//	*Functionality_DatabaseConnect
	//	*Functionality_DatabaseQuery
	//	*Functionality_HttpRequest
	//	*Functionality_LogOperation
	//	*Functionality_ObjectStorageRequest
	//	*Functionality_SchemaValidation
	//	*Functionality_SecurityAdvisoryFeed
	//	*Functionality_Vulnerability
	Type          isFunctionality_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Functionality) Reset() {
	*x = Functionality{}
	mi := &file_api_ontology_ontology_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Functionality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Functionality) ProtoMessage() {}

func (x *Functionality) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Functionality.ProtoReflect.Descriptor instead.
func (*Functionality) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{62}
}

func (x *Functionality) GetType() isFunctionality_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Functionality) GetCipherSuite() *CipherSuite {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CipherSuite); ok {
			return x.CipherSuite
		}
	}
	return nil
}

func (x *Functionality) GetCodeRegion() *CodeRegion {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CodeRegion); ok {
			return x.CodeRegion
		}
	}
	return nil
}

func (x *Functionality) GetLocalDataLocation() *LocalDataLocation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_LocalDataLocation); ok {
			return x.LocalDataLocation
		}
	}
	return nil
}

func (x *Functionality) GetRemoteDataLocation() *RemoteDataLocation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_RemoteDataLocation); ok {
			return x.RemoteDataLocation
		}
	}
	return nil
}

func (x *Functionality) GetError() *Error {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *Functionality) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpEndpoint); ok {
			return x.HttpEndpoint
		}
	}
	return nil
}

func (x *Functionality) GetHttpRequestHandler() *HttpRequestHandler {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpRequestHandler); ok {
			return x.HttpRequestHandler
		}
	}
	return nil
}

func (x *Functionality) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *Functionality) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *Functionality) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

func (x *Functionality) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*Functionality_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *Functionality) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*Functionality_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

func (x *Functionality) GetHttpRequest() *HttpRequest {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *Functionality) GetLogOperation() *LogOperation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_LogOperation); ok {
			return x.LogOperation
		}
	}
	return nil
}

func (x *Functionality) GetObjectStorageRequest() *ObjectStorageRequest {
	if x != nil {
		if x, ok := x.Type.(*Functionality_ObjectStorageRequest); ok {
			return x.ObjectStorageRequest
		}
	}
	return nil
}

func (x *Functionality) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_SchemaValidation); ok {
			return x.SchemaValidation
		}
	}
	return nil
}

func (x *Functionality) GetSecurityAdvisoryFeed() *SecurityAdvisoryFeed {
	if x != nil {
		if x, ok := x.Type.(*Functionality_SecurityAdvisoryFeed); ok {
			return x.SecurityAdvisoryFeed
		}
	}
	return nil
}

func (x *Functionality) GetVulnerability() *Vulnerability {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Vulnerability); ok {
			return x.Vulnerability
		}
	}
	return nil
}

type isFunctionality_Type interface {
	isFunctionality_Type()
}

type Functionality_CipherSuite struct {
	CipherSuite *CipherSuite `protobuf:"bytes,11132,opt,name=cipher_suite,json=cipherSuite,proto3,oneof"`
}

type Functionality_CodeRegion struct {
	CodeRegion *CodeRegion `protobuf:"bytes,9184,opt,name=code_region,json=codeRegion,proto3,oneof"`
}

type Functionality_LocalDataLocation struct {
	LocalDataLocation *LocalDataLocation `protobuf:"bytes,12313,opt,name=local_data_location,json=localDataLocation,proto3,oneof"`
}

type Functionality_RemoteDataLocation struct {
	RemoteDataLocation *RemoteDataLocation `protobuf:"bytes,13541,opt,name=remote_data_location,json=remoteDataLocation,proto3,oneof"`
}

type Functionality_Error struct {
	Error *Error `protobuf:"bytes,6544,opt,name=error,proto3,oneof"`
}

type Functionality_HttpEndpoint struct {
	HttpEndpoint *HttpEndpoint `protobuf:"bytes,4266,opt,name=http_endpoint,json=httpEndpoint,proto3,oneof"`
}

type Functionality_HttpRequestHandler struct {
	HttpRequestHandler *HttpRequestHandler `protobuf:"bytes,7403,opt,name=http_request_handler,json=httpRequestHandler,proto3,oneof"`
}

type Functionality_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type Functionality_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type Functionality_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

type Functionality_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type Functionality_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

type Functionality_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,2901,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type Functionality_LogOperation struct {
	LogOperation *LogOperation `protobuf:"bytes,14250,opt,name=log_operation,json=logOperation,proto3,oneof"`
}

type Functionality_ObjectStorageRequest struct {
	ObjectStorageRequest *ObjectStorageRequest `protobuf:"bytes,16887,opt,name=object_storage_request,json=objectStorageRequest,proto3,oneof"`
}

type Functionality_SchemaValidation struct {
	SchemaValidation *SchemaValidation `protobuf:"bytes,16331,opt,name=schema_validation,json=schemaValidation,proto3,oneof"`
}

type Functionality_SecurityAdvisoryFeed struct {
	SecurityAdvisoryFeed *SecurityAdvisoryFeed `protobuf:"bytes,13903,opt,name=security_advisory_feed,json=securityAdvisoryFeed,proto3,oneof"`
}

type Functionality_Vulnerability struct {
	Vulnerability *Vulnerability `protobuf:"bytes,5095,opt,name=vulnerability,proto3,oneof"`
}

func (*Functionality_CipherSuite) isFunctionality_Type() {}

func (*Functionality_CodeRegion) isFunctionality_Type() {}

func (*Functionality_LocalDataLocation) isFunctionality_Type() {}

func (*Functionality_RemoteDataLocation) isFunctionality_Type() {}

func (*Functionality_Error) isFunctionality_Type() {}

func (*Functionality_HttpEndpoint) isFunctionality_Type() {}

func (*Functionality_HttpRequestHandler) isFunctionality_Type() {}

func (*Functionality_Decryption) isFunctionality_Type() {}

func (*Functionality_Encryption) isFunctionality_Type() {}

func (*Functionality_CryptographicHash) isFunctionality_Type() {}

func (*Functionality_DatabaseConnect) isFunctionality_Type() {}

func (*Functionality_DatabaseQuery) isFunctionality_Type() {}

func (*Functionality_HttpRequest) isFunctionality_Type() {}

func (*Functionality_LogOperation) isFunctionality_Type() {}

func (*Functionality_ObjectStorageRequest) isFunctionality_Type() {}

func (*Functionality_SchemaValidation) isFunctionality_Type() {}

func (*Functionality_SecurityAdvisoryFeed) isFunctionality_Type() {}

func (*Functionality_Vulnerability) isFunctionality_Type() {}

// GenericDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This is a placeholder for all other documents, e.g. index.txt
type GenericDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,13813,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,13541,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,5608,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,13778,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,4979,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,7206,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,13342,opt,name=raw,proto3" json:"raw,omitempty"`
	DataLocation       *DataLocation        `protobuf:"bytes,16480,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,17366,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,18959,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,16902,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,7225,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,6529,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GenericDocument) Reset() {
	*x = GenericDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDocument) ProtoMessage() {}

func (x *GenericDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDocument.ProtoReflect.Descriptor instead.
func (*GenericDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{63}
}

func (x *GenericDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *GenericDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *GenericDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GenericDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *GenericDocument) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *GenericDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *GenericDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *GenericDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *GenericDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *GenericDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

// GenericNetworkService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A generic network service.
type GenericNetworkService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,16606,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14235,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,12784,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2744,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,11538,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5016,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13467,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,532,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,10844,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,16001,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,6238,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,10055,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,15073,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,16059,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,12959,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,11825,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,13959,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,16789,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GenericNetworkService) Reset() {
	*x = GenericNetworkService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericNetworkService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericNetworkService) ProtoMessage() {}

func (x *GenericNetworkService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericNetworkService.ProtoReflect.Descriptor instead.
func (*GenericNetworkService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{64}
}

func (x *GenericNetworkService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *GenericNetworkService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericNetworkService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericNetworkService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *GenericNetworkService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *GenericNetworkService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GenericNetworkService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericNetworkService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GenericNetworkService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *GenericNetworkService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *GenericNetworkService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *GenericNetworkService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *GenericNetworkService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *GenericNetworkService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *GenericNetworkService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *GenericNetworkService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *GenericNetworkService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *GenericNetworkService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// GeoLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type GeoLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Region        string                 `protobuf:"bytes,7708,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{65}
}

func (x *GeoLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// GeoRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type GeoRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,13910,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoRedundancy) Reset() {
	*x = GeoRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRedundancy) ProtoMessage() {}

func (x *GeoRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRedundancy.ProtoReflect.Descriptor instead.
func (*GeoRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{66}
}

func (x *GeoRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

// CryptographicHash is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CryptographicHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,9887,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	UsesSalt      bool                   `protobuf:"varint,8538,opt,name=uses_salt,json=usesSalt,proto3" json:"uses_salt,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,6454,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptographicHash) Reset() {
	*x = CryptographicHash{}
	mi := &file_api_ontology_ontology_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptographicHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptographicHash) ProtoMessage() {}

func (x *CryptographicHash) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptographicHash.ProtoReflect.Descriptor instead.
func (*CryptographicHash) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{67}
}

func (x *CryptographicHash) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *CryptographicHash) GetUsesSalt() bool {
	if x != nil {
		return x.UsesSalt
	}
	return false
}

func (x *CryptographicHash) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// HttpClientLibrary is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpClientLibrary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpClientLibrary) Reset() {
	*x = HttpClientLibrary{}
	mi := &file_api_ontology_ontology_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpClientLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpClientLibrary) ProtoMessage() {}

func (x *HttpClientLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpClientLibrary.ProtoReflect.Descriptor instead.
func (*HttpClientLibrary) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{68}
}

// HttpEndpoint is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An HTTP endpoint can set the "proxyTarget" property, in case that is routed through a (reverse) proxy, e.g. a load balancer.
// Via the Authenticity relationship, the access type can be specified, e.g. public access (no authentication), password-based, etc.
type HttpEndpoint struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Handler             string                 `protobuf:"bytes,9890,opt,name=handler,proto3" json:"handler,omitempty"`
	Method              string                 `protobuf:"bytes,125,opt,name=method,proto3" json:"method,omitempty"`
	Path                string                 `protobuf:"bytes,17149,opt,name=path,proto3" json:"path,omitempty"`
	Url                 string                 `protobuf:"bytes,8687,opt,name=url,proto3" json:"url,omitempty"`
	Authenticity        *Authenticity          `protobuf:"bytes,18568,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	TransportEncryption *TransportEncryption   `protobuf:"bytes,12277,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HttpEndpoint) Reset() {
	*x = HttpEndpoint{}
	mi := &file_api_ontology_ontology_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpEndpoint) ProtoMessage() {}

func (x *HttpEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpEndpoint.ProtoReflect.Descriptor instead.
func (*HttpEndpoint) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{69}
}

func (x *HttpEndpoint) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *HttpEndpoint) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpEndpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpEndpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpEndpoint) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *HttpEndpoint) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// HttpRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Call          string                 `protobuf:"bytes,3127,opt,name=call,proto3" json:"call,omitempty"`
	ReqBody       string                 `protobuf:"bytes,14536,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,6045,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	HttpEndpoints []*HttpEndpoint        `protobuf:"bytes,8204,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	mi := &file_api_ontology_ontology_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{70}
}

func (x *HttpRequest) GetCall() string {
	if x != nil {
		return x.Call
	}
	return ""
}

func (x *HttpRequest) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *HttpRequest) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *HttpRequest) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

// HttpRequestHandler is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpRequestHandler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,3307,opt,name=path,proto3" json:"path,omitempty"`
	ApplicationId *string                `protobuf:"bytes,9918,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	HttpEndpoints []*HttpEndpoint        `protobuf:"bytes,8938,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequestHandler) Reset() {
	*x = HttpRequestHandler{}
	mi := &file_api_ontology_ontology_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequestHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestHandler) ProtoMessage() {}

func (x *HttpRequestHandler) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestHandler.ProtoReflect.Descriptor instead.
func (*HttpRequestHandler) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{71}
}

func (x *HttpRequestHandler) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpRequestHandler) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *HttpRequestHandler) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

// HttpServer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpServer struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HttpRequestHandler *HttpRequestHandler    `protobuf:"bytes,7885,opt,name=http_request_handler,json=httpRequestHandler,proto3" json:"http_request_handler,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HttpServer) Reset() {
	*x = HttpServer{}
	mi := &file_api_ontology_ontology_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer) ProtoMessage() {}

func (x *HttpServer) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpServer.ProtoReflect.Descriptor instead.
func (*HttpServer) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{72}
}

func (x *HttpServer) GetHttpRequestHandler() *HttpRequestHandler {
	if x != nil {
		return x.HttpRequestHandler
	}
	return nil
}

// HumanResources is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type HumanResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*HumanResources_AwarenessTraining
	//	*HumanResources_SecurityTraining
	Type          isHumanResources_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HumanResources) Reset() {
	*x = HumanResources{}
	mi := &file_api_ontology_ontology_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HumanResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanResources) ProtoMessage() {}

func (x *HumanResources) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanResources.ProtoReflect.Descriptor instead.
func (*HumanResources) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{73}
}

func (x *HumanResources) GetType() isHumanResources_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *HumanResources) GetAwarenessTraining() *AwarenessTraining {
	if x != nil {
		if x, ok := x.Type.(*HumanResources_AwarenessTraining); ok {
			return x.AwarenessTraining
		}
	}
	return nil
}

func (x *HumanResources) GetSecurityTraining() *SecurityTraining {
	if x != nil {
		if x, ok := x.Type.(*HumanResources_SecurityTraining); ok {
			return x.SecurityTraining
		}
	}
	return nil
}

type isHumanResources_Type interface {
	isHumanResources_Type()
}

type HumanResources_AwarenessTraining struct {
	AwarenessTraining *AwarenessTraining `protobuf:"bytes,13539,opt,name=awareness_training,json=awarenessTraining,proto3,oneof"`
}

type HumanResources_SecurityTraining struct {
	SecurityTraining *SecurityTraining `protobuf:"bytes,5053,opt,name=security_training,json=securityTraining,proto3,oneof"`
}

func (*HumanResources_AwarenessTraining) isHumanResources_Type() {}

func (*HumanResources_SecurityTraining) isHumanResources_Type() {}

// Identifiable is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Identifiable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Identifiable_Identity
	//	*Identifiable_RoleAssignment
	Type          isIdentifiable_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identifiable) Reset() {
	*x = Identifiable{}
	mi := &file_api_ontology_ontology_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifiable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifiable) ProtoMessage() {}

func (x *Identifiable) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifiable.ProtoReflect.Descriptor instead.
func (*Identifiable) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{74}
}

func (x *Identifiable) GetType() isIdentifiable_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Identifiable) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Identifiable_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Identifiable) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Identifiable_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

type isIdentifiable_Type interface {
	isIdentifiable_Type()
}

type Identifiable_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Identifiable_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

func (*Identifiable_Identity) isIdentifiable_Type() {}

func (*Identifiable_RoleAssignment) isIdentifiable_Type() {}

// Identity is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Identity struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Activated                  bool                   `protobuf:"varint,10116,opt,name=activated,proto3" json:"activated,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14103,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9218,opt,name=description,proto3" json:"description,omitempty"`
	DisablePasswordPolicy      bool                   `protobuf:"varint,5968,opt,name=disable_password_policy,json=disablePasswordPolicy,proto3" json:"disable_password_policy,omitempty"`
	EnforceMfa                 bool                   `protobuf:"varint,13721,opt,name=enforce_mfa,json=enforceMfa,proto3" json:"enforce_mfa,omitempty"`
	Id                         string                 `protobuf:"bytes,5350,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15444,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,716,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastActivity               *timestamppb.Timestamp `protobuf:"bytes,2591,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	LoginDefenderEnabled       bool                   `protobuf:"varint,18632,opt,name=login_defender_enabled,json=loginDefenderEnabled,proto3" json:"login_defender_enabled,omitempty"`
	Name                       string                 `protobuf:"bytes,2578,opt,name=name,proto3" json:"name,omitempty"`
	Privileged                 bool                   `protobuf:"varint,2301,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16151,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity    *Authenticity    `protobuf:"bytes,6720,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	Authorization   *Authorization   `protobuf:"bytes,14925,opt,name=authorization,proto3" json:"authorization,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,9161,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,2534,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15828,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,5028,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,4966,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{75}
}

func (x *Identity) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *Identity) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Identity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Identity) GetDisablePasswordPolicy() bool {
	if x != nil {
		return x.DisablePasswordPolicy
	}
	return false
}

func (x *Identity) GetEnforceMfa() bool {
	if x != nil {
		return x.EnforceMfa
	}
	return false
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Identity) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Identity) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *Identity) GetLoginDefenderEnabled() bool {
	if x != nil {
		return x.LoginDefenderEnabled
	}
	return false
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *Identity) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Identity) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *Identity) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Identity) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Identity) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Identity) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Identity) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Identity) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Image is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Image struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Image_ContainerImage
	//	*Image_VmImage
	Type          isImage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_api_ontology_ontology_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{76}
}

func (x *Image) GetType() isImage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Image) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Image_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Image) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Image_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

type isImage_Type interface {
	isImage_Type()
}

type Image_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Image_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

func (*Image_ContainerImage) isImage_Type() {}

func (*Image_VmImage) isImage_Type() {}

// Immutability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Immutability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1859,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Immutability) Reset() {
	*x = Immutability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Immutability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immutability) ProtoMessage() {}

func (x *Immutability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immutability.ProtoReflect.Descriptor instead.
func (*Immutability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{77}
}

func (x *Immutability) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Integrity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Integrity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Integrity_LocalAttestation
	//	*Integrity_RemoteAttestation
	//	*Integrity_AutomaticUpdates
	//	*Integrity_DocumentChecksum
	//	*Integrity_Immutability
	//	*Integrity_DocumentSignature
	Type          isIntegrity_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Integrity) Reset() {
	*x = Integrity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Integrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrity) ProtoMessage() {}

func (x *Integrity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrity.ProtoReflect.Descriptor instead.
func (*Integrity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{78}
}

func (x *Integrity) GetType() isIntegrity_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Integrity) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*Integrity_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *Integrity) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*Integrity_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

func (x *Integrity) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		if x, ok := x.Type.(*Integrity_AutomaticUpdates); ok {
			return x.AutomaticUpdates
		}
	}
	return nil
}

func (x *Integrity) GetDocumentChecksum() *DocumentChecksum {
	if x != nil {
		if x, ok := x.Type.(*Integrity_DocumentChecksum); ok {
			return x.DocumentChecksum
		}
	}
	return nil
}

func (x *Integrity) GetImmutability() *Immutability {
	if x != nil {
		if x, ok := x.Type.(*Integrity_Immutability); ok {
			return x.Immutability
		}
	}
	return nil
}

func (x *Integrity) GetDocumentSignature() *DocumentSignature {
	if x != nil {
		if x, ok := x.Type.(*Integrity_DocumentSignature); ok {
			return x.DocumentSignature
		}
	}
	return nil
}

type isIntegrity_Type interface {
	isIntegrity_Type()
}

type Integrity_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type Integrity_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

type Integrity_AutomaticUpdates struct {
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,9990,opt,name=automatic_updates,json=automaticUpdates,proto3,oneof"`
}

type Integrity_DocumentChecksum struct {
	DocumentChecksum *DocumentChecksum `protobuf:"bytes,16099,opt,name=document_checksum,json=documentChecksum,proto3,oneof"`
}

type Integrity_Immutability struct {
	Immutability *Immutability `protobuf:"bytes,2008,opt,name=immutability,proto3,oneof"`
}

type Integrity_DocumentSignature struct {
	DocumentSignature *DocumentSignature `protobuf:"bytes,7943,opt,name=document_signature,json=documentSignature,proto3,oneof"`
}

func (*Integrity_LocalAttestation) isIntegrity_Type() {}

func (*Integrity_RemoteAttestation) isIntegrity_Type() {}

func (*Integrity_AutomaticUpdates) isIntegrity_Type() {}

func (*Integrity_DocumentChecksum) isIntegrity_Type() {}

func (*Integrity_Immutability) isIntegrity_Type() {}

func (*Integrity_DocumentSignature) isIntegrity_Type() {}

// IoT is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type IoT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*IoT_DeviceProvisioningService
	//	*IoT_MessagingHub
	Type          isIoT_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IoT) Reset() {
	*x = IoT{}
	mi := &file_api_ontology_ontology_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IoT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoT) ProtoMessage() {}

func (x *IoT) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoT.ProtoReflect.Descriptor instead.
func (*IoT) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{79}
}

func (x *IoT) GetType() isIoT_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IoT) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*IoT_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *IoT) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*IoT_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

type isIoT_Type interface {
	isIoT_Type()
}

type IoT_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type IoT_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

func (*IoT_DeviceProvisioningService) isIoT_Type() {}

func (*IoT_MessagingHub) isIoT_Type() {}

// Job is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Job struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,2948,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,7869,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,14780,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5659,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17969,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18498,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,5776,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,2037,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,7884,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,12361,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,15338,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,11249,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_api_ontology_ontology_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{80}
}

func (x *Job) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Job) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Job) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Job) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Job) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Job) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Job) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// TokenBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type TokenBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,1232,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,10600,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Enforced         bool                   `protobuf:"varint,6934,opt,name=enforced,proto3" json:"enforced,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TokenBasedAuthentication) Reset() {
	*x = TokenBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBasedAuthentication) ProtoMessage() {}

func (x *TokenBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBasedAuthentication.ProtoReflect.Descriptor instead.
func (*TokenBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{81}
}

func (x *TokenBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *TokenBasedAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TokenBasedAuthentication) GetEnforced() bool {
	if x != nil {
		return x.Enforced
	}
	return false
}

// Key is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Key struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Algorithm                  string                 `protobuf:"bytes,1413,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4922,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17406,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,12499,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,15098,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,15294,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,434,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,16202,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	KeySize                    int32                  `protobuf:"varint,16391,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4273,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18961,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,235,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,11846,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,16066,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,15145,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Loggings         []*Logging       `protobuf:"bytes,360,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,12591,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,4414,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,9113,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_api_ontology_ontology_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{82}
}

func (x *Key) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Key) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Key) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Key) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Key) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Key) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Key) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *Key) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Key) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Key) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Key) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Key) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Key) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Key) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Key) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Key) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Key) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// KeyValueDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type KeyValueDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,15632,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,1436,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,14675,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,1908,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,10855,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,13607,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11207,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,6710,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,14509,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,1125,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,18959,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,11723,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,11235,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,6514,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,15867,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,5263,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,10213,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,281,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,18945,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,3747,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,14846,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,5751,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,4417,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *KeyValueDatabaseService) Reset() {
	*x = KeyValueDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueDatabaseService) ProtoMessage() {}

func (x *KeyValueDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueDatabaseService.ProtoReflect.Descriptor instead.
func (*KeyValueDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{83}
}

func (x *KeyValueDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *KeyValueDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KeyValueDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyValueDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *KeyValueDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *KeyValueDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KeyValueDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyValueDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *KeyValueDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *KeyValueDatabaseService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *KeyValueDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *KeyValueDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *KeyValueDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *KeyValueDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *KeyValueDatabaseService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *KeyValueDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *KeyValueDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *KeyValueDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *KeyValueDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *KeyValueDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// KeyVault is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type KeyVault struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13116,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4543,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11681,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15576,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,11857,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,5705,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16199,opt,name=raw,proto3" json:"raw,omitempty"`
	CredentialIds   []string         `protobuf:"bytes,17792,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,413,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,3020,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2540,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,18361,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,5303,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeyVault) Reset() {
	*x = KeyVault{}
	mi := &file_api_ontology_ontology_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVault) ProtoMessage() {}

func (x *KeyVault) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVault.ProtoReflect.Descriptor instead.
func (*KeyVault) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{84}
}

func (x *KeyVault) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *KeyVault) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KeyVault) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyVault) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *KeyVault) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KeyVault) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyVault) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *KeyVault) GetCredentialIds() []string {
	if x != nil {
		return x.CredentialIds
	}
	return nil
}

func (x *KeyVault) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *KeyVault) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *KeyVault) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *KeyVault) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *KeyVault) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// L3Firewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type L3Firewall struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,9476,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Inbound         bool                   `protobuf:"varint,1000,opt,name=inbound,proto3" json:"inbound,omitempty"`
	RestrictedPorts string                 `protobuf:"bytes,7341,opt,name=restricted_ports,json=restrictedPorts,proto3" json:"restricted_ports,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *L3Firewall) Reset() {
	*x = L3Firewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L3Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3Firewall) ProtoMessage() {}

func (x *L3Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3Firewall.ProtoReflect.Descriptor instead.
func (*L3Firewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{85}
}

func (x *L3Firewall) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *L3Firewall) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *L3Firewall) GetRestrictedPorts() string {
	if x != nil {
		return x.RestrictedPorts
	}
	return ""
}

// Library is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Library struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,11987,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,2499,opt,name=description,proto3" json:"description,omitempty"`
	Id           string                 `protobuf:"bytes,11694,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,7546,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,18601,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,9988,opt,name=raw,proto3" json:"raw,omitempty"`
	CodeModuleIds    []string         `protobuf:"bytes,9719,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string          `protobuf:"bytes,295,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	Functionalities  []*Functionality `protobuf:"bytes,10589,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	LibraryIds       []string         `protobuf:"bytes,9020,rep,name=library_ids,json=libraryIds,proto3" json:"library_ids,omitempty"`
	ParentId         *string          `protobuf:"bytes,2928,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Vulnerabilities  []*Vulnerability `protobuf:"bytes,3131,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Library) Reset() {
	*x = Library{}
	mi := &file_api_ontology_ontology_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{86}
}

func (x *Library) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Library) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Library) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Library) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Library) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Library) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *Library) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *Library) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *Library) GetLibraryIds() []string {
	if x != nil {
		return x.LibraryIds
	}
	return nil
}

func (x *Library) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Library) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

// LoadBalancer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A Load Balancer may have multiple access restriction features, e.g. a L3 firewall and a WAF
type LoadBalancer struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,2708,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2822,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,8281,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16617,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,12489,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1121,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,16420,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,5004,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,16379,opt,name=raw,proto3" json:"raw,omitempty"`
	Url                       string               `protobuf:"bytes,2355,opt,name=url,proto3" json:"url,omitempty"`
	AccessRestriction         *AccessRestriction   `protobuf:"bytes,6911,opt,name=access_restriction,json=accessRestriction,proto3" json:"access_restriction,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,4102,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,4301,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,17490,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoints             []*HttpEndpoint      `protobuf:"bytes,10792,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,6664,rep,name=loggings,proto3" json:"loggings,omitempty"`
	NetworkServiceIds         []string             `protobuf:"bytes,14537,rep,name=network_service_ids,json=networkServiceIds,proto3" json:"network_service_ids,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,10689,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,3822,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,8705,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,9485,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,16809,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	mi := &file_api_ontology_ontology_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{87}
}

func (x *LoadBalancer) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *LoadBalancer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoadBalancer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoadBalancer) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *LoadBalancer) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *LoadBalancer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancer) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *LoadBalancer) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *LoadBalancer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoadBalancer) GetAccessRestriction() *AccessRestriction {
	if x != nil {
		return x.AccessRestriction
	}
	return nil
}

func (x *LoadBalancer) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *LoadBalancer) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *LoadBalancer) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *LoadBalancer) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

func (x *LoadBalancer) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *LoadBalancer) GetNetworkServiceIds() []string {
	if x != nil {
		return x.NetworkServiceIds
	}
	return nil
}

func (x *LoadBalancer) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *LoadBalancer) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *LoadBalancer) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *LoadBalancer) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *LoadBalancer) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// LocalAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalAttestation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,12670,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalAttestation) Reset() {
	*x = LocalAttestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAttestation) ProtoMessage() {}

func (x *LocalAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAttestation.ProtoReflect.Descriptor instead.
func (*LocalAttestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{88}
}

func (x *LocalAttestation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// LocalDataLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalDataLocation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Path             string                 `protobuf:"bytes,16659,opt,name=path,proto3" json:"path,omitempty"`
	AtRestEncryption *AtRestEncryption      `protobuf:"bytes,15797,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	StorageId        *string                `protobuf:"bytes,8744,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LocalDataLocation) Reset() {
	*x = LocalDataLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDataLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDataLocation) ProtoMessage() {}

func (x *LocalDataLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDataLocation.ProtoReflect.Descriptor instead.
func (*LocalDataLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{89}
}

func (x *LocalDataLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LocalDataLocation) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *LocalDataLocation) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

// LocalRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,5006,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalRedundancy) Reset() {
	*x = LocalRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalRedundancy) ProtoMessage() {}

func (x *LocalRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalRedundancy.ProtoReflect.Descriptor instead.
func (*LocalRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{90}
}

func (x *LocalRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

// LogOperation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A LogOperation is used by an application
type LogOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Call          string                 `protobuf:"bytes,6418,opt,name=call,proto3" json:"call,omitempty"`
	Value         string                 `protobuf:"bytes,7549,opt,name=value,proto3" json:"value,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,11664,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	Logging       *Logging               `protobuf:"bytes,12393,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogOperation) Reset() {
	*x = LogOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOperation) ProtoMessage() {}

func (x *LogOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOperation.ProtoReflect.Descriptor instead.
func (*LogOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{91}
}

func (x *LogOperation) GetCall() string {
	if x != nil {
		return x.Call
	}
	return ""
}

func (x *LogOperation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LogOperation) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *LogOperation) GetLogging() *Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

// Logger is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Logger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_api_ontology_ontology_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{92}
}

// Logging is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Logging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Logging_ActivityLogging
	//	*Logging_ApplicationLogging
	//	*Logging_BootLogging
	//	*Logging_OsLogging
	//	*Logging_ResourceLogging
	Type          isLogging_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logging) Reset() {
	*x = Logging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging) ProtoMessage() {}

func (x *Logging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging.ProtoReflect.Descriptor instead.
func (*Logging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{93}
}

func (x *Logging) GetType() isLogging_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Logging) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *Logging) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *Logging) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *Logging) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *Logging) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

type isLogging_Type interface {
	isLogging_Type()
}

type Logging_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type Logging_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type Logging_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type Logging_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type Logging_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

func (*Logging_ActivityLogging) isLogging_Type() {}

func (*Logging_ApplicationLogging) isLogging_Type() {}

func (*Logging_BootLogging) isLogging_Type() {}

func (*Logging_OsLogging) isLogging_Type() {}

func (*Logging_ResourceLogging) isLogging_Type() {}

// LoggingService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A logging-as-a-service offering, e.g. for analyzing logs; has a Storage resource that stores the logs
type LoggingService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13718,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,15076,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,10888,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,3605,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,4262,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,769,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,3964,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,2549,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,3703,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,15306,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,10285,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,4238,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,5453,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,1550,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,258,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,16013,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7044,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,17323,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,1203,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LoggingService) Reset() {
	*x = LoggingService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingService) ProtoMessage() {}

func (x *LoggingService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingService.ProtoReflect.Descriptor instead.
func (*LoggingService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{94}
}

func (x *LoggingService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *LoggingService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoggingService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoggingService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *LoggingService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *LoggingService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoggingService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoggingService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *LoggingService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *LoggingService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *LoggingService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *LoggingService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *LoggingService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *LoggingService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *LoggingService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *LoggingService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *LoggingService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *LoggingService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *LoggingService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// MachineLearning is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type MachineLearning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*MachineLearning_MachineLearningDataset
	//	*MachineLearning_MachineLearningModel
	Type          isMachineLearning_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineLearning) Reset() {
	*x = MachineLearning{}
	mi := &file_api_ontology_ontology_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineLearning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLearning) ProtoMessage() {}

func (x *MachineLearning) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLearning.ProtoReflect.Descriptor instead.
func (*MachineLearning) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{95}
}

func (x *MachineLearning) GetType() isMachineLearning_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MachineLearning) GetMachineLearningDataset() *MachineLearningDataset {
	if x != nil {
		if x, ok := x.Type.(*MachineLearning_MachineLearningDataset); ok {
			return x.MachineLearningDataset
		}
	}
	return nil
}

func (x *MachineLearning) GetMachineLearningModel() *MachineLearningModel {
	if x != nil {
		if x, ok := x.Type.(*MachineLearning_MachineLearningModel); ok {
			return x.MachineLearningModel
		}
	}
	return nil
}

type isMachineLearning_Type interface {
	isMachineLearning_Type()
}

type MachineLearning_MachineLearningDataset struct {
	MachineLearningDataset *MachineLearningDataset `protobuf:"bytes,2040,opt,name=machine_learning_dataset,json=machineLearningDataset,proto3,oneof"`
}

type MachineLearning_MachineLearningModel struct {
	MachineLearningModel *MachineLearningModel `protobuf:"bytes,15393,opt,name=machine_learning_model,json=machineLearningModel,proto3,oneof"`
}

func (*MachineLearning_MachineLearningDataset) isMachineLearning_Type() {}

func (*MachineLearning_MachineLearningModel) isMachineLearning_Type() {}

// MachineLearningDataset is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MachineLearningDataset struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,14589,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,4701,opt,name=description,proto3" json:"description,omitempty"`
	Id           string                 `protobuf:"bytes,13709,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,3339,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,14431,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw           string        `protobuf:"bytes,6307,opt,name=raw,proto3" json:"raw,omitempty"`
	Size          int32         `protobuf:"varint,7901,opt,name=size,proto3" json:"size,omitempty"`
	Type          string        `protobuf:"bytes,5204,opt,name=type,proto3" json:"type,omitempty"`
	DataLocation  *DataLocation `protobuf:"bytes,3137,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	ParentId      *string       `protobuf:"bytes,6542,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineLearningDataset) Reset() {
	*x = MachineLearningDataset{}
	mi := &file_api_ontology_ontology_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineLearningDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLearningDataset) ProtoMessage() {}

func (x *MachineLearningDataset) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLearningDataset.ProtoReflect.Descriptor instead.
func (*MachineLearningDataset) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{96}
}

func (x *MachineLearningDataset) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MachineLearningDataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineLearningDataset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MachineLearningDataset) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineLearningDataset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineLearningDataset) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MachineLearningDataset) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MachineLearningDataset) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MachineLearningDataset) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *MachineLearningDataset) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// MachineLearningModel is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MachineLearningModel struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AdvRobustness  float32                `protobuf:"fixed32,14185,opt,name=adv_robustness,json=advRobustness,proto3" json:"adv_robustness,omitempty"`
	CreationTime   *timestamppb.Timestamp `protobuf:"bytes,18005,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description    string                 `protobuf:"bytes,5272,opt,name=description,proto3" json:"description,omitempty"`
	Explainability float32                `protobuf:"fixed32,1384,opt,name=explainability,proto3" json:"explainability,omitempty"`
	Id             string                 `protobuf:"bytes,5520,opt,name=id,proto3" json:"id,omitempty"`
	Labels         map[string]string      `protobuf:"bytes,1548,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name           string                 `protobuf:"bytes,1575,opt,name=name,proto3" json:"name,omitempty"`
	PoisonLevel    float32                `protobuf:"fixed32,836,opt,name=poison_level,json=poisonLevel,proto3" json:"poison_level,omitempty"`
	PrivacyLabel   float32                `protobuf:"fixed32,8059,opt,name=privacy_label,json=privacyLabel,proto3" json:"privacy_label,omitempty"`
	PrivacyLevel   float32                `protobuf:"fixed32,1262,opt,name=privacy_level,json=privacyLevel,proto3" json:"privacy_level,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw           string        `protobuf:"bytes,12454,opt,name=raw,proto3" json:"raw,omitempty"`
	Robustness    float32       `protobuf:"fixed32,13582,opt,name=robustness,proto3" json:"robustness,omitempty"`
	DataLocation  *DataLocation `protobuf:"bytes,2998,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	ParentId      *string       `protobuf:"bytes,15494,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineLearningModel) Reset() {
	*x = MachineLearningModel{}
	mi := &file_api_ontology_ontology_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineLearningModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLearningModel) ProtoMessage() {}

func (x *MachineLearningModel) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLearningModel.ProtoReflect.Descriptor instead.
func (*MachineLearningModel) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{97}
}

func (x *MachineLearningModel) GetAdvRobustness() float32 {
	if x != nil {
		return x.AdvRobustness
	}
	return 0
}

func (x *MachineLearningModel) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MachineLearningModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineLearningModel) GetExplainability() float32 {
	if x != nil {
		return x.Explainability
	}
	return 0
}

func (x *MachineLearningModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MachineLearningModel) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineLearningModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineLearningModel) GetPoisonLevel() float32 {
	if x != nil {
		return x.PoisonLevel
	}
	return 0
}

func (x *MachineLearningModel) GetPrivacyLabel() float32 {
	if x != nil {
		return x.PrivacyLabel
	}
	return 0
}

func (x *MachineLearningModel) GetPrivacyLevel() float32 {
	if x != nil {
		return x.PrivacyLevel
	}
	return 0
}

func (x *MachineLearningModel) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MachineLearningModel) GetRobustness() float32 {
	if x != nil {
		return x.Robustness
	}
	return 0
}

func (x *MachineLearningModel) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *MachineLearningModel) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// MachineLearningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MachineLearningService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,18259,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2080,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,14176,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16109,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,11814,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18935,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,6061,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,6816,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,5983,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,7702,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,10831,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,3308,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,6059,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MachineLearningIds        []string             `protobuf:"bytes,6901,rep,name=machine_learning_ids,json=machineLearningIds,proto3" json:"machine_learning_ids,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,16726,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,2223,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,10709,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,161,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,17009,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,5491,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MachineLearningService) Reset() {
	*x = MachineLearningService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineLearningService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLearningService) ProtoMessage() {}

func (x *MachineLearningService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLearningService.ProtoReflect.Descriptor instead.
func (*MachineLearningService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{98}
}

func (x *MachineLearningService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MachineLearningService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MachineLearningService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MachineLearningService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MachineLearningService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MachineLearningService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MachineLearningService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineLearningService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *MachineLearningService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MachineLearningService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *MachineLearningService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *MachineLearningService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MachineLearningService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *MachineLearningService) GetMachineLearningIds() []string {
	if x != nil {
		return x.MachineLearningIds
	}
	return nil
}

func (x *MachineLearningService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MachineLearningService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MachineLearningService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *MachineLearningService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *MachineLearningService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *MachineLearningService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// MalwareProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// analyzes the activity within a Compute resource
type MalwareProtection struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DurationSinceActive  *durationpb.Duration   `protobuf:"bytes,18754,opt,name=duration_since_active,json=durationSinceActive,proto3" json:"duration_since_active,omitempty"`
	Enabled              bool                   `protobuf:"varint,18004,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NumberOfThreatsFound int32                  `protobuf:"varint,11973,opt,name=number_of_threats_found,json=numberOfThreatsFound,proto3" json:"number_of_threats_found,omitempty"`
	ApplicationLogging   *ApplicationLogging    `protobuf:"bytes,8181,opt,name=application_logging,json=applicationLogging,proto3" json:"application_logging,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MalwareProtection) Reset() {
	*x = MalwareProtection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalwareProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareProtection) ProtoMessage() {}

func (x *MalwareProtection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareProtection.ProtoReflect.Descriptor instead.
func (*MalwareProtection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{99}
}

func (x *MalwareProtection) GetDurationSinceActive() *durationpb.Duration {
	if x != nil {
		return x.DurationSinceActive
	}
	return nil
}

func (x *MalwareProtection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MalwareProtection) GetNumberOfThreatsFound() int32 {
	if x != nil {
		return x.NumberOfThreatsFound
	}
	return 0
}

func (x *MalwareProtection) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		return x.ApplicationLogging
	}
	return nil
}

// ManagedKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ManagedKeyEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,2563,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Enabled       bool                   `protobuf:"varint,18264,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeyUrl        string                 `protobuf:"bytes,16266,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagedKeyEncryption) Reset() {
	*x = ManagedKeyEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedKeyEncryption) ProtoMessage() {}

func (x *ManagedKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedKeyEncryption.ProtoReflect.Descriptor instead.
func (*ManagedKeyEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{100}
}

func (x *ManagedKeyEncryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *ManagedKeyEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ManagedKeyEncryption) GetKeyUrl() string {
	if x != nil {
		return x.KeyUrl
	}
	return ""
}

// MessagingHub is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MessagingHub struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,8454,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11913,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7039,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5261,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4650,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,4131,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,6465,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,10702,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,868,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18734,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2352,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,13729,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessagingHub) Reset() {
	*x = MessagingHub{}
	mi := &file_api_ontology_ontology_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingHub) ProtoMessage() {}

func (x *MessagingHub) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingHub.ProtoReflect.Descriptor instead.
func (*MessagingHub) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{101}
}

func (x *MessagingHub) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MessagingHub) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessagingHub) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessagingHub) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MessagingHub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MessagingHub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessagingHub) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MessagingHub) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MessagingHub) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *MessagingHub) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MessagingHub) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MessagingHub) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// CodeModule is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type CodeModule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CodeModule_SourceCodeFile
	Type          isCodeModule_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeModule) Reset() {
	*x = CodeModule{}
	mi := &file_api_ontology_ontology_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeModule) ProtoMessage() {}

func (x *CodeModule) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeModule.ProtoReflect.Descriptor instead.
func (*CodeModule) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{102}
}

func (x *CodeModule) GetType() isCodeModule_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CodeModule) GetSourceCodeFile() *SourceCodeFile {
	if x != nil {
		if x, ok := x.Type.(*CodeModule_SourceCodeFile); ok {
			return x.SourceCodeFile
		}
	}
	return nil
}

type isCodeModule_Type interface {
	isCodeModule_Type()
}

type CodeModule_SourceCodeFile struct {
	SourceCodeFile *SourceCodeFile `protobuf:"bytes,2804,opt,name=source_code_file,json=sourceCodeFile,proto3,oneof"`
}

func (*CodeModule_SourceCodeFile) isCodeModule_Type() {}

// MultiFactorAuthentiation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MultiFactorAuthentiation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,17335,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Authenticities   []*Authenticity        `protobuf:"bytes,14915,rep,name=authenticities,proto3" json:"authenticities,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MultiFactorAuthentiation) Reset() {
	*x = MultiFactorAuthentiation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiFactorAuthentiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFactorAuthentiation) ProtoMessage() {}

func (x *MultiFactorAuthentiation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFactorAuthentiation.ProtoReflect.Descriptor instead.
func (*MultiFactorAuthentiation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{103}
}

func (x *MultiFactorAuthentiation) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *MultiFactorAuthentiation) GetAuthenticities() []*Authenticity {
	if x != nil {
		return x.Authenticities
	}
	return nil
}

// MultiModalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This class represents a database service that identifies itself as "multi-model", e.g., offers document storage as well as relational features.
type MultiModalDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10465,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,15631,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,5439,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16156,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,8280,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,7492,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13533,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,5,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,17449,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,6692,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,7208,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,12713,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,18111,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,4221,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,8906,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,15824,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,13719,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,9020,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,4408,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,13625,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7826,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,3867,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,10570,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MultiModalDatabaseService) Reset() {
	*x = MultiModalDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiModalDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModalDatabaseService) ProtoMessage() {}

func (x *MultiModalDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModalDatabaseService.ProtoReflect.Descriptor instead.
func (*MultiModalDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{104}
}

func (x *MultiModalDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MultiModalDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MultiModalDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiModalDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MultiModalDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MultiModalDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MultiModalDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiModalDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *MultiModalDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MultiModalDatabaseService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *MultiModalDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *MultiModalDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *MultiModalDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MultiModalDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *MultiModalDatabaseService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *MultiModalDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *MultiModalDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MultiModalDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *MultiModalDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *MultiModalDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkInterface is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NetworkInterface struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,5497,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10885,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17981,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14370,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4721,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12404,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw               string             `protobuf:"bytes,5176,opt,name=raw,proto3" json:"raw,omitempty"`
	AccessRestriction *AccessRestriction `protobuf:"bytes,15102,opt,name=access_restriction,json=accessRestriction,proto3" json:"access_restriction,omitempty"`
	GeoLocation       *GeoLocation       `protobuf:"bytes,8368,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings          []*Logging         `protobuf:"bytes,4440,rep,name=loggings,proto3" json:"loggings,omitempty"`
	NetworkServiceId  *string            `protobuf:"bytes,16990,opt,name=network_service_id,json=networkServiceId,proto3,oneof" json:"network_service_id,omitempty"`
	Redundancies      []*Redundancy      `protobuf:"bytes,13764,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId          *string            `protobuf:"bytes,11276,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics   *UsageStatistics   `protobuf:"bytes,3807,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_api_ontology_ontology_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{105}
}

func (x *NetworkInterface) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *NetworkInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkInterface) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *NetworkInterface) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *NetworkInterface) GetAccessRestriction() *AccessRestriction {
	if x != nil {
		return x.AccessRestriction
	}
	return nil
}

func (x *NetworkInterface) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *NetworkInterface) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *NetworkInterface) GetNetworkServiceId() string {
	if x != nil && x.NetworkServiceId != nil {
		return *x.NetworkServiceId
	}
	return ""
}

func (x *NetworkInterface) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *NetworkInterface) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *NetworkInterface) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkSecurityGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NetworkSecurityGroup struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,7240,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,3524,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11635,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15045,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5905,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11440,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,11170,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,6795,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,7800,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,13648,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14499,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6140,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkSecurityGroup) Reset() {
	*x = NetworkSecurityGroup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSecurityGroup) ProtoMessage() {}

func (x *NetworkSecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSecurityGroup.ProtoReflect.Descriptor instead.
func (*NetworkSecurityGroup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{106}
}

func (x *NetworkSecurityGroup) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *NetworkSecurityGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkSecurityGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkSecurityGroup) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *NetworkSecurityGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkSecurityGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkSecurityGroup) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *NetworkSecurityGroup) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *NetworkSecurityGroup) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *NetworkSecurityGroup) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *NetworkSecurityGroup) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *NetworkSecurityGroup) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// A NetworkService is an application (on the network layer) running on a Compute resource. It provides access to a resource
// has: Compute instance the network service is running on. This can also be a compute resource within the cloud provider itself if it is a managed service (e.g. Azure App Service)
type NetworkService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*NetworkService_FunctionService
	//	*NetworkService_GenericNetworkService
	//	*NetworkService_LoadBalancer
	//	*NetworkService_LoggingService
	//	*NetworkService_MachineLearningService
	//	*NetworkService_SecurityAdvisoryService
	//	*NetworkService_DocumentDatabaseService
	//	*NetworkService_KeyValueDatabaseService
	//	*NetworkService_MultiModalDatabaseService
	//	*NetworkService_RelationalDatabaseService
	//	*NetworkService_FileStorageService
	//	*NetworkService_ObjectStorageService
	Type          isNetworkService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkService) Reset() {
	*x = NetworkService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkService) ProtoMessage() {}

func (x *NetworkService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkService.ProtoReflect.Descriptor instead.
func (*NetworkService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{107}
}

func (x *NetworkService) GetType() isNetworkService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NetworkService) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *NetworkService) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *NetworkService) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *NetworkService) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *NetworkService) GetMachineLearningService() *MachineLearningService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_MachineLearningService); ok {
			return x.MachineLearningService
		}
	}
	return nil
}

func (x *NetworkService) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *NetworkService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *NetworkService) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

type isNetworkService_Type interface {
	isNetworkService_Type()
}

type NetworkService_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type NetworkService_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type NetworkService_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type NetworkService_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type NetworkService_MachineLearningService struct {
	MachineLearningService *MachineLearningService `protobuf:"bytes,16966,opt,name=machine_learning_service,json=machineLearningService,proto3,oneof"`
}

type NetworkService_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type NetworkService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type NetworkService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type NetworkService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type NetworkService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type NetworkService_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type NetworkService_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

func (*NetworkService_FunctionService) isNetworkService_Type() {}

func (*NetworkService_GenericNetworkService) isNetworkService_Type() {}

func (*NetworkService_LoadBalancer) isNetworkService_Type() {}

func (*NetworkService_LoggingService) isNetworkService_Type() {}

func (*NetworkService_MachineLearningService) isNetworkService_Type() {}

func (*NetworkService_SecurityAdvisoryService) isNetworkService_Type() {}

func (*NetworkService_DocumentDatabaseService) isNetworkService_Type() {}

func (*NetworkService_KeyValueDatabaseService) isNetworkService_Type() {}

func (*NetworkService_MultiModalDatabaseService) isNetworkService_Type() {}

func (*NetworkService_RelationalDatabaseService) isNetworkService_Type() {}

func (*NetworkService_FileStorageService) isNetworkService_Type() {}

func (*NetworkService_ObjectStorageService) isNetworkService_Type() {}

// Networking is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Networking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Networking_NetworkInterface
	//	*Networking_NetworkSecurityGroup
	//	*Networking_FunctionService
	//	*Networking_GenericNetworkService
	//	*Networking_LoadBalancer
	//	*Networking_LoggingService
	//	*Networking_MachineLearningService
	//	*Networking_SecurityAdvisoryService
	//	*Networking_DocumentDatabaseService
	//	*Networking_KeyValueDatabaseService
	//	*Networking_MultiModalDatabaseService
	//	*Networking_RelationalDatabaseService
	//	*Networking_FileStorageService
	//	*Networking_ObjectStorageService
	//	*Networking_VirtualNetwork
	//	*Networking_VirtualSubNetwork
	Type          isNetworking_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networking) Reset() {
	*x = Networking{}
	mi := &file_api_ontology_ontology_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networking) ProtoMessage() {}

func (x *Networking) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networking.ProtoReflect.Descriptor instead.
func (*Networking) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{108}
}

func (x *Networking) GetType() isNetworking_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Networking) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Networking_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Networking) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Networking_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Networking) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Networking_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Networking) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Networking_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Networking) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Networking_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Networking) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Networking_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Networking) GetMachineLearningService() *MachineLearningService {
	if x != nil {
		if x, ok := x.Type.(*Networking_MachineLearningService); ok {
			return x.MachineLearningService
		}
	}
	return nil
}

func (x *Networking) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Networking_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Networking) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Networking_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Networking) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Networking_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Networking) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Networking_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Networking) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Networking_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

type isNetworking_Type interface {
	isNetworking_Type()
}

type Networking_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Networking_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Networking_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Networking_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Networking_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Networking_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Networking_MachineLearningService struct {
	MachineLearningService *MachineLearningService `protobuf:"bytes,16966,opt,name=machine_learning_service,json=machineLearningService,proto3,oneof"`
}

type Networking_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Networking_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Networking_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Networking_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Networking_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Networking_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Networking_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Networking_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Networking_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

func (*Networking_NetworkInterface) isNetworking_Type() {}

func (*Networking_NetworkSecurityGroup) isNetworking_Type() {}

func (*Networking_FunctionService) isNetworking_Type() {}

func (*Networking_GenericNetworkService) isNetworking_Type() {}

func (*Networking_LoadBalancer) isNetworking_Type() {}

func (*Networking_LoggingService) isNetworking_Type() {}

func (*Networking_MachineLearningService) isNetworking_Type() {}

func (*Networking_SecurityAdvisoryService) isNetworking_Type() {}

func (*Networking_DocumentDatabaseService) isNetworking_Type() {}

func (*Networking_KeyValueDatabaseService) isNetworking_Type() {}

func (*Networking_MultiModalDatabaseService) isNetworking_Type() {}

func (*Networking_RelationalDatabaseService) isNetworking_Type() {}

func (*Networking_FileStorageService) isNetworking_Type() {}

func (*Networking_ObjectStorageService) isNetworking_Type() {}

func (*Networking_VirtualNetwork) isNetworking_Type() {}

func (*Networking_VirtualSubNetwork) isNetworking_Type() {}

// NoAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NoAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,12023,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NoAuthentication) Reset() {
	*x = NoAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoAuthentication) ProtoMessage() {}

func (x *NoAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoAuthentication.ProtoReflect.Descriptor instead.
func (*NoAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{109}
}

func (x *NoAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// OSLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type OSLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,207,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,12434,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,11358,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,7453,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *OSLogging) Reset() {
	*x = OSLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSLogging) ProtoMessage() {}

func (x *OSLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSLogging.ProtoReflect.Descriptor instead.
func (*OSLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{110}
}

func (x *OSLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *OSLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *OSLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *OSLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

// OTPBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type OTPBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Activated        bool                   `protobuf:"varint,7456,opt,name=activated,proto3" json:"activated,omitempty"`
	ContextIsChecked bool                   `protobuf:"varint,18913,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OTPBasedAuthentication) Reset() {
	*x = OTPBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OTPBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTPBasedAuthentication) ProtoMessage() {}

func (x *OTPBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTPBasedAuthentication.ProtoReflect.Descriptor instead.
func (*OTPBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{111}
}

func (x *OTPBasedAuthentication) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *OTPBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// ObjectStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ObjectStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3389,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,7516,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4155,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,18085,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15572,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13009,opt,name=name,proto3" json:"name,omitempty"`
	PublicAccess               bool                   `protobuf:"varint,4621,opt,name=public_access,json=publicAccess,proto3" json:"public_access,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,6632,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging  *ActivityLogging  `protobuf:"bytes,9147,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,2034,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,10118,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,8835,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,13608,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Loggings         []*Logging        `protobuf:"bytes,4403,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,3309,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,1663,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,3619,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,8818,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ObjectStorage) Reset() {
	*x = ObjectStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorage) ProtoMessage() {}

func (x *ObjectStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorage.ProtoReflect.Descriptor instead.
func (*ObjectStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{112}
}

func (x *ObjectStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ObjectStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ObjectStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectStorage) GetPublicAccess() bool {
	if x != nil {
		return x.PublicAccess
	}
	return false
}

func (x *ObjectStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ObjectStorage) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *ObjectStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *ObjectStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ObjectStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ObjectStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *ObjectStorage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ObjectStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ObjectStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ObjectStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *ObjectStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ObjectStorageRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ObjectStorageRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Source           string                 `protobuf:"bytes,178,opt,name=source,proto3" json:"source,omitempty"`
	CodeRegion       *CodeRegion            `protobuf:"bytes,18257,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	ObjectStorageIds []string               `protobuf:"bytes,2364,rep,name=object_storage_ids,json=objectStorageIds,proto3" json:"object_storage_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ObjectStorageRequest) Reset() {
	*x = ObjectStorageRequest{}
	mi := &file_api_ontology_ontology_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorageRequest) ProtoMessage() {}

func (x *ObjectStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorageRequest.ProtoReflect.Descriptor instead.
func (*ObjectStorageRequest) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{113}
}

func (x *ObjectStorageRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ObjectStorageRequest) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *ObjectStorageRequest) GetObjectStorageIds() []string {
	if x != nil {
		return x.ObjectStorageIds
	}
	return nil
}

// ObjectStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An object storage service represents the network service that is used to access a list of object storage containers. The storage itself is modelled as a ObjectStorage. The service has an http endpoint.
type ObjectStorageService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11795,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11196,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18683,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16284,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,17168,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17764,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1365,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,8166,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,16651,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,6581,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6852,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,4562,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,18831,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,6388,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,18299,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,11741,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,1174,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,9311,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,8237,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,7390,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,14005,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ObjectStorageService) Reset() {
	*x = ObjectStorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorageService) ProtoMessage() {}

func (x *ObjectStorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorageService.ProtoReflect.Descriptor instead.
func (*ObjectStorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{114}
}

func (x *ObjectStorageService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ObjectStorageService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectStorageService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectStorageService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ObjectStorageService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *ObjectStorageService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectStorageService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectStorageService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ObjectStorageService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ObjectStorageService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *ObjectStorageService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *ObjectStorageService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *ObjectStorageService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ObjectStorageService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *ObjectStorageService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ObjectStorageService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ObjectStorageService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ObjectStorageService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *ObjectStorageService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *ObjectStorageService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *ObjectStorageService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Operation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Operation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Operation_Decryption
	//	*Operation_Encryption
	//	*Operation_CryptographicHash
	//	*Operation_DatabaseConnect
	//	*Operation_DatabaseQuery
	//	*Operation_HttpRequest
	//	*Operation_LogOperation
	//	*Operation_ObjectStorageRequest
	Type          isOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{115}
}

func (x *Operation) GetType() isOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Operation) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*Operation_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *Operation) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*Operation_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *Operation) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*Operation_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

func (x *Operation) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*Operation_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *Operation) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*Operation_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

func (x *Operation) GetHttpRequest() *HttpRequest {
	if x != nil {
		if x, ok := x.Type.(*Operation_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *Operation) GetLogOperation() *LogOperation {
	if x != nil {
		if x, ok := x.Type.(*Operation_LogOperation); ok {
			return x.LogOperation
		}
	}
	return nil
}

func (x *Operation) GetObjectStorageRequest() *ObjectStorageRequest {
	if x != nil {
		if x, ok := x.Type.(*Operation_ObjectStorageRequest); ok {
			return x.ObjectStorageRequest
		}
	}
	return nil
}

type isOperation_Type interface {
	isOperation_Type()
}

type Operation_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type Operation_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type Operation_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

type Operation_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type Operation_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

type Operation_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,2901,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type Operation_LogOperation struct {
	LogOperation *LogOperation `protobuf:"bytes,14250,opt,name=log_operation,json=logOperation,proto3,oneof"`
}

type Operation_ObjectStorageRequest struct {
	ObjectStorageRequest *ObjectStorageRequest `protobuf:"bytes,16887,opt,name=object_storage_request,json=objectStorageRequest,proto3,oneof"`
}

func (*Operation_Decryption) isOperation_Type() {}

func (*Operation_Encryption) isOperation_Type() {}

func (*Operation_CryptographicHash) isOperation_Type() {}

func (*Operation_DatabaseConnect) isOperation_Type() {}

func (*Operation_DatabaseQuery) isOperation_Type() {}

func (*Operation_HttpRequest) isOperation_Type() {}

func (*Operation_LogOperation) isOperation_Type() {}

func (*Operation_ObjectStorageRequest) isOperation_Type() {}

// PasswordBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type PasswordBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Activated        bool                   `protobuf:"varint,11798,opt,name=activated,proto3" json:"activated,omitempty"`
	ContextIsChecked bool                   `protobuf:"varint,1362,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PasswordBasedAuthentication) Reset() {
	*x = PasswordBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordBasedAuthentication) ProtoMessage() {}

func (x *PasswordBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordBasedAuthentication.ProtoReflect.Descriptor instead.
func (*PasswordBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{116}
}

func (x *PasswordBasedAuthentication) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *PasswordBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// PasswordPolicy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type PasswordPolicy struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,1562,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,16661,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,2029,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14885,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,716,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,8966,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10264,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,4406,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,8348,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,3325,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2509,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,14852,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PasswordPolicy) Reset() {
	*x = PasswordPolicy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordPolicy) ProtoMessage() {}

func (x *PasswordPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordPolicy.ProtoReflect.Descriptor instead.
func (*PasswordPolicy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{117}
}

func (x *PasswordPolicy) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *PasswordPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasswordPolicy) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *PasswordPolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PasswordPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PasswordPolicy) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *PasswordPolicy) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *PasswordPolicy) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *PasswordPolicy) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *PasswordPolicy) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *PasswordPolicy) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// PolicyDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type PolicyDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,8545,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,1423,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,11838,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,6550,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,5677,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,2052,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,5038,opt,name=raw,proto3" json:"raw,omitempty"`
	DataLocation       *DataLocation        `protobuf:"bytes,8404,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,18616,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,11914,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,9358,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,15790,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,15024,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PolicyDocument) Reset() {
	*x = PolicyDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyDocument) ProtoMessage() {}

func (x *PolicyDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyDocument.ProtoReflect.Descriptor instead.
func (*PolicyDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{118}
}

func (x *PolicyDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *PolicyDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PolicyDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *PolicyDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PolicyDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *PolicyDocument) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *PolicyDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *PolicyDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *PolicyDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *PolicyDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *PolicyDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

// RBAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RBAC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
	BroadAssignments float32 `protobuf:"fixed32,5678,opt,name=broad_assignments,json=broadAssignments,proto3" json:"broad_assignments,omitempty"`
	// see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
	MixedDuties   float32 `protobuf:"fixed32,14446,opt,name=mixed_duties,json=mixedDuties,proto3" json:"mixed_duties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBAC) Reset() {
	*x = RBAC{}
	mi := &file_api_ontology_ontology_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBAC) ProtoMessage() {}

func (x *RBAC) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBAC.ProtoReflect.Descriptor instead.
func (*RBAC) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{119}
}

func (x *RBAC) GetBroadAssignments() float32 {
	if x != nil {
		return x.BroadAssignments
	}
	return 0
}

func (x *RBAC) GetMixedDuties() float32 {
	if x != nil {
		return x.MixedDuties
	}
	return 0
}

// Redundancy is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Redundancy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Redundancy_GeoRedundancy
	//	*Redundancy_LocalRedundancy
	//	*Redundancy_ZoneRedundancy
	Type          isRedundancy_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redundancy) Reset() {
	*x = Redundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redundancy) ProtoMessage() {}

func (x *Redundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redundancy.ProtoReflect.Descriptor instead.
func (*Redundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{120}
}

func (x *Redundancy) GetType() isRedundancy_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Redundancy) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *Redundancy) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *Redundancy) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

type isRedundancy_Type interface {
	isRedundancy_Type()
}

type Redundancy_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type Redundancy_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type Redundancy_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

func (*Redundancy_GeoRedundancy) isRedundancy_Type() {}

func (*Redundancy_LocalRedundancy) isRedundancy_Type() {}

func (*Redundancy_ZoneRedundancy) isRedundancy_Type() {}

// RelationalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RelationalDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10783,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12776,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,13147,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,12634,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,13907,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5189,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,10710,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,285,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,308,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging           *ActivityLogging     `protobuf:"bytes,7809,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,13020,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,18729,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,2744,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,5892,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Loggings                  []*Logging           `protobuf:"bytes,8431,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,12233,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,15094,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,4594,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,8061,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,4243,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,11409,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,9703,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RelationalDatabaseService) Reset() {
	*x = RelationalDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationalDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationalDatabaseService) ProtoMessage() {}

func (x *RelationalDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationalDatabaseService.ProtoReflect.Descriptor instead.
func (*RelationalDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{121}
}

func (x *RelationalDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RelationalDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelationalDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationalDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *RelationalDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *RelationalDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RelationalDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationalDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *RelationalDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *RelationalDatabaseService) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *RelationalDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *RelationalDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RelationalDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *RelationalDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *RelationalDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *RelationalDatabaseService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *RelationalDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *RelationalDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *RelationalDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *RelationalDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *RelationalDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *RelationalDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *RelationalDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Reliability is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Reliability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Reliability_ExplainableResults
	//	*Reliability_RobustnessScore
	Type          isReliability_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reliability) Reset() {
	*x = Reliability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reliability) ProtoMessage() {}

func (x *Reliability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reliability.ProtoReflect.Descriptor instead.
func (*Reliability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{122}
}

func (x *Reliability) GetType() isReliability_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Reliability) GetExplainableResults() *ExplainableResults {
	if x != nil {
		if x, ok := x.Type.(*Reliability_ExplainableResults); ok {
			return x.ExplainableResults
		}
	}
	return nil
}

func (x *Reliability) GetRobustnessScore() *RobustnessScore {
	if x != nil {
		if x, ok := x.Type.(*Reliability_RobustnessScore); ok {
			return x.RobustnessScore
		}
	}
	return nil
}

type isReliability_Type interface {
	isReliability_Type()
}

type Reliability_ExplainableResults struct {
	ExplainableResults *ExplainableResults `protobuf:"bytes,6217,opt,name=explainable_results,json=explainableResults,proto3,oneof"`
}

type Reliability_RobustnessScore struct {
	RobustnessScore *RobustnessScore `protobuf:"bytes,12988,opt,name=robustness_score,json=robustnessScore,proto3,oneof"`
}

func (*Reliability_ExplainableResults) isReliability_Type() {}

func (*Reliability_RobustnessScore) isReliability_Type() {}

// RemoteAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RemoteAttestation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreationTime  *timestamppb.Timestamp `protobuf:"bytes,7501,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Enabled       bool                   `protobuf:"varint,1238,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Status        bool                   `protobuf:"varint,9341,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteAttestation) Reset() {
	*x = RemoteAttestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAttestation) ProtoMessage() {}

func (x *RemoteAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAttestation.ProtoReflect.Descriptor instead.
func (*RemoteAttestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{123}
}

func (x *RemoteAttestation) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RemoteAttestation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RemoteAttestation) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// RemoteDataLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RemoteDataLocation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Path                string                 `protobuf:"bytes,5099,opt,name=path,proto3" json:"path,omitempty"`
	Authenticity        *Authenticity          `protobuf:"bytes,2095,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	StorageId           *string                `protobuf:"bytes,15169,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
	TransportEncryption *TransportEncryption   `protobuf:"bytes,3553,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RemoteDataLocation) Reset() {
	*x = RemoteDataLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteDataLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataLocation) ProtoMessage() {}

func (x *RemoteDataLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataLocation.ProtoReflect.Descriptor instead.
func (*RemoteDataLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{124}
}

func (x *RemoteDataLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoteDataLocation) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RemoteDataLocation) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

func (x *RemoteDataLocation) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// Resource is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Resource_Account
	//	*Resource_Job
	//	*Resource_Workflow
	//	*Resource_CodeRepository
	//	*Resource_Container
	//	*Resource_Function
	//	*Resource_VirtualMachine
	//	*Resource_ContainerOrchestration
	//	*Resource_ContainerRegistry
	//	*Resource_Certificate
	//	*Resource_Key
	//	*Resource_Secret
	//	*Resource_Identity
	//	*Resource_RoleAssignment
	//	*Resource_ContainerImage
	//	*Resource_VmImage
	//	*Resource_DeviceProvisioningService
	//	*Resource_MessagingHub
	//	*Resource_KeyVault
	//	*Resource_NetworkInterface
	//	*Resource_NetworkSecurityGroup
	//	*Resource_FunctionService
	//	*Resource_GenericNetworkService
	//	*Resource_LoadBalancer
	//	*Resource_LoggingService
	//	*Resource_MachineLearningService
	//	*Resource_SecurityAdvisoryService
	//	*Resource_DocumentDatabaseService
	//	*Resource_KeyValueDatabaseService
	//	*Resource_MultiModalDatabaseService
	//	*Resource_RelationalDatabaseService
	//	*Resource_FileStorageService
	//	*Resource_ObjectStorageService
	//	*Resource_VirtualNetwork
	//	*Resource_VirtualSubNetwork
	//	*Resource_PasswordPolicy
	//	*Resource_ResourceGroup
	//	*Resource_BlockStorage
	//	*Resource_DatabaseStorage
	//	*Resource_FileStorage
	//	*Resource_ObjectStorage
	//	*Resource_GenericDocument
	//	*Resource_PolicyDocument
	//	*Resource_SecurityAdvisoryDocument
	//	*Resource_ServiceMetadataDocument
	//	*Resource_MachineLearningDataset
	//	*Resource_MachineLearningModel
	//	*Resource_AwarenessTraining
	//	*Resource_SecurityTraining
	//	*Resource_Application
	//	*Resource_Library
	//	*Resource_SourceCodeFile
	Type          isResource_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_api_ontology_ontology_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{125}
}

func (x *Resource) GetType() isResource_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Resource) GetAccount() *Account {
	if x != nil {
		if x, ok := x.Type.(*Resource_Account); ok {
			return x.Account
		}
	}
	return nil
}

func (x *Resource) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*Resource_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *Resource) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*Resource_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

func (x *Resource) GetCodeRepository() *CodeRepository {
	if x != nil {
		if x, ok := x.Type.(*Resource_CodeRepository); ok {
			return x.CodeRepository
		}
	}
	return nil
}

func (x *Resource) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Resource_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Resource) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Resource_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Resource) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

func (x *Resource) GetContainerOrchestration() *ContainerOrchestration {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerOrchestration); ok {
			return x.ContainerOrchestration
		}
	}
	return nil
}

func (x *Resource) GetContainerRegistry() *ContainerRegistry {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerRegistry); ok {
			return x.ContainerRegistry
		}
	}
	return nil
}

func (x *Resource) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Resource_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Resource) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Resource_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Resource) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Resource_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

func (x *Resource) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Resource_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Resource) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Resource_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *Resource) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Resource) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Resource_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

func (x *Resource) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*Resource_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *Resource) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*Resource_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

func (x *Resource) GetKeyVault() *KeyVault {
	if x != nil {
		if x, ok := x.Type.(*Resource_KeyVault); ok {
			return x.KeyVault
		}
	}
	return nil
}

func (x *Resource) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Resource_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Resource) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Resource_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Resource) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Resource_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Resource) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Resource_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Resource) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Resource_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Resource) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Resource_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Resource) GetMachineLearningService() *MachineLearningService {
	if x != nil {
		if x, ok := x.Type.(*Resource_MachineLearningService); ok {
			return x.MachineLearningService
		}
	}
	return nil
}

func (x *Resource) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Resource_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Resource) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Resource_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Resource) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Resource_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Resource) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Resource) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

func (x *Resource) GetPasswordPolicy() *PasswordPolicy {
	if x != nil {
		if x, ok := x.Type.(*Resource_PasswordPolicy); ok {
			return x.PasswordPolicy
		}
	}
	return nil
}

func (x *Resource) GetResourceGroup() *ResourceGroup {
	if x != nil {
		if x, ok := x.Type.(*Resource_ResourceGroup); ok {
			return x.ResourceGroup
		}
	}
	return nil
}

func (x *Resource) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Resource) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Resource) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Resource) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

func (x *Resource) GetGenericDocument() *GenericDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_GenericDocument); ok {
			return x.GenericDocument
		}
	}
	return nil
}

func (x *Resource) GetPolicyDocument() *PolicyDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_PolicyDocument); ok {
			return x.PolicyDocument
		}
	}
	return nil
}

func (x *Resource) GetSecurityAdvisoryDocument() *SecurityAdvisoryDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_SecurityAdvisoryDocument); ok {
			return x.SecurityAdvisoryDocument
		}
	}
	return nil
}

func (x *Resource) GetServiceMetadataDocument() *ServiceMetadataDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_ServiceMetadataDocument); ok {
			return x.ServiceMetadataDocument
		}
	}
	return nil
}

func (x *Resource) GetMachineLearningDataset() *MachineLearningDataset {
	if x != nil {
		if x, ok := x.Type.(*Resource_MachineLearningDataset); ok {
			return x.MachineLearningDataset
		}
	}
	return nil
}

func (x *Resource) GetMachineLearningModel() *MachineLearningModel {
	if x != nil {
		if x, ok := x.Type.(*Resource_MachineLearningModel); ok {
			return x.MachineLearningModel
		}
	}
	return nil
}

func (x *Resource) GetAwarenessTraining() *AwarenessTraining {
	if x != nil {
		if x, ok := x.Type.(*Resource_AwarenessTraining); ok {
			return x.AwarenessTraining
		}
	}
	return nil
}

func (x *Resource) GetSecurityTraining() *SecurityTraining {
	if x != nil {
		if x, ok := x.Type.(*Resource_SecurityTraining); ok {
			return x.SecurityTraining
		}
	}
	return nil
}

func (x *Resource) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Resource_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Resource) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Resource_Library); ok {
			return x.Library
		}
	}
	return nil
}

func (x *Resource) GetSourceCodeFile() *SourceCodeFile {
	if x != nil {
		if x, ok := x.Type.(*Resource_SourceCodeFile); ok {
			return x.SourceCodeFile
		}
	}
	return nil
}

type isResource_Type interface {
	isResource_Type()
}

type Resource_Account struct {
	Account *Account `protobuf:"bytes,11456,opt,name=account,proto3,oneof"`
}

type Resource_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type Resource_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

type Resource_CodeRepository struct {
	CodeRepository *CodeRepository `protobuf:"bytes,3431,opt,name=code_repository,json=codeRepository,proto3,oneof"`
}

type Resource_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Resource_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Resource_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

type Resource_ContainerOrchestration struct {
	ContainerOrchestration *ContainerOrchestration `protobuf:"bytes,3211,opt,name=container_orchestration,json=containerOrchestration,proto3,oneof"`
}

type Resource_ContainerRegistry struct {
	ContainerRegistry *ContainerRegistry `protobuf:"bytes,8326,opt,name=container_registry,json=containerRegistry,proto3,oneof"`
}

type Resource_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Resource_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Resource_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

type Resource_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Resource_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type Resource_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Resource_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Resource_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type Resource_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

type Resource_KeyVault struct {
	KeyVault *KeyVault `protobuf:"bytes,18627,opt,name=key_vault,json=keyVault,proto3,oneof"`
}

type Resource_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Resource_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Resource_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Resource_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Resource_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Resource_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Resource_MachineLearningService struct {
	MachineLearningService *MachineLearningService `protobuf:"bytes,16966,opt,name=machine_learning_service,json=machineLearningService,proto3,oneof"`
}

type Resource_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Resource_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Resource_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Resource_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Resource_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Resource_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Resource_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Resource_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Resource_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

type Resource_PasswordPolicy struct {
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,970,opt,name=password_policy,json=passwordPolicy,proto3,oneof"`
}

type Resource_ResourceGroup struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,494,opt,name=resource_group,json=resourceGroup,proto3,oneof"`
}

type Resource_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Resource_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Resource_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Resource_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Resource_GenericDocument struct {
	GenericDocument *GenericDocument `protobuf:"bytes,4992,opt,name=generic_document,json=genericDocument,proto3,oneof"`
}

type Resource_PolicyDocument struct {
	PolicyDocument *PolicyDocument `protobuf:"bytes,14953,opt,name=policy_document,json=policyDocument,proto3,oneof"`
}

type Resource_SecurityAdvisoryDocument struct {
	SecurityAdvisoryDocument *SecurityAdvisoryDocument `protobuf:"bytes,14717,opt,name=security_advisory_document,json=securityAdvisoryDocument,proto3,oneof"`
}

type Resource_ServiceMetadataDocument struct {
	ServiceMetadataDocument *ServiceMetadataDocument `protobuf:"bytes,272,opt,name=service_metadata_document,json=serviceMetadataDocument,proto3,oneof"`
}

type Resource_MachineLearningDataset struct {
	MachineLearningDataset *MachineLearningDataset `protobuf:"bytes,2040,opt,name=machine_learning_dataset,json=machineLearningDataset,proto3,oneof"`
}

type Resource_MachineLearningModel struct {
	MachineLearningModel *MachineLearningModel `protobuf:"bytes,15393,opt,name=machine_learning_model,json=machineLearningModel,proto3,oneof"`
}

type Resource_AwarenessTraining struct {
	AwarenessTraining *AwarenessTraining `protobuf:"bytes,13539,opt,name=awareness_training,json=awarenessTraining,proto3,oneof"`
}

type Resource_SecurityTraining struct {
	SecurityTraining *SecurityTraining `protobuf:"bytes,5053,opt,name=security_training,json=securityTraining,proto3,oneof"`
}

type Resource_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Resource_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

type Resource_SourceCodeFile struct {
	SourceCodeFile *SourceCodeFile `protobuf:"bytes,2804,opt,name=source_code_file,json=sourceCodeFile,proto3,oneof"`
}

func (*Resource_Account) isResource_Type() {}

func (*Resource_Job) isResource_Type() {}

func (*Resource_Workflow) isResource_Type() {}

func (*Resource_CodeRepository) isResource_Type() {}

func (*Resource_Container) isResource_Type() {}

func (*Resource_Function) isResource_Type() {}

func (*Resource_VirtualMachine) isResource_Type() {}

func (*Resource_ContainerOrchestration) isResource_Type() {}

func (*Resource_ContainerRegistry) isResource_Type() {}

func (*Resource_Certificate) isResource_Type() {}

func (*Resource_Key) isResource_Type() {}

func (*Resource_Secret) isResource_Type() {}

func (*Resource_Identity) isResource_Type() {}

func (*Resource_RoleAssignment) isResource_Type() {}

func (*Resource_ContainerImage) isResource_Type() {}

func (*Resource_VmImage) isResource_Type() {}

func (*Resource_DeviceProvisioningService) isResource_Type() {}

func (*Resource_MessagingHub) isResource_Type() {}

func (*Resource_KeyVault) isResource_Type() {}

func (*Resource_NetworkInterface) isResource_Type() {}

func (*Resource_NetworkSecurityGroup) isResource_Type() {}

func (*Resource_FunctionService) isResource_Type() {}

func (*Resource_GenericNetworkService) isResource_Type() {}

func (*Resource_LoadBalancer) isResource_Type() {}

func (*Resource_LoggingService) isResource_Type() {}

func (*Resource_MachineLearningService) isResource_Type() {}

func (*Resource_SecurityAdvisoryService) isResource_Type() {}

func (*Resource_DocumentDatabaseService) isResource_Type() {}

func (*Resource_KeyValueDatabaseService) isResource_Type() {}

func (*Resource_MultiModalDatabaseService) isResource_Type() {}

func (*Resource_RelationalDatabaseService) isResource_Type() {}

func (*Resource_FileStorageService) isResource_Type() {}

func (*Resource_ObjectStorageService) isResource_Type() {}

func (*Resource_VirtualNetwork) isResource_Type() {}

func (*Resource_VirtualSubNetwork) isResource_Type() {}

func (*Resource_PasswordPolicy) isResource_Type() {}

func (*Resource_ResourceGroup) isResource_Type() {}

func (*Resource_BlockStorage) isResource_Type() {}

func (*Resource_DatabaseStorage) isResource_Type() {}

func (*Resource_FileStorage) isResource_Type() {}

func (*Resource_ObjectStorage) isResource_Type() {}

func (*Resource_GenericDocument) isResource_Type() {}

func (*Resource_PolicyDocument) isResource_Type() {}

func (*Resource_SecurityAdvisoryDocument) isResource_Type() {}

func (*Resource_ServiceMetadataDocument) isResource_Type() {}

func (*Resource_MachineLearningDataset) isResource_Type() {}

func (*Resource_MachineLearningModel) isResource_Type() {}

func (*Resource_AwarenessTraining) isResource_Type() {}

func (*Resource_SecurityTraining) isResource_Type() {}

func (*Resource_Application) isResource_Type() {}

func (*Resource_Library) isResource_Type() {}

func (*Resource_SourceCodeFile) isResource_Type() {}

// ResourceGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ResourceGroup struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,16852,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12107,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11216,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14821,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17517,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18950,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16903,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,773,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,16181,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,1522,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14157,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2564,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResourceGroup) Reset() {
	*x = ResourceGroup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroup) ProtoMessage() {}

func (x *ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroup.ProtoReflect.Descriptor instead.
func (*ResourceGroup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{126}
}

func (x *ResourceGroup) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ResourceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceGroup) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ResourceGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceGroup) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ResourceGroup) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ResourceGroup) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *ResourceGroup) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ResourceGroup) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ResourceGroup) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ResourceLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ResourceLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,1509,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,6804,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,6776,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,6099,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ResourceLogging) Reset() {
	*x = ResourceLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLogging) ProtoMessage() {}

func (x *ResourceLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLogging.ProtoReflect.Descriptor instead.
func (*ResourceLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{127}
}

func (x *ResourceLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ResourceLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ResourceLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ResourceLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

// ResourceType is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ResourceType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceType) Reset() {
	*x = ResourceType{}
	mi := &file_api_ontology_ontology_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceType) ProtoMessage() {}

func (x *ResourceType) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceType.ProtoReflect.Descriptor instead.
func (*ResourceType) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{128}
}

// RobustnessScore is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RobustnessScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RobustnessScore) Reset() {
	*x = RobustnessScore{}
	mi := &file_api_ontology_ontology_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RobustnessScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobustnessScore) ProtoMessage() {}

func (x *RobustnessScore) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobustnessScore.ProtoReflect.Descriptor instead.
func (*RobustnessScore) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{129}
}

// RoleAssignment is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RoleAssignment struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Activated                  bool                   `protobuf:"varint,11248,opt,name=activated,proto3" json:"activated,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13977,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,8960,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6310,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16789,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18346,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2963,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10862,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity    *Authenticity    `protobuf:"bytes,11180,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	Authorization   *Authorization   `protobuf:"bytes,13796,opt,name=authorization,proto3" json:"authorization,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,12302,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,17437,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,13392,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2313,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2808,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RoleAssignment) Reset() {
	*x = RoleAssignment{}
	mi := &file_api_ontology_ontology_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignment) ProtoMessage() {}

func (x *RoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignment.ProtoReflect.Descriptor instead.
func (*RoleAssignment) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{130}
}

func (x *RoleAssignment) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *RoleAssignment) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RoleAssignment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleAssignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoleAssignment) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *RoleAssignment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RoleAssignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleAssignment) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *RoleAssignment) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RoleAssignment) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *RoleAssignment) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *RoleAssignment) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *RoleAssignment) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *RoleAssignment) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *RoleAssignment) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SchemaValidation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SchemaValidation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        string                 `protobuf:"bytes,1670,opt,name=format,proto3" json:"format,omitempty"`
	SchemaUrl     string                 `protobuf:"bytes,13358,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	Errors        []*Error               `protobuf:"bytes,8879,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaValidation) Reset() {
	*x = SchemaValidation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaValidation) ProtoMessage() {}

func (x *SchemaValidation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaValidation.ProtoReflect.Descriptor instead.
func (*SchemaValidation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{131}
}

func (x *SchemaValidation) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SchemaValidation) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *SchemaValidation) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Secret is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Secret struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,17509,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11419,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,5437,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,2358,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,13519,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2994,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,3899,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1676,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,964,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,13335,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,5998,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,2663,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,962,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Loggings         []*Logging       `protobuf:"bytes,12955,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,14309,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,13447,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,10517,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_api_ontology_ontology_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{132}
}

func (x *Secret) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Secret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Secret) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Secret) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Secret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Secret) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Secret) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Secret) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Secret) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Secret) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Secret) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Secret) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Secret) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Secret) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Secret) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SecurityAdvisoryDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SecurityAdvisoryDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,10952,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,3599,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,17266,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,15804,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,16720,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,15161,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,3544,opt,name=raw,proto3" json:"raw,omitempty"`
	DataLocation       *DataLocation        `protobuf:"bytes,11892,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,13033,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,16307,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,263,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,18581,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,2423,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	Vulnerabilities    []*Vulnerability     `protobuf:"bytes,4395,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SecurityAdvisoryDocument) Reset() {
	*x = SecurityAdvisoryDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryDocument) ProtoMessage() {}

func (x *SecurityAdvisoryDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryDocument.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{133}
}

func (x *SecurityAdvisoryDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

// SecurityAdvisoryFeed is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SecurityAdvisoryFeed struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	SecurityAdvisoryDocumentIds []string               `protobuf:"bytes,1213,rep,name=security_advisory_document_ids,json=securityAdvisoryDocumentIds,proto3" json:"security_advisory_document_ids,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SecurityAdvisoryFeed) Reset() {
	*x = SecurityAdvisoryFeed{}
	mi := &file_api_ontology_ontology_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryFeed) ProtoMessage() {}

func (x *SecurityAdvisoryFeed) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryFeed.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryFeed) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{134}
}

func (x *SecurityAdvisoryFeed) GetSecurityAdvisoryDocumentIds() []string {
	if x != nil {
		return x.SecurityAdvisoryDocumentIds
	}
	return nil
}

// SecurityAdvisoryService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This service discloses security advisories, e.g. according to the CSAF standard. It has one or more feeds that contain the actual advisories as well as multiple (public) keys that are used to sign the advisory documents.
type SecurityAdvisoryService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3025,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2320,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18683,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,4910,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,2661,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,837,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2102,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,4555,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string                  `protobuf:"bytes,10467,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity           `protobuf:"bytes,13452,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string                 `protobuf:"bytes,7662,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation            `protobuf:"bytes,16008,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	KeyIds                    []string                `protobuf:"bytes,16432,rep,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	Loggings                  []*Logging              `protobuf:"bytes,2782,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies              []*Redundancy           `protobuf:"bytes,18001,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string                 `protobuf:"bytes,592,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SecurityAdvisoryFeeds     []*SecurityAdvisoryFeed `protobuf:"bytes,12072,rep,name=security_advisory_feeds,json=securityAdvisoryFeeds,proto3" json:"security_advisory_feeds,omitempty"`
	ServiceMetadataDocumentId *string                 `protobuf:"bytes,9438,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption    `protobuf:"bytes,11117,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics        `protobuf:"bytes,3613,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SecurityAdvisoryService) Reset() {
	*x = SecurityAdvisoryService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryService) ProtoMessage() {}

func (x *SecurityAdvisoryService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryService.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{135}
}

func (x *SecurityAdvisoryService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SecurityAdvisoryService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityAdvisoryService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityAdvisoryService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *SecurityAdvisoryService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *SecurityAdvisoryService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SecurityAdvisoryService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAdvisoryService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SecurityAdvisoryService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SecurityAdvisoryService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *SecurityAdvisoryService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *SecurityAdvisoryService) GetKeyIds() []string {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *SecurityAdvisoryService) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *SecurityAdvisoryService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *SecurityAdvisoryService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetSecurityAdvisoryFeeds() []*SecurityAdvisoryFeed {
	if x != nil {
		return x.SecurityAdvisoryFeeds
	}
	return nil
}

func (x *SecurityAdvisoryService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *SecurityAdvisoryService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SecurityFeature is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type SecurityFeature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*SecurityFeature_AnomalyDetection
	//	*SecurityFeature_ActivityLogging
	//	*SecurityFeature_ApplicationLogging
	//	*SecurityFeature_BootLogging
	//	*SecurityFeature_OsLogging
	//	*SecurityFeature_ResourceLogging
	//	*SecurityFeature_MalwareProtection
	//	*SecurityFeature_UsageStatistics
	//	*SecurityFeature_CertificateBasedAuthentication
	//	*SecurityFeature_TokenBasedAuthentication
	//	*SecurityFeature_MultiFactorAuthentiation
	//	*SecurityFeature_NoAuthentication
	//	*SecurityFeature_OtpBasedAuthentication
	//	*SecurityFeature_PasswordBasedAuthentication
	//	*SecurityFeature_SingleSignOn
	//	*SecurityFeature_Abac
	//	*SecurityFeature_L3Firewall
	//	*SecurityFeature_WebApplicationFirewall
	//	*SecurityFeature_Rbac
	//	*SecurityFeature_Backup
	//	*SecurityFeature_DDoSProtection
	//	*SecurityFeature_GeoLocation
	//	*SecurityFeature_GeoRedundancy
	//	*SecurityFeature_LocalRedundancy
	//	*SecurityFeature_ZoneRedundancy
	//	*SecurityFeature_CustomerKeyEncryption
	//	*SecurityFeature_ManagedKeyEncryption
	//	*SecurityFeature_EncryptionInUse
	//	*SecurityFeature_TransportEncryption
	//	*SecurityFeature_LocalAttestation
	//	*SecurityFeature_RemoteAttestation
	//	*SecurityFeature_AutomaticUpdates
	//	*SecurityFeature_DocumentChecksum
	//	*SecurityFeature_Immutability
	//	*SecurityFeature_DocumentSignature
	//	*SecurityFeature_ExplainableResults
	//	*SecurityFeature_RobustnessScore
	Type          isSecurityFeature_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityFeature) Reset() {
	*x = SecurityFeature{}
	mi := &file_api_ontology_ontology_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityFeature) ProtoMessage() {}

func (x *SecurityFeature) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityFeature.ProtoReflect.Descriptor instead.
func (*SecurityFeature) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{136}
}

func (x *SecurityFeature) GetType() isSecurityFeature_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SecurityFeature) GetAnomalyDetection() *AnomalyDetection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_AnomalyDetection); ok {
			return x.AnomalyDetection
		}
	}
	return nil
}

func (x *SecurityFeature) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_MalwareProtection); ok {
			return x.MalwareProtection
		}
	}
	return nil
}

func (x *SecurityFeature) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_UsageStatistics); ok {
			return x.UsageStatistics
		}
	}
	return nil
}

func (x *SecurityFeature) GetCertificateBasedAuthentication() *CertificateBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_CertificateBasedAuthentication); ok {
			return x.CertificateBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetTokenBasedAuthentication() *TokenBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_TokenBasedAuthentication); ok {
			return x.TokenBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetMultiFactorAuthentiation() *MultiFactorAuthentiation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_MultiFactorAuthentiation); ok {
			return x.MultiFactorAuthentiation
		}
	}
	return nil
}

func (x *SecurityFeature) GetNoAuthentication() *NoAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_NoAuthentication); ok {
			return x.NoAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetOtpBasedAuthentication() *OTPBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_OtpBasedAuthentication); ok {
			return x.OtpBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetPasswordBasedAuthentication() *PasswordBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_PasswordBasedAuthentication); ok {
			return x.PasswordBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetSingleSignOn() *SingleSignOn {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_SingleSignOn); ok {
			return x.SingleSignOn
		}
	}
	return nil
}

func (x *SecurityFeature) GetAbac() *ABAC {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Abac); ok {
			return x.Abac
		}
	}
	return nil
}

func (x *SecurityFeature) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *SecurityFeature) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

func (x *SecurityFeature) GetRbac() *RBAC {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Rbac); ok {
			return x.Rbac
		}
	}
	return nil
}

func (x *SecurityFeature) GetBackup() *Backup {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Backup); ok {
			return x.Backup
		}
	}
	return nil
}

func (x *SecurityFeature) GetDDoSProtection() *DDoSProtection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DDoSProtection); ok {
			return x.DDoSProtection
		}
	}
	return nil
}

func (x *SecurityFeature) GetGeoLocation() *GeoLocation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *SecurityFeature) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_EncryptionInUse); ok {
			return x.EncryptionInUse
		}
	}
	return nil
}

func (x *SecurityFeature) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_TransportEncryption); ok {
			return x.TransportEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *SecurityFeature) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

func (x *SecurityFeature) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_AutomaticUpdates); ok {
			return x.AutomaticUpdates
		}
	}
	return nil
}

func (x *SecurityFeature) GetDocumentChecksum() *DocumentChecksum {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DocumentChecksum); ok {
			return x.DocumentChecksum
		}
	}
	return nil
}

func (x *SecurityFeature) GetImmutability() *Immutability {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Immutability); ok {
			return x.Immutability
		}
	}
	return nil
}

func (x *SecurityFeature) GetDocumentSignature() *DocumentSignature {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DocumentSignature); ok {
			return x.DocumentSignature
		}
	}
	return nil
}

func (x *SecurityFeature) GetExplainableResults() *ExplainableResults {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ExplainableResults); ok {
			return x.ExplainableResults
		}
	}
	return nil
}

func (x *SecurityFeature) GetRobustnessScore() *RobustnessScore {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_RobustnessScore); ok {
			return x.RobustnessScore
		}
	}
	return nil
}

type isSecurityFeature_Type interface {
	isSecurityFeature_Type()
}

type SecurityFeature_AnomalyDetection struct {
	AnomalyDetection *AnomalyDetection `protobuf:"bytes,4728,opt,name=anomaly_detection,json=anomalyDetection,proto3,oneof"`
}

type SecurityFeature_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type SecurityFeature_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type SecurityFeature_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type SecurityFeature_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type SecurityFeature_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

type SecurityFeature_MalwareProtection struct {
	MalwareProtection *MalwareProtection `protobuf:"bytes,7265,opt,name=malware_protection,json=malwareProtection,proto3,oneof"`
}

type SecurityFeature_UsageStatistics struct {
	UsageStatistics *UsageStatistics `protobuf:"bytes,15242,opt,name=usage_statistics,json=usageStatistics,proto3,oneof"`
}

type SecurityFeature_CertificateBasedAuthentication struct {
	CertificateBasedAuthentication *CertificateBasedAuthentication `protobuf:"bytes,560,opt,name=certificate_based_authentication,json=certificateBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_TokenBasedAuthentication struct {
	TokenBasedAuthentication *TokenBasedAuthentication `protobuf:"bytes,3684,opt,name=token_based_authentication,json=tokenBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_MultiFactorAuthentiation struct {
	MultiFactorAuthentiation *MultiFactorAuthentiation `protobuf:"bytes,13104,opt,name=multi_factor_authentiation,json=multiFactorAuthentiation,proto3,oneof"`
}

type SecurityFeature_NoAuthentication struct {
	NoAuthentication *NoAuthentication `protobuf:"bytes,17718,opt,name=no_authentication,json=noAuthentication,proto3,oneof"`
}

type SecurityFeature_OtpBasedAuthentication struct {
	OtpBasedAuthentication *OTPBasedAuthentication `protobuf:"bytes,18743,opt,name=otp_based_authentication,json=otpBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_PasswordBasedAuthentication struct {
	PasswordBasedAuthentication *PasswordBasedAuthentication `protobuf:"bytes,16941,opt,name=password_based_authentication,json=passwordBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_SingleSignOn struct {
	SingleSignOn *SingleSignOn `protobuf:"bytes,9281,opt,name=single_sign_on,json=singleSignOn,proto3,oneof"`
}

type SecurityFeature_Abac struct {
	Abac *ABAC `protobuf:"bytes,14694,opt,name=abac,proto3,oneof"`
}

type SecurityFeature_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type SecurityFeature_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

type SecurityFeature_Rbac struct {
	Rbac *RBAC `protobuf:"bytes,18783,opt,name=rbac,proto3,oneof"`
}

type SecurityFeature_Backup struct {
	Backup *Backup `protobuf:"bytes,16413,opt,name=backup,proto3,oneof"`
}

type SecurityFeature_DDoSProtection struct {
	DDoSProtection *DDoSProtection `protobuf:"bytes,16707,opt,name=d_do_s_protection,json=dDoSProtection,proto3,oneof"`
}

type SecurityFeature_GeoLocation struct {
	GeoLocation *GeoLocation `protobuf:"bytes,10970,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type SecurityFeature_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type SecurityFeature_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type SecurityFeature_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

type SecurityFeature_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type SecurityFeature_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

type SecurityFeature_EncryptionInUse struct {
	EncryptionInUse *EncryptionInUse `protobuf:"bytes,15775,opt,name=encryption_in_use,json=encryptionInUse,proto3,oneof"`
}

type SecurityFeature_TransportEncryption struct {
	TransportEncryption *TransportEncryption `protobuf:"bytes,15929,opt,name=transport_encryption,json=transportEncryption,proto3,oneof"`
}

type SecurityFeature_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type SecurityFeature_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

type SecurityFeature_AutomaticUpdates struct {
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,9990,opt,name=automatic_updates,json=automaticUpdates,proto3,oneof"`
}

type SecurityFeature_DocumentChecksum struct {
	DocumentChecksum *DocumentChecksum `protobuf:"bytes,16099,opt,name=document_checksum,json=documentChecksum,proto3,oneof"`
}

type SecurityFeature_Immutability struct {
	Immutability *Immutability `protobuf:"bytes,2008,opt,name=immutability,proto3,oneof"`
}

type SecurityFeature_DocumentSignature struct {
	DocumentSignature *DocumentSignature `protobuf:"bytes,7943,opt,name=document_signature,json=documentSignature,proto3,oneof"`
}

type SecurityFeature_ExplainableResults struct {
	ExplainableResults *ExplainableResults `protobuf:"bytes,6217,opt,name=explainable_results,json=explainableResults,proto3,oneof"`
}

type SecurityFeature_RobustnessScore struct {
	RobustnessScore *RobustnessScore `protobuf:"bytes,12988,opt,name=robustness_score,json=robustnessScore,proto3,oneof"`
}

func (*SecurityFeature_AnomalyDetection) isSecurityFeature_Type() {}

func (*SecurityFeature_ActivityLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_ApplicationLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_BootLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_OsLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_ResourceLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_MalwareProtection) isSecurityFeature_Type() {}

func (*SecurityFeature_UsageStatistics) isSecurityFeature_Type() {}

func (*SecurityFeature_CertificateBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_TokenBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_MultiFactorAuthentiation) isSecurityFeature_Type() {}

func (*SecurityFeature_NoAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_OtpBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_PasswordBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_SingleSignOn) isSecurityFeature_Type() {}

func (*SecurityFeature_Abac) isSecurityFeature_Type() {}

func (*SecurityFeature_L3Firewall) isSecurityFeature_Type() {}

func (*SecurityFeature_WebApplicationFirewall) isSecurityFeature_Type() {}

func (*SecurityFeature_Rbac) isSecurityFeature_Type() {}

func (*SecurityFeature_Backup) isSecurityFeature_Type() {}

func (*SecurityFeature_DDoSProtection) isSecurityFeature_Type() {}

func (*SecurityFeature_GeoLocation) isSecurityFeature_Type() {}

func (*SecurityFeature_GeoRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_LocalRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_ZoneRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_CustomerKeyEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_ManagedKeyEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_EncryptionInUse) isSecurityFeature_Type() {}

func (*SecurityFeature_TransportEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_LocalAttestation) isSecurityFeature_Type() {}

func (*SecurityFeature_RemoteAttestation) isSecurityFeature_Type() {}

func (*SecurityFeature_AutomaticUpdates) isSecurityFeature_Type() {}

func (*SecurityFeature_DocumentChecksum) isSecurityFeature_Type() {}

func (*SecurityFeature_Immutability) isSecurityFeature_Type() {}

func (*SecurityFeature_DocumentSignature) isSecurityFeature_Type() {}

func (*SecurityFeature_ExplainableResults) isSecurityFeature_Type() {}

func (*SecurityFeature_RobustnessScore) isSecurityFeature_Type() {}

// SecurityTraining is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SecurityTraining struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AnnualUpdateCompleted bool                   `protobuf:"varint,10234,opt,name=annual_update_completed,json=annualUpdateCompleted,proto3" json:"annual_update_completed,omitempty"`
	CreationTime          *timestamppb.Timestamp `protobuf:"bytes,6650,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description           string                 `protobuf:"bytes,9993,opt,name=description,proto3" json:"description,omitempty"`
	Id                    string                 `protobuf:"bytes,16985,opt,name=id,proto3" json:"id,omitempty"`
	Labels                map[string]string      `protobuf:"bytes,2918,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                  string                 `protobuf:"bytes,12019,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                             string  `protobuf:"bytes,8671,opt,name=raw,proto3" json:"raw,omitempty"`
	SuccessfullyCompletedPercentage bool    `protobuf:"varint,12251,opt,name=successfully_completed_percentage,json=successfullyCompletedPercentage,proto3" json:"successfully_completed_percentage,omitempty"`
	ParentId                        *string `protobuf:"bytes,13946,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *SecurityTraining) Reset() {
	*x = SecurityTraining{}
	mi := &file_api_ontology_ontology_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityTraining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityTraining) ProtoMessage() {}

func (x *SecurityTraining) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityTraining.ProtoReflect.Descriptor instead.
func (*SecurityTraining) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{137}
}

func (x *SecurityTraining) GetAnnualUpdateCompleted() bool {
	if x != nil {
		return x.AnnualUpdateCompleted
	}
	return false
}

func (x *SecurityTraining) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SecurityTraining) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityTraining) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityTraining) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SecurityTraining) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityTraining) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SecurityTraining) GetSuccessfullyCompletedPercentage() bool {
	if x != nil {
		return x.SuccessfullyCompletedPercentage
	}
	return false
}

func (x *SecurityTraining) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// ServiceMetadataDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ServiceMetadataDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,5797,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,3765,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,4547,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,8259,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,1672,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,10912,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,8064,opt,name=raw,proto3" json:"raw,omitempty"`
	DataLocation       *DataLocation        `protobuf:"bytes,16095,opt,name=data_location,json=dataLocation,proto3" json:"data_location,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,1270,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,14892,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,13735,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,9192,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,17461,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceMetadataDocument) Reset() {
	*x = ServiceMetadataDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMetadataDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMetadataDocument) ProtoMessage() {}

func (x *ServiceMetadataDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMetadataDocument.ProtoReflect.Descriptor instead.
func (*ServiceMetadataDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{138}
}

func (x *ServiceMetadataDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceMetadataDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *ServiceMetadataDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceMetadataDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceMetadataDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceMetadataDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ServiceMetadataDocument) GetDataLocation() *DataLocation {
	if x != nil {
		return x.DataLocation
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *ServiceMetadataDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ServiceMetadataDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *ServiceMetadataDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

// DocumentSignature is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,4031,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Errors        []*Error               `protobuf:"bytes,12856,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentSignature) Reset() {
	*x = DocumentSignature{}
	mi := &file_api_ontology_ontology_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSignature) ProtoMessage() {}

func (x *DocumentSignature) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSignature.ProtoReflect.Descriptor instead.
func (*DocumentSignature) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{139}
}

func (x *DocumentSignature) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DocumentSignature) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// SingleSignOn is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SingleSignOn struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,14488,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,10569,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SingleSignOn) Reset() {
	*x = SingleSignOn{}
	mi := &file_api_ontology_ontology_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleSignOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSignOn) ProtoMessage() {}

func (x *SingleSignOn) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSignOn.ProtoReflect.Descriptor instead.
func (*SingleSignOn) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{140}
}

func (x *SingleSignOn) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *SingleSignOn) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Code is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Code struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Code_Application
	//	*Code_Library
	//	*Code_SourceCodeFile
	Type          isCode_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Code) Reset() {
	*x = Code{}
	mi := &file_api_ontology_ontology_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{141}
}

func (x *Code) GetType() isCode_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Code) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Code_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Code) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Code_Library); ok {
			return x.Library
		}
	}
	return nil
}

func (x *Code) GetSourceCodeFile() *SourceCodeFile {
	if x != nil {
		if x, ok := x.Type.(*Code_SourceCodeFile); ok {
			return x.SourceCodeFile
		}
	}
	return nil
}

type isCode_Type interface {
	isCode_Type()
}

type Code_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Code_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

type Code_SourceCodeFile struct {
	SourceCodeFile *SourceCodeFile `protobuf:"bytes,2804,opt,name=source_code_file,json=sourceCodeFile,proto3,oneof"`
}

func (*Code_Application) isCode_Type() {}

func (*Code_Library) isCode_Type() {}

func (*Code_SourceCodeFile) isCode_Type() {}

// SourceCodeFile is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SourceCodeFile struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,7260,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,14944,opt,name=description,proto3" json:"description,omitempty"`
	Id           string                 `protobuf:"bytes,10519,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,7345,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,14615,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,16625,opt,name=raw,proto3" json:"raw,omitempty"`
	CodeModuleIds    []string         `protobuf:"bytes,1921,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string          `protobuf:"bytes,4795,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	Functionalities  []*Functionality `protobuf:"bytes,6180,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	ParentId         *string          `protobuf:"bytes,7227,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SourceCodeFile) Reset() {
	*x = SourceCodeFile{}
	mi := &file_api_ontology_ontology_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceCodeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCodeFile) ProtoMessage() {}

func (x *SourceCodeFile) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCodeFile.ProtoReflect.Descriptor instead.
func (*SourceCodeFile) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{142}
}

func (x *SourceCodeFile) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SourceCodeFile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SourceCodeFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SourceCodeFile) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SourceCodeFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceCodeFile) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SourceCodeFile) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *SourceCodeFile) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *SourceCodeFile) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *SourceCodeFile) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// Storage is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Storage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Storage_BlockStorage
	//	*Storage_DatabaseStorage
	//	*Storage_FileStorage
	//	*Storage_ObjectStorage
	Type          isStorage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{143}
}

func (x *Storage) GetType() isStorage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Storage) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Storage) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Storage) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Storage) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

type isStorage_Type interface {
	isStorage_Type()
}

type Storage_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Storage_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Storage_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Storage_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

func (*Storage_BlockStorage) isStorage_Type() {}

func (*Storage_DatabaseStorage) isStorage_Type() {}

func (*Storage_FileStorage) isStorage_Type() {}

func (*Storage_ObjectStorage) isStorage_Type() {}

// StorageService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This entity represents a network-based service that can be used to access a particular storage backend. It has multiple subclasses, e.g., for databases or object stores. It has a list of storage resources associated to it.
type StorageService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*StorageService_DocumentDatabaseService
	//	*StorageService_KeyValueDatabaseService
	//	*StorageService_MultiModalDatabaseService
	//	*StorageService_RelationalDatabaseService
	//	*StorageService_FileStorageService
	//	*StorageService_ObjectStorageService
	Type          isStorageService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageService) Reset() {
	*x = StorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageService) ProtoMessage() {}

func (x *StorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageService.ProtoReflect.Descriptor instead.
func (*StorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{144}
}

func (x *StorageService) GetType() isStorageService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StorageService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *StorageService) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

type isStorageService_Type interface {
	isStorageService_Type()
}

type StorageService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type StorageService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type StorageService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type StorageService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type StorageService_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type StorageService_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

func (*StorageService_DocumentDatabaseService) isStorageService_Type() {}

func (*StorageService_KeyValueDatabaseService) isStorageService_Type() {}

func (*StorageService_MultiModalDatabaseService) isStorageService_Type() {}

func (*StorageService_RelationalDatabaseService) isStorageService_Type() {}

func (*StorageService_FileStorageService) isStorageService_Type() {}

func (*StorageService_ObjectStorageService) isStorageService_Type() {}

// Tool is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Tool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_api_ontology_ontology_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{145}
}

// Training is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Training struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Training_AwarenessTraining
	//	*Training_SecurityTraining
	Type          isTraining_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Training) Reset() {
	*x = Training{}
	mi := &file_api_ontology_ontology_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Training) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Training) ProtoMessage() {}

func (x *Training) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Training.ProtoReflect.Descriptor instead.
func (*Training) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{146}
}

func (x *Training) GetType() isTraining_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Training) GetAwarenessTraining() *AwarenessTraining {
	if x != nil {
		if x, ok := x.Type.(*Training_AwarenessTraining); ok {
			return x.AwarenessTraining
		}
	}
	return nil
}

func (x *Training) GetSecurityTraining() *SecurityTraining {
	if x != nil {
		if x, ok := x.Type.(*Training_SecurityTraining); ok {
			return x.SecurityTraining
		}
	}
	return nil
}

type isTraining_Type interface {
	isTraining_Type()
}

type Training_AwarenessTraining struct {
	AwarenessTraining *AwarenessTraining `protobuf:"bytes,13539,opt,name=awareness_training,json=awarenessTraining,proto3,oneof"`
}

type Training_SecurityTraining struct {
	SecurityTraining *SecurityTraining `protobuf:"bytes,5053,opt,name=security_training,json=securityTraining,proto3,oneof"`
}

func (*Training_AwarenessTraining) isTraining_Type() {}

func (*Training_SecurityTraining) isTraining_Type() {}

// TransportEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// enabled means the resource _can_ be reached via https, while enforced means it _can only_ be reached via https (or http traffic is redirected)
type TransportEncryption struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,2648,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Enforced        bool                   `protobuf:"varint,8230,opt,name=enforced,proto3" json:"enforced,omitempty"`
	Protocol        string                 `protobuf:"bytes,14651,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolVersion float32                `protobuf:"fixed32,2365,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	CipherSuites    []*CipherSuite         `protobuf:"bytes,17881,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransportEncryption) Reset() {
	*x = TransportEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEncryption) ProtoMessage() {}

func (x *TransportEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEncryption.ProtoReflect.Descriptor instead.
func (*TransportEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{147}
}

func (x *TransportEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TransportEncryption) GetEnforced() bool {
	if x != nil {
		return x.Enforced
	}
	return false
}

func (x *TransportEncryption) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TransportEncryption) GetProtocolVersion() float32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *TransportEncryption) GetCipherSuites() []*CipherSuite {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

// UsageStatistics is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type UsageStatistics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ApiHitsPerMonth int32                  `protobuf:"varint,7625,opt,name=api_hits_per_month,json=apiHitsPerMonth,proto3" json:"api_hits_per_month,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UsageStatistics) Reset() {
	*x = UsageStatistics{}
	mi := &file_api_ontology_ontology_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageStatistics) ProtoMessage() {}

func (x *UsageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageStatistics.ProtoReflect.Descriptor instead.
func (*UsageStatistics) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{148}
}

func (x *UsageStatistics) GetApiHitsPerMonth() int32 {
	if x != nil {
		return x.ApiHitsPerMonth
	}
	return 0
}

// VMImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VMImage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,8279,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4760,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17867,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14985,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17229,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,6244,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,3459,opt,name=raw,proto3" json:"raw,omitempty"`
	ApplicationId   *string          `protobuf:"bytes,15711,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,4609,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,5411,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18349,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,13735,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2369,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VMImage) Reset() {
	*x = VMImage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMImage) ProtoMessage() {}

func (x *VMImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMImage.ProtoReflect.Descriptor instead.
func (*VMImage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{149}
}

func (x *VMImage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VMImage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VMImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VMImage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VMImage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VMImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VMImage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VMImage) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *VMImage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VMImage) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *VMImage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VMImage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VMImage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualMachine is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualMachine struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,6633,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14513,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,8104,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2070,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2416,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11617,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,14073,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging     *ActivityLogging   `protobuf:"bytes,8134,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AutomaticUpdates    *AutomaticUpdates  `protobuf:"bytes,7114,opt,name=automatic_updates,json=automaticUpdates,proto3" json:"automatic_updates,omitempty"`
	BlockStorageIds     []string           `protobuf:"bytes,2182,rep,name=block_storage_ids,json=blockStorageIds,proto3" json:"block_storage_ids,omitempty"`
	BootLogging         *BootLogging       `protobuf:"bytes,15845,opt,name=boot_logging,json=bootLogging,proto3" json:"boot_logging,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,10596,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,7308,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings            []*Logging         `protobuf:"bytes,15031,rep,name=loggings,proto3" json:"loggings,omitempty"`
	MalwareProtection   *MalwareProtection `protobuf:"bytes,16535,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,741,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	OsLogging           *OSLogging         `protobuf:"bytes,8084,opt,name=os_logging,json=osLogging,proto3" json:"os_logging,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,14823,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,17180,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,10949,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,15452,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,14541,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	mi := &file_api_ontology_ontology_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{150}
}

func (x *VirtualMachine) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualMachine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualMachine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachine) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualMachine) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualMachine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachine) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualMachine) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *VirtualMachine) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		return x.AutomaticUpdates
	}
	return nil
}

func (x *VirtualMachine) GetBlockStorageIds() []string {
	if x != nil {
		return x.BlockStorageIds
	}
	return nil
}

func (x *VirtualMachine) GetBootLogging() *BootLogging {
	if x != nil {
		return x.BootLogging
	}
	return nil
}

func (x *VirtualMachine) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *VirtualMachine) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualMachine) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *VirtualMachine) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *VirtualMachine) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *VirtualMachine) GetOsLogging() *OSLogging {
	if x != nil {
		return x.OsLogging
	}
	return nil
}

func (x *VirtualMachine) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualMachine) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *VirtualMachine) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualMachine) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *VirtualMachine) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualNetwork struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,1885,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9930,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4087,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,7871,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6818,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,818,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14216,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,7268,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,9870,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,3591,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2814,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,7205,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VirtualNetwork) Reset() {
	*x = VirtualNetwork{}
	mi := &file_api_ontology_ontology_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetwork) ProtoMessage() {}

func (x *VirtualNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetwork.ProtoReflect.Descriptor instead.
func (*VirtualNetwork) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{151}
}

func (x *VirtualNetwork) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualNetwork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualNetwork) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualNetwork) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualNetwork) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualNetwork) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualNetwork) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualNetwork) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *VirtualNetwork) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualNetwork) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualNetwork) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualSubNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualSubNetwork struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,317,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14512,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,10226,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14405,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4188,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1563,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,15165,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,18482,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,5093,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,14386,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,12551,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6155,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VirtualSubNetwork) Reset() {
	*x = VirtualSubNetwork{}
	mi := &file_api_ontology_ontology_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualSubNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualSubNetwork) ProtoMessage() {}

func (x *VirtualSubNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualSubNetwork.ProtoReflect.Descriptor instead.
func (*VirtualSubNetwork) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{152}
}

func (x *VirtualSubNetwork) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualSubNetwork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualSubNetwork) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualSubNetwork) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualSubNetwork) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualSubNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualSubNetwork) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualSubNetwork) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualSubNetwork) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *VirtualSubNetwork) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualSubNetwork) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualSubNetwork) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Vulnerability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// cve: Common Vulnerabilities and Exposures
// cwe: Common Weakness Enumeration
type Vulnerability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cve           string                 `protobuf:"bytes,205,opt,name=cve,proto3" json:"cve,omitempty"`
	Cwe           []string               `protobuf:"bytes,18325,rep,name=cwe,proto3" json:"cwe,omitempty"`
	Description   string                 `protobuf:"bytes,10690,opt,name=description,proto3" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,13528,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                 `protobuf:"bytes,11925,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{153}
}

func (x *Vulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *Vulnerability) GetCwe() []string {
	if x != nil {
		return x.Cwe
	}
	return nil
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vulnerability) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// WebApplicationFirewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A WAF is a L7 firewall that includes L3 capabilities
type WebApplicationFirewall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,8961,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebApplicationFirewall) Reset() {
	*x = WebApplicationFirewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebApplicationFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebApplicationFirewall) ProtoMessage() {}

func (x *WebApplicationFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebApplicationFirewall.ProtoReflect.Descriptor instead.
func (*WebApplicationFirewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{154}
}

func (x *WebApplicationFirewall) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Workflow is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Workflow struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,5596,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2895,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6168,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5072,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,9318,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12414,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,9416,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,14478,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Loggings        []*Logging       `protobuf:"bytes,15895,rep,name=loggings,proto3" json:"loggings,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15255,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,3002,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,15450,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_api_ontology_ontology_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{155}
}

func (x *Workflow) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Workflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Workflow) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Workflow) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Workflow) GetLoggings() []*Logging {
	if x != nil {
		return x.Loggings
	}
	return nil
}

func (x *Workflow) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Workflow) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Workflow) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ZoneRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ZoneRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,11767,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZoneRedundancy) Reset() {
	*x = ZoneRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZoneRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneRedundancy) ProtoMessage() {}

func (x *ZoneRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneRedundancy.ProtoReflect.Descriptor instead.
func (*ZoneRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{156}
}

func (x *ZoneRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

var file_api_ontology_ontology_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: ([]string)(nil),
		Field:         60000,
		Name:          "clouditor.ontology.v1.resource_type_names",
		Tag:           "bytes,60000,rep,name=resource_type_names",
		Filename:      "api/ontology/ontology.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// repeated string resource_type_names = 60000;
	E_ResourceTypeNames = &file_api_ontology_ontology_proto_extTypes[0]
)

var File_api_ontology_ontology_proto protoreflect.FileDescriptor

const file_api_ontology_ontology_proto_rawDesc = "" +
	"\n" +
	"\x1bapi/ontology/ontology.proto\x12\x15clouditor.ontology.v1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/descriptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"4\n" +
	"\x04ABAC:,\x82\xa6\x1d\x04ABAC\x82\xa6\x1d\rAuthorization\x82\xa6\x1d\x0fSecurityFeature\"\xce\x01\n" +
	"\x11AccessRestriction\x12E\n" +
	"\vl3_firewall\x18\xa5G \x01(\v2!.clouditor.ontology.v1.L3FirewallH\x00R\n" +
	"l3Firewall\x12j\n" +
	"\x18web_application_firewall\x18\x9d- \x01(\v2-.clouditor.ontology.v1.WebApplicationFirewallH\x00R\x16webApplicationFirewallB\x06\n" +
	"\x04type\"\xf8\x05\n" +
	"\aAccount\x12@\n" +
	"\rcreation_time\x18\xc6c \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xfbE \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf3\n" +
	" \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x98+ \x01(\bR\x1ainternetAccessibleEndpoint\x12C\n" +
	"\x06labels\x18\xd52 \x03(\v2*.clouditor.ontology.v1.Account.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\x94\x93\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x88n \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xc6\x12 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xaeB \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xf7| \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xc6^ \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xe8Z \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:)\x82\xa6\x1d\aAccount\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xad\x02\n" +
	"\x0fActivityLogging\x12\x1a\n" +
	"\aenabled\x18Ս\x01 \x01(\bR\aenabled\x12>\n" +
	"\x1bmonitoring_log_data_enabled\x18\xbaj \x01(\bR\x18monitoringLogDataEnabled\x12E\n" +
	"\x10retention_period\x18\xa4T \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x128\n" +
	"\x17security_alerts_enabled\x18\x90\x8a\x01 \x01(\bR\x15securityAlertsEnabled:=\x82\xa6\x1d\x0fActivityLogging\x82\xa6\x1d\aLogging\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xbf\x01\n" +
	"\x10AnomalyDetection\x12\x19\n" +
	"\aenabled\x18\x94E \x01(\bR\aenabled\x12[\n" +
	"\x13application_logging\x18\xfcV \x01(\v2).clouditor.ontology.v1.ApplicationLoggingR\x12applicationLogging:3\x82\xa6\x1d\x10AnomalyDetection\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xa9\a\n" +
	"\vApplication\x12@\n" +
	"\rcreation_time\x18\xd1u \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xeb\x11 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xd3H \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12G\n" +
	"\x06labels\x18\xd8c \x03(\v2..clouditor.ontology.v1.Application.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x81\v \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x122\n" +
	"\x14programming_language\x18\x81\r \x01(\tR\x13programmingLanguage\x120\n" +
	"\x13programming_version\x18\xce\x18 \x01(\tR\x12programmingVersion\x12\x12\n" +
	"\x03raw\x18\xfc\x91\x01 \x01(\tR\x03raw\x12,\n" +
	"\x11translation_units\x18\xe9I \x03(\tR\x10translationUnits\x12U\n" +
	"\x11automatic_updates\x18\xa1\x0f \x01(\v2'.clouditor.ontology.v1.AutomaticUpdatesR\x10automaticUpdates\x12'\n" +
	"\x0fcode_module_ids\x18\x9av \x03(\tR\rcodeModuleIds\x122\n" +
	"\x12code_repository_id\x18\xd9b \x01(\tH\x00R\x10codeRepositoryId\x88\x01\x01\x12#\n" +
	"\n" +
	"compute_id\x18\xa0@ \x01(\tH\x01R\tcomputeId\x88\x01\x01\x12O\n" +
	"\x0ffunctionalities\x18\xd58 \x03(\v2$.clouditor.ontology.v1.FunctionalityR\x0ffunctionalities\x12 \n" +
	"\vlibrary_ids\x18\xdfs \x03(\tR\n" +
	"libraryIds\x12!\n" +
	"\tparent_id\x18\xdcg \x01(\tH\x02R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:0\x82\xa6\x1d\vApplication\x82\xa6\x1d\tComponent\x82\xa6\x1d\x04Code\x82\xa6\x1d\bResourceB\x15\n" +
	"\x13_code_repository_idB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_id\"\xb2\x02\n" +
	"\x12ApplicationLogging\x12\x19\n" +
	"\aenabled\x18\x83j \x01(\bR\aenabled\x12>\n" +
	"\x1bmonitoring_log_data_enabled\x18\xed  \x01(\bR\x18monitoringLogDataEnabled\x12E\n" +
	"\x10retention_period\x18\xaf1 \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x128\n" +
	"\x17security_alerts_enabled\x18\u038b\x01 \x01(\bR\x15securityAlertsEnabled:@\x82\xa6\x1d\x12ApplicationLogging\x82\xa6\x1d\aLogging\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xe9\x01\n" +
	"\x10AtRestEncryption\x12g\n" +
	"\x17customer_key_encryption\x18\xab+ \x01(\v2,.clouditor.ontology.v1.CustomerKeyEncryptionH\x00R\x15customerKeyEncryption\x12d\n" +
	"\x16managed_key_encryption\x18\xedG \x01(\v2+.clouditor.ontology.v1.ManagedKeyEncryptionH\x00R\x14managedKeyEncryptionB\x06\n" +
	"\x04type\"\xca\x01\n" +
	"\vAttestation\x12W\n" +
	"\x11local_attestation\x18\xc8! \x01(\v2'.clouditor.ontology.v1.LocalAttestationH\x00R\x10localAttestation\x12Z\n" +
	"\x12remote_attestation\x18\xc8j \x01(\v2(.clouditor.ontology.v1.RemoteAttestationH\x00R\x11remoteAttestationB\x06\n" +
	"\x04type\"\xb8\x05\n" +
	"\bAuditing\x12W\n" +
	"\x11anomaly_detection\x18\xf8$ \x01(\v2'.clouditor.ontology.v1.AnomalyDetectionH\x00R\x10anomalyDetection\x12T\n" +
	"\x10activity_logging\x18\x8c\x17 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingH\x00R\x0factivityLogging\x12]\n" +
	"\x13application_logging\x18\xf7c \x01(\v2).clouditor.ontology.v1.ApplicationLoggingH\x00R\x12applicationLogging\x12I\n" +
	"\fboot_logging\x18\x87\x90\x01 \x01(\v2\".clouditor.ontology.v1.BootLoggingH\x00R\vbootLogging\x12B\n" +
	"\n" +
	"os_logging\x18\xee\x16 \x01(\v2 .clouditor.ontology.v1.OSLoggingH\x00R\tosLogging\x12U\n" +
	"\x10resource_logging\x18\x9b\x89\x01 \x01(\v2&.clouditor.ontology.v1.ResourceLoggingH\x00R\x0fresourceLogging\x12Z\n" +
	"\x12malware_protection\x18\xe18 \x01(\v2(.clouditor.ontology.v1.MalwareProtectionH\x00R\x11malwareProtection\x12T\n" +
	"\x10usage_statistics\x18\x8aw \x01(\v2&.clouditor.ontology.v1.UsageStatisticsH\x00R\x0fusageStatisticsB\x06\n" +
	"\x04type\"\x90\x06\n" +
	"\fAuthenticity\x12\x82\x01\n" +
	" certificate_based_authentication\x18\xb0\x04 \x01(\v25.clouditor.ontology.v1.CertificateBasedAuthenticationH\x00R\x1ecertificateBasedAuthentication\x12p\n" +
	"\x1atoken_based_authentication\x18\xe4\x1c \x01(\v2/.clouditor.ontology.v1.TokenBasedAuthenticationH\x00R\x18tokenBasedAuthentication\x12p\n" +
	"\x1amulti_factor_authentiation\x18\xb0f \x01(\v2/.clouditor.ontology.v1.MultiFactorAuthentiationH\x00R\x18multiFactorAuthentiation\x12X\n" +
	"\x11no_authentication\x18\xb6\x8a\x01 \x01(\v2'.clouditor.ontology.v1.NoAuthenticationH\x00R\x10noAuthentication\x12k\n" +
	"\x18otp_based_authentication\x18\xb7\x92\x01 \x01(\v2-.clouditor.ontology.v1.OTPBasedAuthenticationH\x00R\x16otpBasedAuthentication\x12z\n" +
	"\x1dpassword_based_authentication\x18\xad\x84\x01 \x01(\v22.clouditor.ontology.v1.PasswordBasedAuthenticationH\x00R\x1bpasswordBasedAuthentication\x12L\n" +
	"\x0esingle_sign_on\x18\xc1H \x01(\v2#.clouditor.ontology.v1.SingleSignOnH\x00R\fsingleSignOnB\x06\n" +
	"\x04type\"\xb3\x02\n" +
	"\rAuthorization\x122\n" +
	"\x04abac\x18\xe6r \x01(\v2\x1b.clouditor.ontology.v1.ABACH\x00R\x04abac\x12E\n" +
	"\vl3_firewall\x18\xa5G \x01(\v2!.clouditor.ontology.v1.L3FirewallH\x00R\n" +
	"l3Firewall\x12j\n" +
	"\x18web_application_firewall\x18\x9d- \x01(\v2-.clouditor.ontology.v1.WebApplicationFirewallH\x00R\x16webApplicationFirewall\x123\n" +
	"\x04rbac\x18ߒ\x01 \x01(\v2\x1b.clouditor.ontology.v1.RBACH\x00R\x04rbacB\x06\n" +
	"\x04type\"\xc1\x01\n" +
	"\x10AutomaticUpdates\x12\x19\n" +
	"\aenabled\x18\xeb\x11 \x01(\bR\aenabled\x126\n" +
	"\binterval\x18\x85\x12 \x01(\v2\x19.google.protobuf.DurationR\binterval\x12$\n" +
	"\rsecurity_only\x18\x8a\b \x01(\bR\fsecurityOnly:4\x82\xa6\x1d\x10AutomaticUpdates\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\xea\x03\n" +
	"\fAvailability\x129\n" +
	"\x06backup\x18\x9d\x80\x01 \x01(\v2\x1d.clouditor.ontology.v1.BackupH\x00R\x06backup\x12T\n" +
	"\x11d_do_s_protection\x18Â\x01 \x01(\v2%.clouditor.ontology.v1.DDoSProtectionH\x00R\x0edDoSProtection\x12H\n" +
	"\fgeo_location\x18\xdaU \x01(\v2\".clouditor.ontology.v1.GeoLocationH\x00R\vgeoLocation\x12N\n" +
	"\x0egeo_redundancy\x18\x84\x13 \x01(\v2$.clouditor.ontology.v1.GeoRedundancyH\x00R\rgeoRedundancy\x12T\n" +
	"\x10local_redundancy\x18\xe9\x13 \x01(\v2&.clouditor.ontology.v1.LocalRedundancyH\x00R\x0flocalRedundancy\x12Q\n" +
	"\x0fzone_redundancy\x18\x89W \x01(\v2%.clouditor.ontology.v1.ZoneRedundancyH\x00R\x0ezoneRedundancyB\x06\n" +
	"\x04type\"\xc4\x04\n" +
	"\x11AwarenessTraining\x127\n" +
	"\x17annual_update_completed\x18\x92| \x01(\bR\x15annualUpdateCompleted\x12@\n" +
	"\rcreation_time\x18\xc2{ \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xd9\x02 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x936 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12M\n" +
	"\x06labels\x18\xd3& \x03(\v24.clouditor.ontology.v1.AwarenessTraining.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\xba\x93\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x82? \x01(\tR\x03raw\x12K\n" +
	"!successfully_completed_percentage\x18\xf2\x1d \x01(\bR\x1fsuccessfullyCompletedPercentage\x12!\n" +
	"\tparent_id\x18\xf9/ \x01(\tH\x00R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:?\x82\xa6\x1d\x11AwarenessTraining\x82\xa6\x1d\bTraining\x82\xa6\x1d\x0eHumanResources\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xe5\x02\n" +
	"\x06Backup\x12\x19\n" +
	"\aenabled\x18\xff\x15 \x01(\bR\aenabled\x126\n" +
	"\binterval\x18\x928 \x01(\v2\x19.google.protobuf.DurationR\binterval\x12E\n" +
	"\x10retention_period\x18\x8b5 \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x12#\n" +
	"\n" +
	"storage_id\x18\x957 \x01(\tH\x00R\tstorageId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\x81\x0f \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption:-\x82\xa6\x1d\x06Backup\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeatureB\r\n" +
	"\v_storage_id\"\x96\t\n" +
	"\fBlockStorage\x12@\n" +
	"\rcreation_time\x18\x9fW \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xf3\x10 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xdb6 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x9fu \x01(\bR\x1ainternetAccessibleEndpoint\x12H\n" +
	"\x06labels\x18\xa8{ \x03(\v2/.clouditor.ontology.v1.BlockStorage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xadl \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xb1V \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xb0% \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12V\n" +
	"\x12at_rest_encryption\x18\xdc\" \x01(\v2'.clouditor.ontology.v1.AtRestEncryptionR\x10atRestEncryption\x128\n" +
	"\abackups\x18\xb5# \x03(\v2\x1d.clouditor.ontology.v1.BackupR\abackups\x12F\n" +
	"\fgeo_location\x18\xc2\x1b \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12H\n" +
	"\fimmutability\x18\xf4L \x01(\v2#.clouditor.ontology.v1.ImmutabilityR\fimmutability\x12;\n" +
	"\bloggings\x18\x98j \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x82q \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x94B \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xe8` \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12S\n" +
	"\x10usage_statistics\x18\x8e\x8b\x01 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:9\x82\xa6\x1d\fBlockStorage\x82\xa6\x1d\aStorage\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xa4\x02\n" +
	"\vBootLogging\x12\x1a\n" +
	"\aenabled\x18\xa9\x87\x01 \x01(\bR\aenabled\x12>\n" +
	"\x1bmonitoring_log_data_enabled\x18\xafG \x01(\bR\x18monitoringLogDataEnabled\x12E\n" +
	"\x10retention_period\x18\xa2\x12 \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x127\n" +
	"\x17security_alerts_enabled\x18\xbd\x18 \x01(\bR\x15securityAlertsEnabled:9\x82\xa6\x1d\vBootLogging\x82\xa6\x1d\aLogging\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\x86\x01\n" +
	"\vCICDService\x12/\n" +
	"\x03job\x18\x9f\x1f \x01(\v2\x1a.clouditor.ontology.v1.JobH\x00R\x03job\x12>\n" +
	"\bworkflow\x18\xaaD \x01(\v2\x1f.clouditor.ontology.v1.WorkflowH\x00R\bworkflowB\x06\n" +
	"\x04type\"\xa3\b\n" +
	"\vCertificate\x12A\n" +
	"\rcreation_time\x18\xec\x8e\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x8eQ \x01(\tR\vdescription\x12\x19\n" +
	"\aenabled\x18\x9cV \x01(\bR\aenabled\x12E\n" +
	"\x0fexpiration_date\x18\x81\x85\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationDate\x12\x17\n" +
	"\x02id\x18\xb1\f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x9dw \x01(\bR\x1ainternetAccessibleEndpoint\x12\x1e\n" +
	"\n" +
	"is_managed\x18\x99} \x01(\bR\tisManaged\x12G\n" +
	"\x06labels\x18\xd9\n" +
	" \x03(\v2..clouditor.ontology.v1.Certificate.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\xa5\x94\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12C\n" +
	"\x0fnot_before_date\x18\xfa[ \x01(\v2\x1a.google.protobuf.TimestampR\rnotBeforeDate\x12\x11\n" +
	"\x03raw\x18\x9f8 \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xf2` \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x121\n" +
	"\x11infrastructure_id\x18\xa5A \x01(\tH\x00R\x10infrastructureId\x88\x01\x01\x12;\n" +
	"\bloggings\x18\x89j \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x889 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xbdS \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xedZ \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:;\x82\xa6\x1d\vCertificate\x82\xa6\x1d\n" +
	"Credential\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x14\n" +
	"\x12_infrastructure_idB\f\n" +
	"\n" +
	"_parent_id\"\xb1\x01\n" +
	"\x1eCertificateBasedAuthentication\x12-\n" +
	"\x12context_is_checked\x18\xeet \x01(\bR\x10contextIsChecked\x12\x19\n" +
	"\aenabled\x18\xcf] \x01(\bR\aenabled:E\x82\xa6\x1d\x1eCertificateBasedAuthentication\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"6\n" +
	"\x13CertificationTarget:\x1f\x82\xa6\x1d\x13CertificationTarget\x82\xa6\x1d\x04Core\"\xf0\x01\n" +
	"\vCipherSuite\x12:\n" +
	"\x18authentication_mechanism\x18\xd3\x1c \x01(\tR\x17authenticationMechanism\x125\n" +
	"\x16key_exchange_algorithm\x18\xc8t \x01(\tR\x14keyExchangeAlgorithm\x12$\n" +
	"\rmac_algorithm\x18\xa8\x12 \x01(\tR\fmacAlgorithm\x12&\n" +
	"\x0esession_cipher\x18\xee, \x01(\tR\rsessionCipher: \x82\xa6\x1d\vCipherSuite\x82\xa6\x1d\rFunctionality\"\xb1\x1b\n" +
	"\x0eInfrastructure\x12;\n" +
	"\aaccount\x18\xc0Y \x01(\v2\x1e.clouditor.ontology.v1.AccountH\x00R\aaccount\x12/\n" +
	"\x03job\x18\x9f\x1f \x01(\v2\x1a.clouditor.ontology.v1.JobH\x00R\x03job\x12>\n" +
	"\bworkflow\x18\xaaD \x01(\v2\x1f.clouditor.ontology.v1.WorkflowH\x00R\bworkflow\x12Q\n" +
	"\x0fcode_repository\x18\xe7\x1a \x01(\v2%.clouditor.ontology.v1.CodeRepositoryH\x00R\x0ecodeRepository\x12A\n" +
	"\tcontainer\x18\xfb\f \x01(\v2 .clouditor.ontology.v1.ContainerH\x00R\tcontainer\x12>\n" +
	"\bfunction\x18\xdft \x01(\v2\x1f.clouditor.ontology.v1.FunctionH\x00R\bfunction\x12R\n" +
	"\x0fvirtual_machine\x18\xb8\x8f\x01 \x01(\v2%.clouditor.ontology.v1.VirtualMachineH\x00R\x0evirtualMachine\x12i\n" +
	"\x17container_orchestration\x18\x8b\x19 \x01(\v2-.clouditor.ontology.v1.ContainerOrchestrationH\x00R\x16containerOrchestration\x12Z\n" +
	"\x12container_registry\x18\x86A \x01(\v2(.clouditor.ontology.v1.ContainerRegistryH\x00R\x11containerRegistry\x12G\n" +
	"\vcertificate\x18\xdeB \x01(\v2\".clouditor.ontology.v1.CertificateH\x00R\vcertificate\x12/\n" +
	"\x03key\x18\x82( \x01(\v2\x1a.clouditor.ontology.v1.KeyH\x00R\x03key\x128\n" +
	"\x06secret\x18\xff} \x01(\v2\x1d.clouditor.ontology.v1.SecretH\x00R\x06secret\x12>\n" +
	"\bidentity\x18\xe5r \x01(\v2\x1f.clouditor.ontology.v1.IdentityH\x00R\bidentity\x12Q\n" +
	"\x0frole_assignment\x18\xb9\x12 \x01(\v2%.clouditor.ontology.v1.RoleAssignmentH\x00R\x0eroleAssignment\x12R\n" +
	"\x0fcontainer_image\x18ȋ\x01 \x01(\v2%.clouditor.ontology.v1.ContainerImageH\x00R\x0econtainerImage\x12=\n" +
	"\bvm_image\x18\xa1\x80\x01 \x01(\v2\x1e.clouditor.ontology.v1.VMImageH\x00R\avmImage\x12s\n" +
	"\x1bdevice_provisioning_service\x18\xe4q \x01(\v20.clouditor.ontology.v1.DeviceProvisioningServiceH\x00R\x19deviceProvisioningService\x12K\n" +
	"\rmessaging_hub\x18\x93d \x01(\v2#.clouditor.ontology.v1.MessagingHubH\x00R\fmessagingHub\x12@\n" +
	"\tkey_vault\x18Ñ\x01 \x01(\v2\x1f.clouditor.ontology.v1.KeyVaultH\x00R\bkeyVault\x12W\n" +
	"\x11network_interface\x18\x83M \x01(\v2'.clouditor.ontology.v1.NetworkInterfaceH\x00R\x10networkInterface\x12d\n" +
	"\x16network_security_group\x18\xe7b \x01(\v2+.clouditor.ontology.v1.NetworkSecurityGroupH\x00R\x14networkSecurityGroup\x12T\n" +
	"\x10function_service\x18\xc1& \x01(\v2&.clouditor.ontology.v1.FunctionServiceH\x00R\x0ffunctionService\x12g\n" +
	"\x17generic_network_service\x18\xe6\n" +
	" \x01(\v2,.clouditor.ontology.v1.GenericNetworkServiceH\x00R\x15genericNetworkService\x12K\n" +
	"\rload_balancer\x18\xe9  \x01(\v2#.clouditor.ontology.v1.LoadBalancerH\x00R\floadBalancer\x12Q\n" +
	"\x0flogging_service\x18\xb3n \x01(\v2%.clouditor.ontology.v1.LoggingServiceH\x00R\x0eloggingService\x12k\n" +
	"\x18machine_learning_service\x18Ƅ\x01 \x01(\v2-.clouditor.ontology.v1.MachineLearningServiceH\x00R\x16machineLearningService\x12m\n" +
	"\x19security_advisory_service\x18\xad\x01 \x01(\v2..clouditor.ontology.v1.SecurityAdvisoryServiceH\x00R\x17securityAdvisoryService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseService\x12_\n" +
	"\x14file_storage_service\x18\xae\x83\x01 \x01(\v2).clouditor.ontology.v1.FileStorageServiceH\x00R\x12fileStorageService\x12d\n" +
	"\x16object_storage_service\x18\xbb2 \x01(\v2+.clouditor.ontology.v1.ObjectStorageServiceH\x00R\x14objectStorageService\x12Q\n" +
	"\x0fvirtual_network\x18\xff\x13 \x01(\v2%.clouditor.ontology.v1.VirtualNetworkH\x00R\x0evirtualNetwork\x12[\n" +
	"\x13virtual_sub_network\x18\xb2X \x01(\v2(.clouditor.ontology.v1.VirtualSubNetworkH\x00R\x11virtualSubNetwork\x12Q\n" +
	"\x0fpassword_policy\x18\xca\a \x01(\v2%.clouditor.ontology.v1.PasswordPolicyH\x00R\x0epasswordPolicy\x12N\n" +
	"\x0eresource_group\x18\xee\x03 \x01(\v2$.clouditor.ontology.v1.ResourceGroupH\x00R\rresourceGroup\x12K\n" +
	"\rblock_storage\x18\x8dP \x01(\v2#.clouditor.ontology.v1.BlockStorageH\x00R\fblockStorage\x12T\n" +
	"\x10database_storage\x18\x8b` \x01(\v2&.clouditor.ontology.v1.DatabaseStorageH\x00R\x0fdatabaseStorage\x12H\n" +
	"\ffile_storage\x18\xb0\x15 \x01(\v2\".clouditor.ontology.v1.FileStorageH\x00R\vfileStorage\x12N\n" +
	"\x0eobject_storage\x18\xf6T \x01(\v2$.clouditor.ontology.v1.ObjectStorageH\x00R\robjectStorageB\x06\n" +
	"\x04type\"-\n" +
	"\bCloudSDK:!\x82\xa6\x1d\bCloudSDK\x82\xa6\x1d\tFramework\x82\xa6\x1d\x04Core\"\xd8\x01\n" +
	"\n" +
	"CodeRegion\x12\x13\n" +
	"\x04code\x18\x87X \x01(\tR\x04code\x12\x1f\n" +
	"\n" +
	"end_column\x18\xa2\x94\x01 \x01(\x05R\tendColumn\x12\x1a\n" +
	"\bend_line\x18\xd8: \x01(\x05R\aendLine\x12\x13\n" +
	"\x04file\x18\xec\t \x01(\tR\x04file\x12\"\n" +
	"\fstart_column\x18\x93, \x01(\x05R\vstartColumn\x12\x1e\n" +
	"\n" +
	"start_line\x18\xf1\\ \x01(\x05R\tstartLine:\x1f\x82\xa6\x1d\n" +
	"CodeRegion\x82\xa6\x1d\rFunctionality\"\x8c\x06\n" +
	"\x0eCodeRepository\x12@\n" +
	"\rcreation_time\x18\x89p \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xfa, \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xce\n" +
	" \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xaaE \x01(\bR\x1ainternetAccessibleEndpoint\x12J\n" +
	"\x06labels\x18\xa7/ \x03(\v21.clouditor.ontology.v1.CodeRepository.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xdec \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xb0z \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xb4\x1c \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\x82U \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xad\x10 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xeb> \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x85r \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:0\x82\xa6\x1d\x0eCodeRepository\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x9a\x01\n" +
	"\tComponent\x12H\n" +
	"\vapplication\x18\xfa\x90\x01 \x01(\v2\".clouditor.ontology.v1.ApplicationH\x00R\vapplication\x12;\n" +
	"\alibrary\x18\xb9o \x01(\v2\x1e.clouditor.ontology.v1.LibraryH\x00R\alibraryB\x06\n" +
	"\x04type\"\xe8\x01\n" +
	"\aCompute\x12A\n" +
	"\tcontainer\x18\xfb\f \x01(\v2 .clouditor.ontology.v1.ContainerH\x00R\tcontainer\x12>\n" +
	"\bfunction\x18\xdft \x01(\v2\x1f.clouditor.ontology.v1.FunctionH\x00R\bfunction\x12R\n" +
	"\x0fvirtual_machine\x18\xb8\x8f\x01 \x01(\v2%.clouditor.ontology.v1.VirtualMachineH\x00R\x0evirtualMachineB\x06\n" +
	"\x04type\"\xa1\x03\n" +
	"\x0fConfidentiality\x12g\n" +
	"\x17customer_key_encryption\x18\xab+ \x01(\v2,.clouditor.ontology.v1.CustomerKeyEncryptionH\x00R\x15customerKeyEncryption\x12d\n" +
	"\x16managed_key_encryption\x18\xedG \x01(\v2+.clouditor.ontology.v1.ManagedKeyEncryptionH\x00R\x14managedKeyEncryption\x12U\n" +
	"\x11encryption_in_use\x18\x9f{ \x01(\v2&.clouditor.ontology.v1.EncryptionInUseH\x00R\x0fencryptionInUse\x12`\n" +
	"\x14transport_encryption\x18\xb9| \x01(\v2*.clouditor.ontology.v1.TransportEncryptionH\x00R\x13transportEncryptionB\x06\n" +
	"\x04type\"\xef\b\n" +
	"\tContainer\x12@\n" +
	"\rcreation_time\x18\xd5I \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xe5c \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x87\a \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x80O \x01(\bR\x1ainternetAccessibleEndpoint\x12E\n" +
	"\x06labels\x18\x9eg \x03(\v2,.clouditor.ontology.v1.Container.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xe0\x05 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x12\n" +
	"\x03raw\x18\xbf\x8f\x01 \x01(\tR\x03raw\x12S\n" +
	"\x11encryption_in_use\x18\xf3o \x01(\v2&.clouditor.ontology.v1.EncryptionInUseR\x0fencryptionInUse\x12F\n" +
	"\fgeo_location\x18\xab\r \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12\x1f\n" +
	"\bimage_id\x18\xe1L \x01(\tH\x00R\aimageId\x88\x01\x01\x12;\n" +
	"\bloggings\x18\x96O \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x123\n" +
	"\x15network_interface_ids\x18\xfa\x01 \x03(\tR\x13networkInterfaceIds\x12F\n" +
	"\fredundancies\x18\xf7z \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12X\n" +
	"\x12remote_attestation\x18\xafv \x01(\v2(.clouditor.ontology.v1.RemoteAttestationR\x11remoteAttestation\x12!\n" +
	"\tparent_id\x18\xff\x7f \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xbf] \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\xc3m \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:6\x82\xa6\x1d\tContainer\x82\xa6\x1d\aCompute\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\v\n" +
	"\t_image_idB\f\n" +
	"\n" +
	"_parent_id\"\xd6\x06\n" +
	"\x0eContainerImage\x12@\n" +
	"\rcreation_time\x18\x93W \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xfaT \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x82g \x01(\bR\x1ainternetAccessibleEndpoint\x12K\n" +
	"\x06labels\x18\xe3\x8c\x01 \x03(\v21.clouditor.ontology.v1.ContainerImage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x85\x11 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xafR \x01(\tR\x03raw\x12+\n" +
	"\x0eapplication_id\x18\x97L \x01(\tH\x00R\rapplicationId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xc6k \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xf6+ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x98S \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xd5n \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x8c6 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:9\x82\xa6\x1d\x0eContainerImage\x82\xa6\x1d\x05Image\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x11\n" +
	"\x0f_application_idB\f\n" +
	"\n" +
	"_parent_id\"\xc8\a\n" +
	"\x16ContainerOrchestration\x12@\n" +
	"\rcreation_time\x18\x84O \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x83\x02 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xffb \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xbb\x14 \x01(\bR\x1ainternetAccessibleEndpoint\x12R\n" +
	"\x06labels\x18\xbew \x03(\v29.clouditor.ontology.v1.ContainerOrchestration.LabelsEntryR\x06labels\x12&\n" +
	"\x0emanagement_url\x18\xef\a \x01(\tR\rmanagementUrl\x12\x1c\n" +
	"\x04name\x18\x8b\x8e\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x12\n" +
	"\x03raw\x18\xbf\x88\x01 \x01(\tR\x03raw\x12$\n" +
	"\rcontainer_ids\x18\xbdc \x03(\tR\fcontainerIds\x12F\n" +
	"\fgeo_location\x18\xaah \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xabE \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xd8\x11 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xb5\x7f \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xcej \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\xaf1 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:8\x82\xa6\x1d\x16ContainerOrchestration\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x99\x06\n" +
	"\x11ContainerRegistry\x12@\n" +
	"\rcreation_time\x18\x93! \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18\xe5\x89\x01 \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\xb1\x8a\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xb1c \x01(\bR\x1ainternetAccessibleEndpoint\x12M\n" +
	"\x06labels\x18\x95\x13 \x03(\v24.clouditor.ontology.v1.ContainerRegistry.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf3\v \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xa6' \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xb0v \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xaa3 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12G\n" +
	"\fredundancies\x18\xb7\x94\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xe9\x13 \x01(\tH\x00R\bparentId\x88\x01\x01\x12S\n" +
	"\x10usage_statistics\x18ȋ\x01 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:3\x82\xa6\x1d\x11ContainerRegistry\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xd1\x04\n" +
	"\x04Core\x12`\n" +
	"\x14certification_target\x18\xedW \x01(\v2*.clouditor.ontology.v1.CertificationTargetH\x00R\x13certificationTarget\x12?\n" +
	"\bevidence\x18\x94\x8e\x01 \x01(\v2\x1f.clouditor.ontology.v1.EvidenceH\x00R\bevidence\x12?\n" +
	"\tcloud_sdk\x18\xa0s \x01(\v2\x1f.clouditor.ontology.v1.CloudSDKH\x00R\bcloudSdk\x12[\n" +
	"\x13http_client_library\x18\xf0D \x01(\v2(.clouditor.ontology.v1.HttpClientLibraryH\x00R\x11httpClientLibrary\x12E\n" +
	"\vhttp_server\x18\x898 \x01(\v2!.clouditor.ontology.v1.HttpServerH\x00R\n" +
	"httpServer\x128\n" +
	"\x06logger\x18\x8d: \x01(\v2\x1d.clouditor.ontology.v1.LoggerH\x00R\x06logger\x12K\n" +
	"\rresource_type\x18\xbd+ \x01(\v2#.clouditor.ontology.v1.ResourceTypeH\x00R\fresourceType\x122\n" +
	"\x04tool\x18\xb0S \x01(\v2\x1b.clouditor.ontology.v1.ToolH\x00R\x04toolB\x06\n" +
	"\x04type\"\xc8\x01\n" +
	"\n" +
	"Credential\x12G\n" +
	"\vcertificate\x18\xdeB \x01(\v2\".clouditor.ontology.v1.CertificateH\x00R\vcertificate\x12/\n" +
	"\x03key\x18\x82( \x01(\v2\x1a.clouditor.ontology.v1.KeyH\x00R\x03key\x128\n" +
	"\x06secret\x18\xff} \x01(\v2\x1d.clouditor.ontology.v1.SecretH\x00R\x06secretB\x06\n" +
	"\x04type\"\x9f\x01\n" +
	"\x10DocumentChecksum\x12\x1d\n" +
	"\talgorithm\x18\xaf\a \x01(\tR\talgorithm\x126\n" +
	"\x06errors\x18\xb9\x88\x01 \x03(\v2\x1c.clouditor.ontology.v1.ErrorR\x06errors:4\x82\xa6\x1d\x10DocumentChecksum\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\x88\x02\n" +
	"\x16CryptographicOperation\x12D\n" +
	"\n" +
	"decryption\x18\x8eX \x01(\v2!.clouditor.ontology.v1.DecryptionH\x00R\n" +
	"decryption\x12D\n" +
	"\n" +
	"encryption\x18\x9b\x15 \x01(\v2!.clouditor.ontology.v1.EncryptionH\x00R\n" +
	"encryption\x12Z\n" +
	"\x12cryptographic_hash\x18\xad< \x01(\v2(.clouditor.ontology.v1.CryptographicHashH\x00R\x11cryptographicHashB\x06\n" +
	"\x04type\"\xc0\x01\n" +
	"\x15CustomerKeyEncryption\x12\x1d\n" +
	"\talgorithm\x18\xa4t \x01(\tR\talgorithm\x12\x19\n" +
	"\aenabled\x18\xcfc \x01(\bR\aenabled\x12\x18\n" +
	"\akey_url\x18\x8d2 \x01(\tR\x06keyUrl:S\x82\xa6\x1d\x15CustomerKeyEncryption\x82\xa6\x1d\x10AtRestEncryption\x82\xa6\x1d\x0fConfidentiality\x82\xa6\x1d\x0fSecurityFeature\"G\n" +
	"\x0eDDoSProtection:5\x82\xa6\x1d\x0eDDoSProtection\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeature\"\xea\x04\n" +
	"\x04Data\x12T\n" +
	"\x10generic_document\x18\x80' \x01(\v2&.clouditor.ontology.v1.GenericDocumentH\x00R\x0fgenericDocument\x12Q\n" +
	"\x0fpolicy_document\x18\xe9t \x01(\v2%.clouditor.ontology.v1.PolicyDocumentH\x00R\x0epolicyDocument\x12p\n" +
	"\x1asecurity_advisory_document\x18\xfdr \x01(\v2/.clouditor.ontology.v1.SecurityAdvisoryDocumentH\x00R\x18securityAdvisoryDocument\x12m\n" +
	"\x19service_metadata_document\x18\x90\x02 \x01(\v2..clouditor.ontology.v1.ServiceMetadataDocumentH\x00R\x17serviceMetadataDocument\x12j\n" +
	"\x18machine_learning_dataset\x18\xf8\x0f \x01(\v2-.clouditor.ontology.v1.MachineLearningDatasetH\x00R\x16machineLearningDataset\x12d\n" +
	"\x16machine_learning_model\x18\xa1x \x01(\v2+.clouditor.ontology.v1.MachineLearningModelH\x00R\x14machineLearningModelB\x06\n" +
	"\x04type\"\xd3\x01\n" +
	"\fDataLocation\x12[\n" +
	"\x13local_data_location\x18\x99` \x01(\v2(.clouditor.ontology.v1.LocalDataLocationH\x00R\x11localDataLocation\x12^\n" +
	"\x14remote_data_location\x18\xe5i \x01(\v2).clouditor.ontology.v1.RemoteDataLocationH\x00R\x12remoteDataLocationB\x06\n" +
	"\x04type\"\xb6\x02\n" +
	"\x0fDatabaseConnect\x12\x15\n" +
	"\x05calls\x18\xfad \x03(\tR\x05calls\x12C\n" +
	"\vcode_region\x18\xdf. \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion\x121\n" +
	"\x14database_service_ids\x18\xf5, \x03(\tR\x12databaseServiceIds\x124\n" +
	"\x13database_storage_id\x18\xda\x1c \x01(\tH\x00R\x11databaseStorageId\x88\x01\x01:F\x82\xa6\x1d\x0fDatabaseConnect\x82\xa6\x1d\x11DatabaseOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionalityB\x16\n" +
	"\x14_database_storage_id\"\xc1\x01\n" +
	"\x11DatabaseOperation\x12T\n" +
	"\x10database_connect\x18\xaeT \x01(\v2&.clouditor.ontology.v1.DatabaseConnectH\x00R\x0fdatabaseConnect\x12N\n" +
	"\x0edatabase_query\x18\x92< \x01(\v2$.clouditor.ontology.v1.DatabaseQueryH\x00R\rdatabaseQueryB\x06\n" +
	"\x04type\"\xcc\x02\n" +
	"\rDatabaseQuery\x12\x15\n" +
	"\x05calls\x18\xdf; \x03(\tR\x05calls\x12\x17\n" +
	"\x06modify\x18\xb1; \x01(\bR\x06modify\x12C\n" +
	"\vcode_region\x18\xb0B \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion\x121\n" +
	"\x14database_service_ids\x18\x96p \x03(\tR\x12databaseServiceIds\x125\n" +
	"\x13database_storage_id\x18؋\x01 \x01(\tH\x00R\x11databaseStorageId\x88\x01\x01:D\x82\xa6\x1d\rDatabaseQuery\x82\xa6\x1d\x11DatabaseOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionalityB\x16\n" +
	"\x14_database_storage_id\"\xe4\x03\n" +
	"\x0fDatabaseService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseServiceB\x06\n" +
	"\x04type\"\x9f\t\n" +
	"\x0fDatabaseStorage\x12@\n" +
	"\rcreation_time\x18\x91r \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xf9  \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x9e) \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x93O \x01(\bR\x1ainternetAccessibleEndpoint\x12K\n" +
	"\x06labels\x18\x82x \x03(\v22.clouditor.ontology.v1.DatabaseStorage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf0\t \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x92Z \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\x88, \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12V\n" +
	"\x12at_rest_encryption\x18\xf2q \x01(\v2'.clouditor.ontology.v1.AtRestEncryptionR\x10atRestEncryption\x128\n" +
	"\abackups\x18\xc8d \x03(\v2\x1d.clouditor.ontology.v1.BackupR\abackups\x12G\n" +
	"\fgeo_location\x18\xfc\x83\x01 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12H\n" +
	"\fimmutability\x18\xeaj \x01(\v2#.clouditor.ontology.v1.ImmutabilityR\fimmutability\x12;\n" +
	"\bloggings\x18\xb8\x03 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xd9y \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xd8\x18 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xb6} \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\x9b\x02 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:<\x82\xa6\x1d\x0fDatabaseStorage\x82\xa6\x1d\aStorage\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xb8\x01\n" +
	"\n" +
	"Decryption\x12\x1d\n" +
	"\talgorithm\x18\xae\x1d \x01(\tR\talgorithm\x12C\n" +
	"\vcode_region\x18\xdab \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion:F\x82\xa6\x1d\n" +
	"Decryption\x82\xa6\x1d\x16CryptographicOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\"\xb7\x06\n" +
	"\x19DeviceProvisioningService\x12A\n" +
	"\rcreation_time\x18ҋ\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18\xaf\x8d\x01 \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\xa3\x92\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xb5u \x01(\bR\x1ainternetAccessibleEndpoint\x12U\n" +
	"\x06labels\x18\xae. \x03(\v2<.clouditor.ontology.v1.DeviceProvisioningService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x83L \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xf9s \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xfdL \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\x9d_ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xcfc \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xfd  \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xafA \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:B\x82\xa6\x1d\x19DeviceProvisioningService\x82\xa6\x1d\x03IoT\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x9c\x03\n" +
	"\bDocument\x12T\n" +
	"\x10generic_document\x18\x80' \x01(\v2&.clouditor.ontology.v1.GenericDocumentH\x00R\x0fgenericDocument\x12Q\n" +
	"\x0fpolicy_document\x18\xe9t \x01(\v2%.clouditor.ontology.v1.PolicyDocumentH\x00R\x0epolicyDocument\x12p\n" +
	"\x1asecurity_advisory_document\x18\xfdr \x01(\v2/.clouditor.ontology.v1.SecurityAdvisoryDocumentH\x00R\x18securityAdvisoryDocument\x12m\n" +
	"\x19service_metadata_document\x18\x90\x02 \x01(\v2..clouditor.ontology.v1.ServiceMetadataDocumentH\x00R\x17serviceMetadataDocumentB\x06\n" +
	"\x04type\"\xd0\f\n" +
	"\x17DocumentDatabaseService\x12@\n" +
	"\rcreation_time\x18\xee[ \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xcek \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x84; \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xffL \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\x8b7 \x03(\tR\x03ips\x12S\n" +
	"\x06labels\x18\xe9\x18 \x03(\v2:.clouditor.ontology.v1.DocumentDatabaseService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xb6c \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xf1O \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\x959 \x01(\tR\x03raw\x12Q\n" +
	"\x10activity_logging\x18\b \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12W\n" +
	"\x12anomaly_detections\x18\xeb\a \x03(\v2'.clouditor.ontology.v1.AnomalyDetectionR\x11anomalyDetections\x12H\n" +
	"\fauthenticity\x18\xb16 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xb50 \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\x88J \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\xee9 \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12;\n" +
	"\bloggings\x18\xba\" \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12X\n" +
	"\x12malware_protection\x18\xd8u \x01(\v2(.clouditor.ontology.v1.MalwareProtectionR\x11malwareProtection\x12F\n" +
	"\fredundancies\x18\xb9\a \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12\"\n" +
	"\tparent_id\x18\xa0\x89\x01 \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xd8\b \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\xec6 \x03(\tR\n" +
	"storageIds\x12^\n" +
	"\x14transport_encryption\x18\xb7P \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xdaN \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:~\x82\xa6\x1d\x17DocumentDatabaseService\x82\xa6\x1d\x0fDatabaseService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"g\n" +
	"\x0fEncryptionInUse\x12\x19\n" +
	"\aenabled\x18\xdeB \x01(\bR\aenabled:9\x82\xa6\x1d\x0fEncryptionInUse\x82\xa6\x1d\x0fConfidentiality\x82\xa6\x1d\x0fSecurityFeature\"\xb8\x01\n" +
	"\n" +
	"Encryption\x12\x1d\n" +
	"\talgorithm\x18\x92\x7f \x01(\tR\talgorithm\x12C\n" +
	"\vcode_region\x18\xfbH \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion:F\x82\xa6\x1d\n" +
	"Encryption\x82\xa6\x1d\x16CryptographicOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\">\n" +
	"\x05Error\x12\x19\n" +
	"\amessage\x18\xa9\x1b \x01(\tR\amessage:\x1a\x82\xa6\x1d\x05Error\x82\xa6\x1d\rFunctionality\" \n" +
	"\bEvidence:\x14\x82\xa6\x1d\bEvidence\x82\xa6\x1d\x04Core\"N\n" +
	"\x12ExplainableResults:8\x82\xa6\x1d\x12ExplainableResults\x82\xa6\x1d\vReliability\x82\xa6\x1d\x0fSecurityFeature\"\xbb\t\n" +
	"\vFileStorage\x12@\n" +
	"\rcreation_time\x18\xca\x1d \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x8a0 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xd9# \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xfe\x1b \x01(\bR\x1ainternetAccessibleEndpoint\x12G\n" +
	"\x06labels\x18\xe3\x15 \x03(\v2..clouditor.ontology.v1.FileStorage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x84~ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12$\n" +
	"\rpublic_access\x18\xabR \x01(\bR\fpublicAccess\x12\x11\n" +
	"\x03raw\x18\x9b\" \x01(\tR\x03raw\x12S\n" +
	"\x10activity_logging\x18\x81\x88\x01 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12V\n" +
	"\x12at_rest_encryption\x18\x95\v \x01(\v2'.clouditor.ontology.v1.AtRestEncryptionR\x10atRestEncryption\x129\n" +
	"\abackups\x18\xb0\x89\x01 \x03(\v2\x1d.clouditor.ontology.v1.BackupR\abackups\x12F\n" +
	"\fgeo_location\x18\x8f* \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12H\n" +
	"\fimmutability\x18\xd9= \x01(\v2#.clouditor.ontology.v1.ImmutabilityR\fimmutability\x12;\n" +
	"\bloggings\x18\xf4\x06 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xfe\t \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xd1\" \x01(\tH\x00R\bparentId\x88\x01\x01\x12S\n" +
	"\x10resource_logging\x18\xaf\x8e\x01 \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\x9bF \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:8\x82\xa6\x1d\vFileStorage\x82\xa6\x1d\aStorage\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x80\v\n" +
	"\x12FileStorageService\x12A\n" +
	"\rcreation_time\x18\xb7\x91\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xd4M \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\x8f\x87\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xa4} \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\x8f3 \x03(\tR\x03ips\x12N\n" +
	"\x06labels\x18\x83I \x03(\v25.clouditor.ontology.v1.FileStorageService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xcd\x18 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xdda \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xfcl \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xf0_ \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12H\n" +
	"\fauthenticity\x18\xae~ \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xd0x \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12G\n" +
	"\fgeo_location\x18\xfb\x82\x01 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\xfa_ \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12<\n" +
	"\bloggings\x18ݑ\x01 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x91# \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xf0\x1b \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xe7R \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\xf7* \x03(\tR\n" +
	"storageIds\x12_\n" +
	"\x14transport_encryption\x18\xa5\x8f\x01 \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xf3\r \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:f\x82\xa6\x1d\x12FileStorageService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xc5\x01\n" +
	"\bFirewall\x12E\n" +
	"\vl3_firewall\x18\xa5G \x01(\v2!.clouditor.ontology.v1.L3FirewallH\x00R\n" +
	"l3Firewall\x12j\n" +
	"\x18web_application_firewall\x18\x9d- \x01(\v2-.clouditor.ontology.v1.WebApplicationFirewallH\x00R\x16webApplicationFirewallB\x06\n" +
	"\x04type\"\xb2\x02\n" +
	"\tFramework\x12?\n" +
	"\tcloud_sdk\x18\xa0s \x01(\v2\x1f.clouditor.ontology.v1.CloudSDKH\x00R\bcloudSdk\x12[\n" +
	"\x13http_client_library\x18\xf0D \x01(\v2(.clouditor.ontology.v1.HttpClientLibraryH\x00R\x11httpClientLibrary\x12E\n" +
	"\vhttp_server\x18\x898 \x01(\v2!.clouditor.ontology.v1.HttpServerH\x00R\n" +
	"httpServer\x128\n" +
	"\x06logger\x18\x8d: \x01(\v2\x1d.clouditor.ontology.v1.LoggerH\x00R\x06loggerB\x06\n" +
	"\x04type\"\x96\t\n" +
	"\bFunction\x12@\n" +
	"\rcreation_time\x18\xe2\x1f \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18\x9b\x8e\x01 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xc9Y \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xd8  \x01(\bR\x1ainternetAccessibleEndpoint\x12D\n" +
	"\x06labels\x18\xb6u \x03(\v2+.clouditor.ontology.v1.Function.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf52 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xfb\v \x01(\tR\x03raw\x12*\n" +
	"\x10runtime_language\x18\x887 \x01(\tR\x0fruntimeLanguage\x12(\n" +
	"\x0fruntime_version\x18\x91} \x01(\tR\x0eruntimeVersion\x12T\n" +
	"\x11encryption_in_use\x18\xf6\x81\x01 \x01(\v2&.clouditor.ontology.v1.EncryptionInUseR\x0fencryptionInUse\x12F\n" +
	"\fgeo_location\x18\xf6D \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xe9+ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x123\n" +
	"\x15network_interface_ids\x18\x80\x1e \x03(\tR\x13networkInterfaceIds\x12G\n" +
	"\fredundancies\x18\xa8\x8e\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12X\n" +
	"\x12remote_attestation\x18\xfbh \x01(\v2(.clouditor.ontology.v1.RemoteAttestationR\x11remoteAttestation\x12!\n" +
	"\tparent_id\x18\x94] \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xa8) \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\xd0L \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:5\x82\xa6\x1d\bFunction\x82\xa6\x1d\aCompute\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xc8\t\n" +
	"\x0fFunctionService\x12@\n" +
	"\rcreation_time\x18\xb0\x1c \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18χ\x01 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xa1\x1c \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xfa( \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xca9 \x03(\tR\x03ips\x12L\n" +
	"\x06labels\x18\x99\x92\x01 \x03(\v22.clouditor.ontology.v1.FunctionService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf3z \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x16\n" +
	"\x05ports\x18\xb1\x8a\x01 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xbd& \x01(\tR\x03raw\x12I\n" +
	"\fauthenticity\x18\xf4\x89\x01 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xb5* \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12\"\n" +
	"\ffunction_ids\x18\xba\x12 \x03(\tR\vfunctionIds\x12F\n" +
	"\fgeo_location\x18\xb4? \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xb4x \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12G\n" +
	"\fredundancies\x18\xfb\x8a\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xd1Y \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\x84+ \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\xcf? \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xbd: \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:Q\x82\xa6\x1d\x0fFunctionService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xe3\v\n" +
	"\rFunctionality\x12H\n" +
	"\fcipher_suite\x18\xfcV \x01(\v2\".clouditor.ontology.v1.CipherSuiteH\x00R\vcipherSuite\x12E\n" +
	"\vcode_region\x18\xe0G \x01(\v2!.clouditor.ontology.v1.CodeRegionH\x00R\n" +
	"codeRegion\x12[\n" +
	"\x13local_data_location\x18\x99` \x01(\v2(.clouditor.ontology.v1.LocalDataLocationH\x00R\x11localDataLocation\x12^\n" +
	"\x14remote_data_location\x18\xe5i \x01(\v2).clouditor.ontology.v1.RemoteDataLocationH\x00R\x12remoteDataLocation\x125\n" +
	"\x05error\x18\x903 \x01(\v2\x1c.clouditor.ontology.v1.ErrorH\x00R\x05error\x12K\n" +
	"\rhttp_endpoint\x18\xaa! \x01(\v2#.clouditor.ontology.v1.HttpEndpointH\x00R\fhttpEndpoint\x12^\n" +
	"\x14http_request_handler\x18\xeb9 \x01(\v2).clouditor.ontology.v1.HttpRequestHandlerH\x00R\x12httpRequestHandler\x12D\n" +
	"\n" +
	"decryption\x18\x8eX \x01(\v2!.clouditor.ontology.v1.DecryptionH\x00R\n" +
	"decryption\x12D\n" +
	"\n" +
	"encryption\x18\x9b\x15 \x01(\v2!.clouditor.ontology.v1.EncryptionH\x00R\n" +
	"encryption\x12Z\n" +
	"\x12cryptographic_hash\x18\xad< \x01(\v2(.clouditor.ontology.v1.CryptographicHashH\x00R\x11cryptographicHash\x12T\n" +
	"\x10database_connect\x18\xaeT \x01(\v2&.clouditor.ontology.v1.DatabaseConnectH\x00R\x0fdatabaseConnect\x12N\n" +
	"\x0edatabase_query\x18\x92< \x01(\v2$.clouditor.ontology.v1.DatabaseQueryH\x00R\rdatabaseQuery\x12H\n" +
	"\fhttp_request\x18\xd5\x16 \x01(\v2\".clouditor.ontology.v1.HttpRequestH\x00R\vhttpRequest\x12K\n" +
	"\rlog_operation\x18\xaao \x01(\v2#.clouditor.ontology.v1.LogOperationH\x00R\flogOperation\x12e\n" +
	"\x16object_storage_request\x18\xf7\x83\x01 \x01(\v2+.clouditor.ontology.v1.ObjectStorageRequestH\x00R\x14objectStorageRequest\x12W\n" +
	"\x11schema_validation\x18\xcb\x7f \x01(\v2'.clouditor.ontology.v1.SchemaValidationH\x00R\x10schemaValidation\x12d\n" +
	"\x16security_advisory_feed\x18\xcfl \x01(\v2+.clouditor.ontology.v1.SecurityAdvisoryFeedH\x00R\x14securityAdvisoryFeed\x12M\n" +
	"\rvulnerability\x18\xe7' \x01(\v2$.clouditor.ontology.v1.VulnerabilityH\x00R\rvulnerabilityB\x06\n" +
	"\x04type\"\xfb\x06\n" +
	"\x0fGenericDocument\x12@\n" +
	"\rcreation_time\x18\xf5k \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xe5i \x01(\tR\vdescription\x12\x1b\n" +
	"\bfiletype\x18\xe8+ \x01(\tR\bfiletype\x12\x17\n" +
	"\x02id\x18\xd2k \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12K\n" +
	"\x06labels\x18\xf3& \x03(\v22.clouditor.ontology.v1.GenericDocument.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xa68 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x9eh \x01(\tR\x03raw\x12J\n" +
	"\rdata_location\x18\xe0\x80\x01 \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12X\n" +
	"\x12document_checksums\x18և\x01 \x03(\v2'.clouditor.ontology.v1.DocumentChecksumR\x11documentChecksums\x12[\n" +
	"\x13document_signatures\x18\x8f\x94\x01 \x03(\v2(.clouditor.ontology.v1.DocumentSignatureR\x12documentSignatures\x12\"\n" +
	"\tparent_id\x18\x86\x84\x01 \x01(\tH\x00R\bparentId\x88\x01\x01\x12U\n" +
	"\x11schema_validation\x18\xb98 \x01(\v2'.clouditor.ontology.v1.SchemaValidationR\x10schemaValidation\x12T\n" +
	"\x11security_features\x18\x813 \x03(\v2&.clouditor.ontology.v1.SecurityFeatureR\x10securityFeatures\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:3\x82\xa6\x1d\x0fGenericDocument\x82\xa6\x1d\bDocument\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xb3\t\n" +
	"\x15GenericNetworkService\x12A\n" +
	"\rcreation_time\x18ށ\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x9bo \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf0c \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xb8\x15 \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\x92Z \x03(\tR\x03ips\x12Q\n" +
	"\x06labels\x18\x98' \x03(\v28.clouditor.ontology.v1.GenericNetworkService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x9bi \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\x94\x04 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xdcT \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\x81} \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xde0 \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xc7N \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xe1u \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xbb} \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x9fe \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xb1\\ \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\x87m \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12S\n" +
	"\x10usage_statistics\x18\x95\x83\x01 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:W\x82\xa6\x1d\x15GenericNetworkService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"Z\n" +
	"\vGeoLocation\x12\x17\n" +
	"\x06region\x18\x9c< \x01(\tR\x06region:2\x82\xa6\x1d\vGeoLocation\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeature\"\x9d\x01\n" +
	"\rGeoRedundancy\x12H\n" +
	"\rgeo_locations\x18\xd6l \x03(\v2\".clouditor.ontology.v1.GeoLocationR\fgeoLocations:B\x82\xa6\x1d\rGeoRedundancy\x82\xa6\x1d\n" +
	"Redundancy\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeature\"\xe4\x01\n" +
	"\x11CryptographicHash\x12\x1d\n" +
	"\talgorithm\x18\x9fM \x01(\tR\talgorithm\x12\x1c\n" +
	"\tuses_salt\x18\xdaB \x01(\bR\busesSalt\x12C\n" +
	"\vcode_region\x18\xb62 \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion:M\x82\xa6\x1d\x11CryptographicHash\x82\xa6\x1d\x16CryptographicOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\"?\n" +
	"\x11HttpClientLibrary:*\x82\xa6\x1d\x11HttpClientLibrary\x82\xa6\x1d\tFramework\x82\xa6\x1d\x04Core\"\xb8\x02\n" +
	"\fHttpEndpoint\x12\x19\n" +
	"\ahandler\x18\xa2M \x01(\tR\ahandler\x12\x16\n" +
	"\x06method\x18} \x01(\tR\x06method\x12\x14\n" +
	"\x04path\x18\xfd\x85\x01 \x01(\tR\x04path\x12\x11\n" +
	"\x03url\x18\xefC \x01(\tR\x03url\x12I\n" +
	"\fauthenticity\x18\x88\x91\x01 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12^\n" +
	"\x14transport_encryption\x18\xf5_ \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption:!\x82\xa6\x1d\fHttpEndpoint\x82\xa6\x1d\rFunctionality\"\xff\x01\n" +
	"\vHttpRequest\x12\x13\n" +
	"\x04call\x18\xb7\x18 \x01(\tR\x04call\x12\x1a\n" +
	"\breq_body\x18\xc8q \x01(\tR\areqBody\x12C\n" +
	"\vcode_region\x18\x9d/ \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion\x12K\n" +
	"\x0ehttp_endpoints\x18\x8c@ \x03(\v2#.clouditor.ontology.v1.HttpEndpointR\rhttpEndpoints:-\x82\xa6\x1d\vHttpRequest\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\"\xdf\x01\n" +
	"\x12HttpRequestHandler\x12\x13\n" +
	"\x04path\x18\xeb\x19 \x01(\tR\x04path\x12+\n" +
	"\x0eapplication_id\x18\xbeM \x01(\tH\x00R\rapplicationId\x88\x01\x01\x12K\n" +
	"\x0ehttp_endpoints\x18\xeaE \x03(\v2#.clouditor.ontology.v1.HttpEndpointR\rhttpEndpoints:'\x82\xa6\x1d\x12HttpRequestHandler\x82\xa6\x1d\rFunctionalityB\x11\n" +
	"\x0f_application_id\"\x8f\x01\n" +
	"\n" +
	"HttpServer\x12\\\n" +
	"\x14http_request_handler\x18\xcd= \x01(\v2).clouditor.ontology.v1.HttpRequestHandlerR\x12httpRequestHandler:#\x82\xa6\x1d\n" +
	"HttpServer\x82\xa6\x1d\tFramework\x82\xa6\x1d\x04Core\"\xcd\x01\n" +
	"\x0eHumanResources\x12Z\n" +
	"\x12awareness_training\x18\xe3i \x01(\v2(.clouditor.ontology.v1.AwarenessTrainingH\x00R\x11awarenessTraining\x12W\n" +
	"\x11security_training\x18\xbd' \x01(\v2'.clouditor.ontology.v1.SecurityTrainingH\x00R\x10securityTrainingB\x06\n" +
	"\x04type\"\xa9\x01\n" +
	"\fIdentifiable\x12>\n" +
	"\bidentity\x18\xe5r \x01(\v2\x1f.clouditor.ontology.v1.IdentityH\x00R\bidentity\x12Q\n" +
	"\x0frole_assignment\x18\xb9\x12 \x01(\v2%.clouditor.ontology.v1.RoleAssignmentH\x00R\x0eroleAssignmentB\x06\n" +
	"\x04type\"\xb6\t\n" +
	"\bIdentity\x12\x1d\n" +
	"\tactivated\x18\x84O \x01(\bR\tactivated\x12@\n" +
	"\rcreation_time\x18\x97n \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x82H \x01(\tR\vdescription\x127\n" +
	"\x17disable_password_policy\x18\xd0. \x01(\bR\x15disablePasswordPolicy\x12 \n" +
	"\venforce_mfa\x18\x99k \x01(\bR\n" +
	"enforceMfa\x12\x17\n" +
	"\x02id\x18\xe6) \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xd4x \x01(\bR\x1ainternetAccessibleEndpoint\x12D\n" +
	"\x06labels\x18\xcc\x05 \x03(\v2+.clouditor.ontology.v1.Identity.LabelsEntryR\x06labels\x12@\n" +
	"\rlast_activity\x18\x9f\x14 \x01(\v2\x1a.google.protobuf.TimestampR\flastActivity\x126\n" +
	"\x16login_defender_enabled\x18ȑ\x01 \x01(\bR\x14loginDefenderEnabled\x12\x1b\n" +
	"\x04name\x18\x92\x14 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x1f\n" +
	"\n" +
	"privileged\x18\xfd\x11 \x01(\bR\n" +
	"privileged\x12\x11\n" +
	"\x03raw\x18\x97~ \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\xc04 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12K\n" +
	"\rauthorization\x18\xcdt \x01(\v2$.clouditor.ontology.v1.AuthorizationR\rauthorization\x12F\n" +
	"\fgeo_location\x18\xc9G \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xe6\x13 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xd4{ \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xa4' \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xe6& \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01::\x82\xa6\x1d\bIdentity\x82\xa6\x1d\fIdentifiable\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xa2\x01\n" +
	"\x05Image\x12R\n" +
	"\x0fcontainer_image\x18ȋ\x01 \x01(\v2%.clouditor.ontology.v1.ContainerImageH\x00R\x0econtainerImage\x12=\n" +
	"\bvm_image\x18\xa1\x80\x01 \x01(\v2\x1e.clouditor.ontology.v1.VMImageH\x00R\avmImageB\x06\n" +
	"\x04type\"[\n" +
	"\fImmutability\x12\x19\n" +
	"\aenabled\x18\xc3\x0e \x01(\bR\aenabled:0\x82\xa6\x1d\fImmutability\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\xa2\x04\n" +
	"\tIntegrity\x12W\n" +
	"\x11local_attestation\x18\xc8! \x01(\v2'.clouditor.ontology.v1.LocalAttestationH\x00R\x10localAttestation\x12Z\n" +
	"\x12remote_attestation\x18\xc8j \x01(\v2(.clouditor.ontology.v1.RemoteAttestationH\x00R\x11remoteAttestation\x12W\n" +
	"\x11automatic_updates\x18\x86N \x01(\v2'.clouditor.ontology.v1.AutomaticUpdatesH\x00R\x10automaticUpdates\x12W\n" +
	"\x11document_checksum\x18\xe3} \x01(\v2'.clouditor.ontology.v1.DocumentChecksumH\x00R\x10documentChecksum\x12J\n" +
	"\fimmutability\x18\xd8\x0f \x01(\v2#.clouditor.ontology.v1.ImmutabilityH\x00R\fimmutability\x12Z\n" +
	"\x12document_signature\x18\x87> \x01(\v2(.clouditor.ontology.v1.DocumentSignatureH\x00R\x11documentSignatureB\x06\n" +
	"\x04type\"\xcf\x01\n" +
	"\x03IoT\x12s\n" +
	"\x1bdevice_provisioning_service\x18\xe4q \x01(\v20.clouditor.ontology.v1.DeviceProvisioningServiceH\x00R\x19deviceProvisioningService\x12K\n" +
	"\rmessaging_hub\x18\x93d \x01(\v2#.clouditor.ontology.v1.MessagingHubH\x00R\fmessagingHubB\x06\n" +
	"\x04type\"\xfc\x05\n" +
	"\x03Job\x12@\n" +
	"\rcreation_time\x18\x84\x17 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xbd= \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xbcs \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x9b, \x01(\bR\x1ainternetAccessibleEndpoint\x12@\n" +
	"\x06labels\x18\xb1\x8c\x01 \x03(\v2&.clouditor.ontology.v1.Job.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\u0090\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x90- \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xf5\x0f \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xcc= \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xc9` \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xeaw \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xf1W \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:4\x82\xa6\x1d\x03Job\x82\xa6\x1d\vCICDService\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xc2\x01\n" +
	"\x18TokenBasedAuthentication\x12-\n" +
	"\x12context_is_checked\x18\xd0\t \x01(\bR\x10contextIsChecked\x12\x19\n" +
	"\aenabled\x18\xe8R \x01(\bR\aenabled\x12\x1b\n" +
	"\benforced\x18\x966 \x01(\bR\benforced:?\x82\xa6\x1d\x18TokenBasedAuthentication\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\xc6\b\n" +
	"\x03Key\x12\x1d\n" +
	"\talgorithm\x18\x85\v \x01(\tR\talgorithm\x12@\n" +
	"\rcreation_time\x18\xba& \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18\xfe\x87\x01 \x01(\tR\vdescription\x12\x19\n" +
	"\aenabled\x18\xd3a \x01(\bR\aenabled\x12D\n" +
	"\x0fexpiration_date\x18\xfau \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationDate\x12\x17\n" +
	"\x02id\x18\xbew \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xb2\x03 \x01(\bR\x1ainternetAccessibleEndpoint\x12\x1e\n" +
	"\n" +
	"is_managed\x18\xca~ \x01(\bR\tisManaged\x12\x1b\n" +
	"\bkey_size\x18\x87\x80\x01 \x01(\x05R\akeySize\x12?\n" +
	"\x06labels\x18\xb1! \x03(\v2&.clouditor.ontology.v1.Key.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\x91\x94\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12C\n" +
	"\x0fnot_before_date\x18\xeb\x01 \x01(\v2\x1a.google.protobuf.TimestampR\rnotBeforeDate\x12\x11\n" +
	"\x03raw\x18\xc6\\ \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xc2} \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x121\n" +
	"\x11infrastructure_id\x18\xa9v \x01(\tH\x00R\x10infrastructureId\x88\x01\x01\x12;\n" +
	"\bloggings\x18\xe8\x02 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xafb \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xbe\" \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x99G \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:3\x82\xa6\x1d\x03Key\x82\xa6\x1d\n" +
	"Credential\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x14\n" +
	"\x12_infrastructure_idB\f\n" +
	"\n" +
	"_parent_id\"\xd2\f\n" +
	"\x17KeyValueDatabaseService\x12@\n" +
	"\rcreation_time\x18\x90z \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x9c\v \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xd3r \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xf4\x0e \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xe7T \x03(\tR\x03ips\x12S\n" +
	"\x06labels\x18\xa7j \x03(\v2:.clouditor.ontology.v1.KeyValueDatabaseService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xc7W \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xb64 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xadq \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xe5\b \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12X\n" +
	"\x12anomaly_detections\x18\x8f\x94\x01 \x03(\v2'.clouditor.ontology.v1.AnomalyDetectionR\x11anomalyDetections\x12H\n" +
	"\fauthenticity\x18\xcb[ \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xe3W \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xf22 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\xfb{ \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12;\n" +
	"\bloggings\x18\x8f) \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12X\n" +
	"\x12malware_protection\x18\xe5O \x01(\v2(.clouditor.ontology.v1.MalwareProtectionR\x11malwareProtection\x12F\n" +
	"\fredundancies\x18\x99\x02 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12\"\n" +
	"\tparent_id\x18\x81\x94\x01 \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xa3\x1d \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\xfes \x03(\tR\n" +
	"storageIds\x12^\n" +
	"\x14transport_encryption\x18\xf7, \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xc1\" \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:~\x82\xa6\x1d\x17KeyValueDatabaseService\x82\xa6\x1d\x0fDatabaseService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xa4\x06\n" +
	"\bKeyVault\x12@\n" +
	"\rcreation_time\x18\xbcf \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xbf# \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xa1[ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xd8y \x01(\bR\x1ainternetAccessibleEndpoint\x12D\n" +
	"\x06labels\x18\xd1\\ \x03(\v2+.clouditor.ontology.v1.KeyVault.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xc9, \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xc7~ \x01(\tR\x03raw\x12'\n" +
	"\x0ecredential_ids\x18\x80\x8b\x01 \x03(\tR\rcredentialIds\x12F\n" +
	"\fgeo_location\x18\x9d\x03 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xcc\x17 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xec\x13 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12\"\n" +
	"\tparent_id\x18\xb9\x8f\x01 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xb7) \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:*\x82\xa6\x1d\bKeyVault\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xc3\x01\n" +
	"\n" +
	"L3Firewall\x12\x19\n" +
	"\aenabled\x18\x84J \x01(\bR\aenabled\x12\x19\n" +
	"\ainbound\x18\xe8\a \x01(\bR\ainbound\x12*\n" +
	"\x10restricted_ports\x18\xad9 \x01(\tR\x0frestrictedPorts:S\x82\xa6\x1d\n" +
	"L3Firewall\x82\xa6\x1d\bFirewall\x82\xa6\x1d\x11AccessRestriction\x82\xa6\x1d\rAuthorization\x82\xa6\x1d\x0fSecurityFeature\"\xcf\x05\n" +
	"\aLibrary\x12@\n" +
	"\rcreation_time\x18\xd3] \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xc3\x13 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xae[ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12C\n" +
	"\x06labels\x18\xfa: \x03(\v2*.clouditor.ontology.v1.Library.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\xa9\x91\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x84N \x01(\tR\x03raw\x12'\n" +
	"\x0fcode_module_ids\x18\xf7K \x03(\tR\rcodeModuleIds\x122\n" +
	"\x12code_repository_id\x18\xa7\x02 \x01(\tH\x00R\x10codeRepositoryId\x88\x01\x01\x12O\n" +
	"\x0ffunctionalities\x18\xddR \x03(\v2$.clouditor.ontology.v1.FunctionalityR\x0ffunctionalities\x12 \n" +
	"\vlibrary_ids\x18\xbcF \x03(\tR\n" +
	"libraryIds\x12!\n" +
	"\tparent_id\x18\xf0\x16 \x01(\tH\x01R\bparentId\x88\x01\x01\x12O\n" +
	"\x0fvulnerabilities\x18\xbb\x18 \x03(\v2$.clouditor.ontology.v1.VulnerabilityR\x0fvulnerabilities\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:,\x82\xa6\x1d\aLibrary\x82\xa6\x1d\tComponent\x82\xa6\x1d\x04Code\x82\xa6\x1d\bResourceB\x15\n" +
	"\x13_code_repository_idB\f\n" +
	"\n" +
	"_parent_id\"\x85\v\n" +
	"\fLoadBalancer\x12@\n" +
	"\rcreation_time\x18\x94\x15 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x86\x16 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xd9@ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12B\n" +
	"\x1cinternet_accessible_endpoint\x18\xe9\x81\x01 \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xc9a \x03(\tR\x03ips\x12H\n" +
	"\x06labels\x18\xe1\b \x03(\v2/.clouditor.ontology.v1.LoadBalancer.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\xa4\x80\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\x8c' \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xfb\x7f \x01(\tR\x03raw\x12\x11\n" +
	"\x03url\x18\xb3\x12 \x01(\tR\x03url\x12X\n" +
	"\x12access_restriction\x18\xff5 \x01(\v2(.clouditor.ontology.v1.AccessRestrictionR\x11accessRestriction\x12H\n" +
	"\fauthenticity\x18\x86  \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xcd! \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12G\n" +
	"\fgeo_location\x18҈\x01 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12K\n" +
	"\x0ehttp_endpoints\x18\xa8T \x03(\v2#.clouditor.ontology.v1.HttpEndpointR\rhttpEndpoints\x12;\n" +
	"\bloggings\x18\x884 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12/\n" +
	"\x13network_service_ids\x18\xc9q \x03(\tR\x11networkServiceIds\x12F\n" +
	"\fredundancies\x18\xc1S \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xee\x1d \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\x81D \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\x8dJ \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12S\n" +
	"\x10usage_statistics\x18\xa9\x83\x01 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:N\x82\xa6\x1d\fLoadBalancer\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"r\n" +
	"\x10LocalAttestation\x12\x19\n" +
	"\aenabled\x18\xfeb \x01(\bR\aenabled:C\x82\xa6\x1d\x10LocalAttestation\x82\xa6\x1d\vAttestation\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\xed\x01\n" +
	"\x11LocalDataLocation\x12\x14\n" +
	"\x04path\x18\x93\x82\x01 \x01(\tR\x04path\x12V\n" +
	"\x12at_rest_encryption\x18\xb5{ \x01(\v2'.clouditor.ontology.v1.AtRestEncryptionR\x10atRestEncryption\x12#\n" +
	"\n" +
	"storage_id\x18\xa8D \x01(\tH\x00R\tstorageId\x88\x01\x01:6\x82\xa6\x1d\x11LocalDataLocation\x82\xa6\x1d\fDataLocation\x82\xa6\x1d\rFunctionalityB\r\n" +
	"\v_storage_id\"\xa1\x01\n" +
	"\x0fLocalRedundancy\x12H\n" +
	"\rgeo_locations\x18\x8e' \x03(\v2\".clouditor.ontology.v1.GeoLocationR\fgeoLocations:D\x82\xa6\x1d\x0fLocalRedundancy\x82\xa6\x1d\n" +
	"Redundancy\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeature\"\xea\x01\n" +
	"\fLogOperation\x12\x13\n" +
	"\x04call\x18\x922 \x01(\tR\x04call\x12\x15\n" +
	"\x05value\x18\xfd: \x01(\tR\x05value\x12C\n" +
	"\vcode_region\x18\x90[ \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion\x129\n" +
	"\alogging\x18\xe9` \x01(\v2\x1e.clouditor.ontology.v1.LoggingR\alogging:.\x82\xa6\x1d\fLogOperation\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\")\n" +
	"\x06Logger:\x1f\x82\xa6\x1d\x06Logger\x82\xa6\x1d\tFramework\x82\xa6\x1d\x04Core\"\xac\x03\n" +
	"\aLogging\x12T\n" +
	"\x10activity_logging\x18\x8c\x17 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingH\x00R\x0factivityLogging\x12]\n" +
	"\x13application_logging\x18\xf7c \x01(\v2).clouditor.ontology.v1.ApplicationLoggingH\x00R\x12applicationLogging\x12I\n" +
	"\fboot_logging\x18\x87\x90\x01 \x01(\v2\".clouditor.ontology.v1.BootLoggingH\x00R\vbootLogging\x12B\n" +
	"\n" +
	"os_logging\x18\xee\x16 \x01(\v2 .clouditor.ontology.v1.OSLoggingH\x00R\tosLogging\x12U\n" +
	"\x10resource_logging\x18\x9b\x89\x01 \x01(\v2&.clouditor.ontology.v1.ResourceLoggingH\x00R\x0fresourceLoggingB\x06\n" +
	"\x04type\"\xbf\t\n" +
	"\x0eLoggingService\x12@\n" +
	"\rcreation_time\x18\x96k \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xe4u \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x88U \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x95\x1c \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xa6! \x03(\tR\x03ips\x12J\n" +
	"\x06labels\x18\x81\x06 \x03(\v21.clouditor.ontology.v1.LoggingService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xfc\x1e \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xf5\x13 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xf7\x1c \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\xcaw \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xadP \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\x8e! \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xcd* \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x8e\f \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x82\x02 \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\x8d} \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\x847 \x03(\tR\n" +
	"storageIds\x12_\n" +
	"\x14transport_encryption\x18\xab\x87\x01 \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xb3\t \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:P\x82\xa6\x1d\x0eLoggingService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xeb\x01\n" +
	"\x0fMachineLearning\x12j\n" +
	"\x18machine_learning_dataset\x18\xf8\x0f \x01(\v2-.clouditor.ontology.v1.MachineLearningDatasetH\x00R\x16machineLearningDataset\x12d\n" +
	"\x16machine_learning_model\x18\xa1x \x01(\v2+.clouditor.ontology.v1.MachineLearningModelH\x00R\x14machineLearningModelB\x06\n" +
	"\x04type\"\xbe\x04\n" +
	"\x16MachineLearningDataset\x12@\n" +
	"\rcreation_time\x18\xfdq \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xdd$ \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x8dk \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12R\n" +
	"\x06labels\x18\x8b\x1a \x03(\v29.clouditor.ontology.v1.MachineLearningDataset.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xdfp \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xa31 \x01(\tR\x03raw\x12\x13\n" +
	"\x04size\x18\xdd= \x01(\x05R\x04size\x12\x13\n" +
	"\x04type\x18\xd4( \x01(\tR\x04type\x12I\n" +
	"\rdata_location\x18\xc1\x18 \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12!\n" +
	"\tparent_id\x18\x8e3 \x01(\tH\x00R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:A\x82\xa6\x1d\x16MachineLearningDataset\x82\xa6\x1d\x0fMachineLearning\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xf1\x05\n" +
	"\x14MachineLearningModel\x12&\n" +
	"\x0eadv_robustness\x18\xe9n \x01(\x02R\radvRobustness\x12A\n" +
	"\rcreation_time\x18Ռ\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x98) \x01(\tR\vdescription\x12'\n" +
	"\x0eexplainability\x18\xe8\n" +
	" \x01(\x02R\x0eexplainability\x12\x17\n" +
	"\x02id\x18\x90+ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12P\n" +
	"\x06labels\x18\x8c\f \x03(\v27.clouditor.ontology.v1.MachineLearningModel.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xa7\f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\"\n" +
	"\fpoison_level\x18\xc4\x06 \x01(\x02R\vpoisonLevel\x12$\n" +
	"\rprivacy_label\x18\xfb> \x01(\x02R\fprivacyLabel\x12$\n" +
	"\rprivacy_level\x18\xee\t \x01(\x02R\fprivacyLevel\x12\x11\n" +
	"\x03raw\x18\xa6a \x01(\tR\x03raw\x12\x1f\n" +
	"\n" +
	"robustness\x18\x8ej \x01(\x02R\n" +
	"robustness\x12I\n" +
	"\rdata_location\x18\xb6\x17 \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12!\n" +
	"\tparent_id\x18\x86y \x01(\tH\x00R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:?\x82\xa6\x1d\x14MachineLearningModel\x82\xa6\x1d\x0fMachineLearning\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x8d\n" +
	"\n" +
	"\x16MachineLearningService\x12A\n" +
	"\rcreation_time\x18ӎ\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xa0\x10 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xe0n \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xed} \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xa6\\ \x03(\tR\x03ips\x12S\n" +
	"\x06labels\x18\xf7\x93\x01 \x03(\v29.clouditor.ontology.v1.MachineLearningService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xad/ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xa05 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xdf. \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\x96< \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xcfT \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xec\x19 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xab/ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x121\n" +
	"\x14machine_learning_ids\x18\xf55 \x03(\tR\x12machineLearningIds\x12G\n" +
	"\fredundancies\x18ւ\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xaf\x11 \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xd5S \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\xa1\x01 \x03(\tR\n" +
	"storageIds\x12_\n" +
	"\x14transport_encryption\x18\xf1\x84\x01 \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xf3* \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:X\x82\xa6\x1d\x16MachineLearningService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xcb\x02\n" +
	"\x11MalwareProtection\x12O\n" +
	"\x15duration_since_active\x18\u0092\x01 \x01(\v2\x19.google.protobuf.DurationR\x13durationSinceActive\x12\x1a\n" +
	"\aenabled\x18Ԍ\x01 \x01(\bR\aenabled\x126\n" +
	"\x17number_of_threats_found\x18\xc5] \x01(\x05R\x14numberOfThreatsFound\x12[\n" +
	"\x13application_logging\x18\xf5? \x01(\v2).clouditor.ontology.v1.ApplicationLoggingR\x12applicationLogging:4\x82\xa6\x1d\x11MalwareProtection\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xbf\x01\n" +
	"\x14ManagedKeyEncryption\x12\x1d\n" +
	"\talgorithm\x18\x83\x14 \x01(\tR\talgorithm\x12\x1a\n" +
	"\aenabled\x18؎\x01 \x01(\bR\aenabled\x12\x18\n" +
	"\akey_url\x18\x8a\x7f \x01(\tR\x06keyUrl:R\x82\xa6\x1d\x14ManagedKeyEncryption\x82\xa6\x1d\x10AtRestEncryption\x82\xa6\x1d\x0fConfidentiality\x82\xa6\x1d\x0fSecurityFeature\"\x8e\x06\n" +
	"\fMessagingHub\x12@\n" +
	"\rcreation_time\x18\x86B \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x89] \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xff6 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x8d) \x01(\bR\x1ainternetAccessibleEndpoint\x12H\n" +
	"\x06labels\x18\xaa$ \x03(\v2/.clouditor.ontology.v1.MessagingHub.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xa3  \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xc12 \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xceS \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xe4\x06 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12G\n" +
	"\fredundancies\x18\xae\x92\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xb0\x12 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xa1k \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:5\x82\xa6\x1d\fMessagingHub\x82\xa6\x1d\x03IoT\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"h\n" +
	"\n" +
	"CodeModule\x12R\n" +
	"\x10source_code_file\x18\xf4\x15 \x01(\v2%.clouditor.ontology.v1.SourceCodeFileH\x00R\x0esourceCodeFileB\x06\n" +
	"\x04type\"\xd9\x01\n" +
	"\x18MultiFactorAuthentiation\x12.\n" +
	"\x12context_is_checked\x18\xb7\x87\x01 \x01(\bR\x10contextIsChecked\x12L\n" +
	"\x0eauthenticities\x18\xc3t \x03(\v2#.clouditor.ontology.v1.AuthenticityR\x0eauthenticities:?\x82\xa6\x1d\x18MultiFactorAuthentiation\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\xd8\f\n" +
	"\x19MultiModalDatabaseService\x12@\n" +
	"\rcreation_time\x18\xe1Q \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x8fz \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xbf* \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x9c~ \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xd8@ \x03(\tR\x03ips\x12U\n" +
	"\x06labels\x18\xc4: \x03(\v2<.clouditor.ontology.v1.MultiModalDatabaseService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xddi \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x14\n" +
	"\x05ports\x18\x05 \x03(\rR\x05ports\x12\x12\n" +
	"\x03raw\x18\xa9\x88\x01 \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xa44 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12W\n" +
	"\x12anomaly_detections\x18\xa88 \x03(\v2'.clouditor.ontology.v1.AnomalyDetectionR\x11anomalyDetections\x12H\n" +
	"\fauthenticity\x18\xa9c \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12$\n" +
	"\n" +
	"compute_id\x18\xbf\x8d\x01 \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xfd  \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\xcaE \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12;\n" +
	"\bloggings\x18\xd0{ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12X\n" +
	"\x12malware_protection\x18\x97k \x01(\v2(.clouditor.ontology.v1.MalwareProtectionR\x11malwareProtection\x12F\n" +
	"\fredundancies\x18\xbcF \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xb8\" \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xb9j \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\x92= \x03(\tR\n" +
	"storageIds\x12^\n" +
	"\x14transport_encryption\x18\x9b\x1e \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xcaR \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x80\x01\x82\xa6\x1d\x19MultiModalDatabaseService\x82\xa6\x1d\x0fDatabaseService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xc7\a\n" +
	"\x10NetworkInterface\x12@\n" +
	"\rcreation_time\x18\xf9* \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x85U \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\xbd\x8c\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xa2p \x01(\bR\x1ainternetAccessibleEndpoint\x12L\n" +
	"\x06labels\x18\xf1$ \x03(\v23.clouditor.ontology.v1.NetworkInterface.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf4` \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xb8( \x01(\tR\x03raw\x12X\n" +
	"\x12access_restriction\x18\xfeu \x01(\v2(.clouditor.ontology.v1.AccessRestrictionR\x11accessRestriction\x12F\n" +
	"\fgeo_location\x18\xb0A \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xd8\" \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x123\n" +
	"\x12network_service_id\x18ބ\x01 \x01(\tH\x00R\x10networkServiceId\x88\x01\x01\x12F\n" +
	"\fredundancies\x18\xc4k \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x8cX \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xdf\x1d \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:@\x82\xa6\x1d\x10NetworkInterface\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x15\n" +
	"\x13_network_service_idB\f\n" +
	"\n" +
	"_parent_id\"\xac\x06\n" +
	"\x14NetworkSecurityGroup\x12@\n" +
	"\rcreation_time\x18\xc88 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xc4\x1b \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf3Z \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xc5u \x01(\bR\x1ainternetAccessibleEndpoint\x12P\n" +
	"\x06labels\x18\x91. \x03(\v27.clouditor.ontology.v1.NetworkSecurityGroup.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xb0Y \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xa2W \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\x8b5 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xf8< \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xd0j \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xa3q \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xfc/ \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:D\x82\xa6\x1d\x14NetworkSecurityGroup\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xe5\t\n" +
	"\x0eNetworkService\x12T\n" +
	"\x10function_service\x18\xc1& \x01(\v2&.clouditor.ontology.v1.FunctionServiceH\x00R\x0ffunctionService\x12g\n" +
	"\x17generic_network_service\x18\xe6\n" +
	" \x01(\v2,.clouditor.ontology.v1.GenericNetworkServiceH\x00R\x15genericNetworkService\x12K\n" +
	"\rload_balancer\x18\xe9  \x01(\v2#.clouditor.ontology.v1.LoadBalancerH\x00R\floadBalancer\x12Q\n" +
	"\x0flogging_service\x18\xb3n \x01(\v2%.clouditor.ontology.v1.LoggingServiceH\x00R\x0eloggingService\x12k\n" +
	"\x18machine_learning_service\x18Ƅ\x01 \x01(\v2-.clouditor.ontology.v1.MachineLearningServiceH\x00R\x16machineLearningService\x12m\n" +
	"\x19security_advisory_service\x18\xad\x01 \x01(\v2..clouditor.ontology.v1.SecurityAdvisoryServiceH\x00R\x17securityAdvisoryService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseService\x12_\n" +
	"\x14file_storage_service\x18\xae\x83\x01 \x01(\v2).clouditor.ontology.v1.FileStorageServiceH\x00R\x12fileStorageService\x12d\n" +
	"\x16object_storage_service\x18\xbb2 \x01(\v2+.clouditor.ontology.v1.ObjectStorageServiceH\x00R\x14objectStorageServiceB\x06\n" +
	"\x04type\"\xd0\f\n" +
	"\n" +
	"Networking\x12W\n" +
	"\x11network_interface\x18\x83M \x01(\v2'.clouditor.ontology.v1.NetworkInterfaceH\x00R\x10networkInterface\x12d\n" +
	"\x16network_security_group\x18\xe7b \x01(\v2+.clouditor.ontology.v1.NetworkSecurityGroupH\x00R\x14networkSecurityGroup\x12T\n" +
	"\x10function_service\x18\xc1& \x01(\v2&.clouditor.ontology.v1.FunctionServiceH\x00R\x0ffunctionService\x12g\n" +
	"\x17generic_network_service\x18\xe6\n" +
	" \x01(\v2,.clouditor.ontology.v1.GenericNetworkServiceH\x00R\x15genericNetworkService\x12K\n" +
	"\rload_balancer\x18\xe9  \x01(\v2#.clouditor.ontology.v1.LoadBalancerH\x00R\floadBalancer\x12Q\n" +
	"\x0flogging_service\x18\xb3n \x01(\v2%.clouditor.ontology.v1.LoggingServiceH\x00R\x0eloggingService\x12k\n" +
	"\x18machine_learning_service\x18Ƅ\x01 \x01(\v2-.clouditor.ontology.v1.MachineLearningServiceH\x00R\x16machineLearningService\x12m\n" +
	"\x19security_advisory_service\x18\xad\x01 \x01(\v2..clouditor.ontology.v1.SecurityAdvisoryServiceH\x00R\x17securityAdvisoryService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseService\x12_\n" +
	"\x14file_storage_service\x18\xae\x83\x01 \x01(\v2).clouditor.ontology.v1.FileStorageServiceH\x00R\x12fileStorageService\x12d\n" +
	"\x16object_storage_service\x18\xbb2 \x01(\v2+.clouditor.ontology.v1.ObjectStorageServiceH\x00R\x14objectStorageService\x12Q\n" +
	"\x0fvirtual_network\x18\xff\x13 \x01(\v2%.clouditor.ontology.v1.VirtualNetworkH\x00R\x0evirtualNetwork\x12[\n" +
	"\x13virtual_sub_network\x18\xb2X \x01(\v2(.clouditor.ontology.v1.VirtualSubNetworkH\x00R\x11virtualSubNetworkB\x06\n" +
	"\x04type\"z\n" +
	"\x10NoAuthentication\x12-\n" +
	"\x12context_is_checked\x18\xf7] \x01(\bR\x10contextIsChecked:7\x82\xa6\x1d\x10NoAuthentication\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\x9f\x02\n" +
	"\tOSLogging\x12\x19\n" +
	"\aenabled\x18\xcf\x01 \x01(\bR\aenabled\x12>\n" +
	"\x1bmonitoring_log_data_enabled\x18\x92a \x01(\bR\x18monitoringLogDataEnabled\x12E\n" +
	"\x10retention_period\x18\xdeX \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x127\n" +
	"\x17security_alerts_enabled\x18\x9d: \x01(\bR\x15securityAlertsEnabled:7\x82\xa6\x1d\tOSLogging\x82\xa6\x1d\aLogging\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xa6\x01\n" +
	"\x16OTPBasedAuthentication\x12\x1d\n" +
	"\tactivated\x18\xa0: \x01(\bR\tactivated\x12.\n" +
	"\x12context_is_checked\x18\xe1\x93\x01 \x01(\bR\x10contextIsChecked:=\x82\xa6\x1d\x16OTPBasedAuthentication\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\xbf\t\n" +
	"\rObjectStorage\x12@\n" +
	"\rcreation_time\x18\xbd\x1a \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xdc: \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xbb  \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12B\n" +
	"\x1cinternet_accessible_endpoint\x18\xa5\x8d\x01 \x01(\bR\x1ainternetAccessibleEndpoint\x12I\n" +
	"\x06labels\x18\xd4y \x03(\v20.clouditor.ontology.v1.ObjectStorage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xd1e \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12$\n" +
	"\rpublic_access\x18\x8d$ \x01(\bR\fpublicAccess\x12\x11\n" +
	"\x03raw\x18\xe83 \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xbbG \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12V\n" +
	"\x12at_rest_encryption\x18\xf2\x0f \x01(\v2'.clouditor.ontology.v1.AtRestEncryptionR\x10atRestEncryption\x128\n" +
	"\abackups\x18\x86O \x03(\v2\x1d.clouditor.ontology.v1.BackupR\abackups\x12F\n" +
	"\fgeo_location\x18\x83E \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12H\n" +
	"\fimmutability\x18\xa8j \x01(\v2#.clouditor.ontology.v1.ImmutabilityR\fimmutability\x12;\n" +
	"\bloggings\x18\xb3\" \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xed\x19 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xff\f \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xa3\x1c \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\xf2D \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01::\x82\xa6\x1d\rObjectStorage\x82\xa6\x1d\aStorage\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xdc\x01\n" +
	"\x14ObjectStorageRequest\x12\x17\n" +
	"\x06source\x18\xb2\x01 \x01(\tR\x06source\x12D\n" +
	"\vcode_region\x18ю\x01 \x01(\v2!.clouditor.ontology.v1.CodeRegionR\n" +
	"codeRegion\x12-\n" +
	"\x12object_storage_ids\x18\xbc\x12 \x03(\tR\x10objectStorageIds:6\x82\xa6\x1d\x14ObjectStorageRequest\x82\xa6\x1d\tOperation\x82\xa6\x1d\rFunctionality\"\x87\v\n" +
	"\x14ObjectStorageService\x12@\n" +
	"\rcreation_time\x18\x93\\ \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xbcW \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\xfb\x91\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x9c\x7f \x01(\bR\x1ainternetAccessibleEndpoint\x12\x12\n" +
	"\x03ips\x18\x90\x86\x01 \x03(\tR\x03ips\x12Q\n" +
	"\x06labels\x18\xe4\x8a\x01 \x03(\v27.clouditor.ontology.v1.ObjectStorageService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xd5\n" +
	" \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xe6? \x03(\rR\x05ports\x12\x12\n" +
	"\x03raw\x18\x8b\x82\x01 \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xb53 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12H\n" +
	"\fauthenticity\x18\xc45 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xd2# \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12G\n" +
	"\fgeo_location\x18\x8f\x93\x01 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\xf41 \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12<\n" +
	"\bloggings\x18\xfb\x8e\x01 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xdd[ \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x96\t \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xdfH \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\xad@ \x03(\tR\n" +
	"storageIds\x12^\n" +
	"\x14transport_encryption\x18\xde9 \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xb5m \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:h\x82\xa6\x1d\x14ObjectStorageService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\x9f\x05\n" +
	"\tOperation\x12D\n" +
	"\n" +
	"decryption\x18\x8eX \x01(\v2!.clouditor.ontology.v1.DecryptionH\x00R\n" +
	"decryption\x12D\n" +
	"\n" +
	"encryption\x18\x9b\x15 \x01(\v2!.clouditor.ontology.v1.EncryptionH\x00R\n" +
	"encryption\x12Z\n" +
	"\x12cryptographic_hash\x18\xad< \x01(\v2(.clouditor.ontology.v1.CryptographicHashH\x00R\x11cryptographicHash\x12T\n" +
	"\x10database_connect\x18\xaeT \x01(\v2&.clouditor.ontology.v1.DatabaseConnectH\x00R\x0fdatabaseConnect\x12N\n" +
	"\x0edatabase_query\x18\x92< \x01(\v2$.clouditor.ontology.v1.DatabaseQueryH\x00R\rdatabaseQuery\x12H\n" +
	"\fhttp_request\x18\xd5\x16 \x01(\v2\".clouditor.ontology.v1.HttpRequestH\x00R\vhttpRequest\x12K\n" +
	"\rlog_operation\x18\xaao \x01(\v2#.clouditor.ontology.v1.LogOperationH\x00R\flogOperation\x12e\n" +
	"\x16object_storage_request\x18\xf7\x83\x01 \x01(\v2+.clouditor.ontology.v1.ObjectStorageRequestH\x00R\x14objectStorageRequestB\x06\n" +
	"\x04type\"\xaf\x01\n" +
	"\x1bPasswordBasedAuthentication\x12\x1d\n" +
	"\tactivated\x18\x96\\ \x01(\bR\tactivated\x12-\n" +
	"\x12context_is_checked\x18\xd2\n" +
	" \x01(\bR\x10contextIsChecked:B\x82\xa6\x1d\x1bPasswordBasedAuthentication\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\x8d\x06\n" +
	"\x0ePasswordPolicy\x12@\n" +
	"\rcreation_time\x18\x9a\f \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\"\n" +
	"\vdescription\x18\x95\x82\x01 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xed\x0f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xa5t \x01(\bR\x1ainternetAccessibleEndpoint\x12J\n" +
	"\x06labels\x18\xcc\x05 \x03(\v21.clouditor.ontology.v1.PasswordPolicy.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x86F \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x98P \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xb6\" \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\x9cA \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xfd\x19 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xcd\x13 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x84t \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:0\x82\xa6\x1d\x0ePasswordPolicy\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xf5\x06\n" +
	"\x0ePolicyDocument\x12@\n" +
	"\rcreation_time\x18\xe1B \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x8f\v \x01(\tR\vdescription\x12\x1b\n" +
	"\bfiletype\x18\xbe\\ \x01(\tR\bfiletype\x12\x17\n" +
	"\x02id\x18\x963 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12J\n" +
	"\x06labels\x18\xad, \x03(\v21.clouditor.ontology.v1.PolicyDocument.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x84\x10 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xae' \x01(\tR\x03raw\x12I\n" +
	"\rdata_location\x18\xd4A \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12X\n" +
	"\x12document_checksums\x18\xb8\x91\x01 \x03(\v2'.clouditor.ontology.v1.DocumentChecksumR\x11documentChecksums\x12Z\n" +
	"\x13document_signatures\x18\x8a] \x03(\v2(.clouditor.ontology.v1.DocumentSignatureR\x12documentSignatures\x12!\n" +
	"\tparent_id\x18\x8eI \x01(\tH\x00R\bparentId\x88\x01\x01\x12U\n" +
	"\x11schema_validation\x18\xae{ \x01(\v2'.clouditor.ontology.v1.SchemaValidationR\x10schemaValidation\x12T\n" +
	"\x11security_features\x18\xb0u \x03(\v2&.clouditor.ontology.v1.SecurityFeatureR\x10securityFeatures\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:2\x82\xa6\x1d\x0ePolicyDocument\x82\xa6\x1d\bDocument\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x86\x01\n" +
	"\x04RBAC\x12,\n" +
	"\x11broad_assignments\x18\xae, \x01(\x02R\x10broadAssignments\x12\"\n" +
	"\fmixed_duties\x18\xeep \x01(\x02R\vmixedDuties:,\x82\xa6\x1d\x04RBAC\x82\xa6\x1d\rAuthorization\x82\xa6\x1d\x0fSecurityFeature\"\x8d\x02\n" +
	"\n" +
	"Redundancy\x12N\n" +
	"\x0egeo_redundancy\x18\x84\x13 \x01(\v2$.clouditor.ontology.v1.GeoRedundancyH\x00R\rgeoRedundancy\x12T\n" +
	"\x10local_redundancy\x18\xe9\x13 \x01(\v2&.clouditor.ontology.v1.LocalRedundancyH\x00R\x0flocalRedundancy\x12Q\n" +
	"\x0fzone_redundancy\x18\x89W \x01(\v2%.clouditor.ontology.v1.ZoneRedundancyH\x00R\x0ezoneRedundancyB\x06\n" +
	"\x04type\"\xd7\f\n" +
	"\x19RelationalDatabaseService\x12@\n" +
	"\rcreation_time\x18\x9fT \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xe8c \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xdbf \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xdab \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xd3l \x03(\tR\x03ips\x12U\n" +
	"\x06labels\x18\xc5( \x03(\v2<.clouditor.ontology.v1.RelationalDatabaseService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xd6S \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\x9d\x02 \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xb4\x02 \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\x81= \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12W\n" +
	"\x12anomaly_detections\x18\xdce \x03(\v2'.clouditor.ontology.v1.AnomalyDetectionR\x11anomalyDetections\x12G\n" +
	"\fauthenticity\x18\x06 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12$\n" +
	"\n" +
	"compute_id\x18\xa9\x92\x01 \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\xb8\x15 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12I\n" +
	"\rhttp_endpoint\x18\x84. \x01(\v2#.clouditor.ontology.v1.HttpEndpointR\fhttpEndpoint\x12;\n" +
	"\bloggings\x18\xefA \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12X\n" +
	"\x12malware_protection\x18\xc9_ \x01(\v2(.clouditor.ontology.v1.MalwareProtectionR\x11malwareProtection\x12F\n" +
	"\fredundancies\x18\xf6u \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xf2# \x01(\tH\x01R\bparentId\x88\x01\x01\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xfd> \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12 \n" +
	"\vstorage_ids\x18\x93! \x03(\tR\n" +
	"storageIds\x12^\n" +
	"\x14transport_encryption\x18\x91Y \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\xe7K \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x80\x01\x82\xa6\x1d\x19RelationalDatabaseService\x82\xa6\x1d\x0fDatabaseService\x82\xa6\x1d\x0eStorageService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xca\x01\n" +
	"\vReliability\x12]\n" +
	"\x13explainable_results\x18\xc90 \x01(\v2).clouditor.ontology.v1.ExplainableResultsH\x00R\x12explainableResults\x12T\n" +
	"\x10robustness_score\x18\xbce \x01(\v2&.clouditor.ontology.v1.RobustnessScoreH\x00R\x0frobustnessScoreB\x06\n" +
	"\x04type\"\xcf\x01\n" +
	"\x11RemoteAttestation\x12@\n" +
	"\rcreation_time\x18\xcd: \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12\x19\n" +
	"\aenabled\x18\xd6\t \x01(\bR\aenabled\x12\x17\n" +
	"\x06status\x18\xfdH \x01(\bR\x06status:D\x82\xa6\x1d\x11RemoteAttestation\x82\xa6\x1d\vAttestation\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\xc0\x02\n" +
	"\x12RemoteDataLocation\x12\x13\n" +
	"\x04path\x18\xeb' \x01(\tR\x04path\x12H\n" +
	"\fauthenticity\x18\xaf\x10 \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"storage_id\x18\xc1v \x01(\tH\x00R\tstorageId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\xe1\x1b \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption:7\x82\xa6\x1d\x12RemoteDataLocation\x82\xa6\x1d\fDataLocation\x82\xa6\x1d\rFunctionalityB\r\n" +
	"\v_storage_id\"\x97#\n" +
	"\bResource\x12;\n" +
	"\aaccount\x18\xc0Y \x01(\v2\x1e.clouditor.ontology.v1.AccountH\x00R\aaccount\x12/\n" +
	"\x03job\x18\x9f\x1f \x01(\v2\x1a.clouditor.ontology.v1.JobH\x00R\x03job\x12>\n" +
	"\bworkflow\x18\xaaD \x01(\v2\x1f.clouditor.ontology.v1.WorkflowH\x00R\bworkflow\x12Q\n" +
	"\x0fcode_repository\x18\xe7\x1a \x01(\v2%.clouditor.ontology.v1.CodeRepositoryH\x00R\x0ecodeRepository\x12A\n" +
	"\tcontainer\x18\xfb\f \x01(\v2 .clouditor.ontology.v1.ContainerH\x00R\tcontainer\x12>\n" +
	"\bfunction\x18\xdft \x01(\v2\x1f.clouditor.ontology.v1.FunctionH\x00R\bfunction\x12R\n" +
	"\x0fvirtual_machine\x18\xb8\x8f\x01 \x01(\v2%.clouditor.ontology.v1.VirtualMachineH\x00R\x0evirtualMachine\x12i\n" +
	"\x17container_orchestration\x18\x8b\x19 \x01(\v2-.clouditor.ontology.v1.ContainerOrchestrationH\x00R\x16containerOrchestration\x12Z\n" +
	"\x12container_registry\x18\x86A \x01(\v2(.clouditor.ontology.v1.ContainerRegistryH\x00R\x11containerRegistry\x12G\n" +
	"\vcertificate\x18\xdeB \x01(\v2\".clouditor.ontology.v1.CertificateH\x00R\vcertificate\x12/\n" +
	"\x03key\x18\x82( \x01(\v2\x1a.clouditor.ontology.v1.KeyH\x00R\x03key\x128\n" +
	"\x06secret\x18\xff} \x01(\v2\x1d.clouditor.ontology.v1.SecretH\x00R\x06secret\x12>\n" +
	"\bidentity\x18\xe5r \x01(\v2\x1f.clouditor.ontology.v1.IdentityH\x00R\bidentity\x12Q\n" +
	"\x0frole_assignment\x18\xb9\x12 \x01(\v2%.clouditor.ontology.v1.RoleAssignmentH\x00R\x0eroleAssignment\x12R\n" +
	"\x0fcontainer_image\x18ȋ\x01 \x01(\v2%.clouditor.ontology.v1.ContainerImageH\x00R\x0econtainerImage\x12=\n" +
	"\bvm_image\x18\xa1\x80\x01 \x01(\v2\x1e.clouditor.ontology.v1.VMImageH\x00R\avmImage\x12s\n" +
	"\x1bdevice_provisioning_service\x18\xe4q \x01(\v20.clouditor.ontology.v1.DeviceProvisioningServiceH\x00R\x19deviceProvisioningService\x12K\n" +
	"\rmessaging_hub\x18\x93d \x01(\v2#.clouditor.ontology.v1.MessagingHubH\x00R\fmessagingHub\x12@\n" +
	"\tkey_vault\x18Ñ\x01 \x01(\v2\x1f.clouditor.ontology.v1.KeyVaultH\x00R\bkeyVault\x12W\n" +
	"\x11network_interface\x18\x83M \x01(\v2'.clouditor.ontology.v1.NetworkInterfaceH\x00R\x10networkInterface\x12d\n" +
	"\x16network_security_group\x18\xe7b \x01(\v2+.clouditor.ontology.v1.NetworkSecurityGroupH\x00R\x14networkSecurityGroup\x12T\n" +
	"\x10function_service\x18\xc1& \x01(\v2&.clouditor.ontology.v1.FunctionServiceH\x00R\x0ffunctionService\x12g\n" +
	"\x17generic_network_service\x18\xe6\n" +
	" \x01(\v2,.clouditor.ontology.v1.GenericNetworkServiceH\x00R\x15genericNetworkService\x12K\n" +
	"\rload_balancer\x18\xe9  \x01(\v2#.clouditor.ontology.v1.LoadBalancerH\x00R\floadBalancer\x12Q\n" +
	"\x0flogging_service\x18\xb3n \x01(\v2%.clouditor.ontology.v1.LoggingServiceH\x00R\x0eloggingService\x12k\n" +
	"\x18machine_learning_service\x18Ƅ\x01 \x01(\v2-.clouditor.ontology.v1.MachineLearningServiceH\x00R\x16machineLearningService\x12m\n" +
	"\x19security_advisory_service\x18\xad\x01 \x01(\v2..clouditor.ontology.v1.SecurityAdvisoryServiceH\x00R\x17securityAdvisoryService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseService\x12_\n" +
	"\x14file_storage_service\x18\xae\x83\x01 \x01(\v2).clouditor.ontology.v1.FileStorageServiceH\x00R\x12fileStorageService\x12d\n" +
	"\x16object_storage_service\x18\xbb2 \x01(\v2+.clouditor.ontology.v1.ObjectStorageServiceH\x00R\x14objectStorageService\x12Q\n" +
	"\x0fvirtual_network\x18\xff\x13 \x01(\v2%.clouditor.ontology.v1.VirtualNetworkH\x00R\x0evirtualNetwork\x12[\n" +
	"\x13virtual_sub_network\x18\xb2X \x01(\v2(.clouditor.ontology.v1.VirtualSubNetworkH\x00R\x11virtualSubNetwork\x12Q\n" +
	"\x0fpassword_policy\x18\xca\a \x01(\v2%.clouditor.ontology.v1.PasswordPolicyH\x00R\x0epasswordPolicy\x12N\n" +
	"\x0eresource_group\x18\xee\x03 \x01(\v2$.clouditor.ontology.v1.ResourceGroupH\x00R\rresourceGroup\x12K\n" +
	"\rblock_storage\x18\x8dP \x01(\v2#.clouditor.ontology.v1.BlockStorageH\x00R\fblockStorage\x12T\n" +
	"\x10database_storage\x18\x8b` \x01(\v2&.clouditor.ontology.v1.DatabaseStorageH\x00R\x0fdatabaseStorage\x12H\n" +
	"\ffile_storage\x18\xb0\x15 \x01(\v2\".clouditor.ontology.v1.FileStorageH\x00R\vfileStorage\x12N\n" +
	"\x0eobject_storage\x18\xf6T \x01(\v2$.clouditor.ontology.v1.ObjectStorageH\x00R\robjectStorage\x12T\n" +
	"\x10generic_document\x18\x80' \x01(\v2&.clouditor.ontology.v1.GenericDocumentH\x00R\x0fgenericDocument\x12Q\n" +
	"\x0fpolicy_document\x18\xe9t \x01(\v2%.clouditor.ontology.v1.PolicyDocumentH\x00R\x0epolicyDocument\x12p\n" +
	"\x1asecurity_advisory_document\x18\xfdr \x01(\v2/.clouditor.ontology.v1.SecurityAdvisoryDocumentH\x00R\x18securityAdvisoryDocument\x12m\n" +
	"\x19service_metadata_document\x18\x90\x02 \x01(\v2..clouditor.ontology.v1.ServiceMetadataDocumentH\x00R\x17serviceMetadataDocument\x12j\n" +
	"\x18machine_learning_dataset\x18\xf8\x0f \x01(\v2-.clouditor.ontology.v1.MachineLearningDatasetH\x00R\x16machineLearningDataset\x12d\n" +
	"\x16machine_learning_model\x18\xa1x \x01(\v2+.clouditor.ontology.v1.MachineLearningModelH\x00R\x14machineLearningModel\x12Z\n" +
	"\x12awareness_training\x18\xe3i \x01(\v2(.clouditor.ontology.v1.AwarenessTrainingH\x00R\x11awarenessTraining\x12W\n" +
	"\x11security_training\x18\xbd' \x01(\v2'.clouditor.ontology.v1.SecurityTrainingH\x00R\x10securityTraining\x12H\n" +
	"\vapplication\x18\xfa\x90\x01 \x01(\v2\".clouditor.ontology.v1.ApplicationH\x00R\vapplication\x12;\n" +
	"\alibrary\x18\xb9o \x01(\v2\x1e.clouditor.ontology.v1.LibraryH\x00R\alibrary\x12R\n" +
	"\x10source_code_file\x18\xf4\x15 \x01(\v2%.clouditor.ontology.v1.SourceCodeFileH\x00R\x0esourceCodeFileB\x06\n" +
	"\x04type\"\x8d\x06\n" +
	"\rResourceGroup\x12A\n" +
	"\rcreation_time\x18ԃ\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xcb^ \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xd0W \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xe5s \x01(\bR\x1ainternetAccessibleEndpoint\x12J\n" +
	"\x06labels\x18\xed\x88\x01 \x03(\v20.clouditor.ontology.v1.ResourceGroup.LabelsEntryR\x06labels\x12\x1c\n" +
	"\x04name\x18\x86\x94\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x12\n" +
	"\x03raw\x18\x87\x84\x01 \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\x85\x06 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xb5~ \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xf2\v \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xcdn \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x84\x14 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:/\x82\xa6\x1d\rResourceGroup\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xab\x02\n" +
	"\x0fResourceLogging\x12\x19\n" +
	"\aenabled\x18\xe5\v \x01(\bR\aenabled\x12>\n" +
	"\x1bmonitoring_log_data_enabled\x18\x945 \x01(\bR\x18monitoringLogDataEnabled\x12E\n" +
	"\x10retention_period\x18\xf84 \x01(\v2\x19.google.protobuf.DurationR\x0fretentionPeriod\x127\n" +
	"\x17security_alerts_enabled\x18\xd3/ \x01(\bR\x15securityAlertsEnabled:=\x82\xa6\x1d\x0fResourceLogging\x82\xa6\x1d\aLogging\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"(\n" +
	"\fResourceType:\x18\x82\xa6\x1d\fResourceType\x82\xa6\x1d\x04Core\"H\n" +
	"\x0fRobustnessScore:5\x82\xa6\x1d\x0fRobustnessScore\x82\xa6\x1d\vReliability\x82\xa6\x1d\x0fSecurityFeature\"\xd5\a\n" +
	"\x0eRoleAssignment\x12\x1d\n" +
	"\tactivated\x18\xf0W \x01(\bR\tactivated\x12@\n" +
	"\rcreation_time\x18\x99m \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x80F \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xa61 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12B\n" +
	"\x1cinternet_accessible_endpoint\x18\x95\x83\x01 \x01(\bR\x1ainternetAccessibleEndpoint\x12K\n" +
	"\x06labels\x18\xaa\x8f\x01 \x03(\v21.clouditor.ontology.v1.RoleAssignment.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x93\x17 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xeeT \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\xacW \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12K\n" +
	"\rauthorization\x18\xe4k \x01(\v2$.clouditor.ontology.v1.AuthorizationR\rauthorization\x12F\n" +
	"\fgeo_location\x18\x8e` \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12<\n" +
	"\bloggings\x18\x9d\x88\x01 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xd0h \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x89\x12 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xf8\x15 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:@\x82\xa6\x1d\x0eRoleAssignment\x82\xa6\x1d\fIdentifiable\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xa9\x01\n" +
	"\x10SchemaValidation\x12\x17\n" +
	"\x06format\x18\x86\r \x01(\tR\x06format\x12\x1e\n" +
	"\n" +
	"schema_url\x18\xaeh \x01(\tR\tschemaUrl\x125\n" +
	"\x06errors\x18\xafE \x03(\v2\x1c.clouditor.ontology.v1.ErrorR\x06errors:%\x82\xa6\x1d\x10SchemaValidation\x82\xa6\x1d\rFunctionality\"\x92\b\n" +
	"\x06Secret\x12A\n" +
	"\rcreation_time\x18\xe5\x88\x01 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x9bY \x01(\tR\vdescription\x12\x19\n" +
	"\aenabled\x18\xbd* \x01(\bR\aenabled\x12D\n" +
	"\x0fexpiration_date\x18\xb6\x12 \x01(\v2\x1a.google.protobuf.TimestampR\x0eexpirationDate\x12\x17\n" +
	"\x02id\x18\xcfi \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xb2\x17 \x01(\bR\x1ainternetAccessibleEndpoint\x12\x1e\n" +
	"\n" +
	"is_managed\x18\xbb\x1e \x01(\bR\tisManaged\x12B\n" +
	"\x06labels\x18\x8c\r \x03(\v2).clouditor.ontology.v1.Secret.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xc4\a \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12C\n" +
	"\x0fnot_before_date\x18\x97h \x01(\v2\x1a.google.protobuf.TimestampR\rnotBeforeDate\x12\x11\n" +
	"\x03raw\x18\xee. \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xe7\x14 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x121\n" +
	"\x11infrastructure_id\x18\xc2\a \x01(\tH\x00R\x10infrastructureId\x88\x01\x01\x12;\n" +
	"\bloggings\x18\x9be \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xe5o \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x87i \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x95R \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:6\x82\xa6\x1d\x06Secret\x82\xa6\x1d\n" +
	"Credential\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x14\n" +
	"\x12_infrastructure_idB\f\n" +
	"\n" +
	"_parent_id\"\xe6\a\n" +
	"\x18SecurityAdvisoryDocument\x12@\n" +
	"\rcreation_time\x18\xc8U \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x8f\x1c \x01(\tR\vdescription\x12\x1c\n" +
	"\bfiletype\x18\xf2\x86\x01 \x01(\tR\bfiletype\x12\x17\n" +
	"\x02id\x18\xbc{ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12U\n" +
	"\x06labels\x18Ђ\x01 \x03(\v2;.clouditor.ontology.v1.SecurityAdvisoryDocument.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xb9v \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xd8\x1b \x01(\tR\x03raw\x12I\n" +
	"\rdata_location\x18\xf4\\ \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12W\n" +
	"\x12document_checksums\x18\xe9e \x03(\v2'.clouditor.ontology.v1.DocumentChecksumR\x11documentChecksums\x12Z\n" +
	"\x13document_signatures\x18\xb3\x7f \x03(\v2(.clouditor.ontology.v1.DocumentSignatureR\x12documentSignatures\x12!\n" +
	"\tparent_id\x18\x87\x02 \x01(\tH\x00R\bparentId\x88\x01\x01\x12V\n" +
	"\x11schema_validation\x18\x95\x91\x01 \x01(\v2'.clouditor.ontology.v1.SchemaValidationR\x10schemaValidation\x12T\n" +
	"\x11security_features\x18\xf7\x12 \x03(\v2&.clouditor.ontology.v1.SecurityFeatureR\x10securityFeatures\x12O\n" +
	"\x0fvulnerabilities\x18\xab\" \x03(\v2$.clouditor.ontology.v1.VulnerabilityR\x0fvulnerabilities\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:<\x82\xa6\x1d\x18SecurityAdvisoryDocument\x82\xa6\x1d\bDocument\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x87\x01\n" +
	"\x14SecurityAdvisoryFeed\x12D\n" +
	"\x1esecurity_advisory_document_ids\x18\xbd\t \x03(\tR\x1bsecurityAdvisoryDocumentIds:)\x82\xa6\x1d\x14SecurityAdvisoryFeed\x82\xa6\x1d\rFunctionality\"\xba\n" +
	"\n" +
	"\x17SecurityAdvisoryService\x12@\n" +
	"\rcreation_time\x18\xd1\x17 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x90\x12 \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18\xfb\x91\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xae& \x01(\bR\x1ainternetAccessibleEndpoint\x12\x11\n" +
	"\x03ips\x18\xe5\x14 \x03(\tR\x03ips\x12S\n" +
	"\x06labels\x18\xc5\x06 \x03(\v2:.clouditor.ontology.v1.SecurityAdvisoryService.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xb6\x10 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x15\n" +
	"\x05ports\x18\xcb# \x03(\rR\x05ports\x12\x11\n" +
	"\x03raw\x18\xe3Q \x01(\tR\x03raw\x12H\n" +
	"\fauthenticity\x18\x8ci \x01(\v2#.clouditor.ontology.v1.AuthenticityR\fauthenticity\x12#\n" +
	"\n" +
	"compute_id\x18\xee; \x01(\tH\x00R\tcomputeId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\x88} \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12\x19\n" +
	"\akey_ids\x18\xb0\x80\x01 \x03(\tR\x06keyIds\x12;\n" +
	"\bloggings\x18\xde\x15 \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12G\n" +
	"\fredundancies\x18ь\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xd0\x04 \x01(\tH\x01R\bparentId\x88\x01\x01\x12d\n" +
	"\x17security_advisory_feeds\x18\xa8^ \x03(\v2+.clouditor.ontology.v1.SecurityAdvisoryFeedR\x15securityAdvisoryFeeds\x12E\n" +
	"\x1cservice_metadata_document_id\x18\xdeI \x01(\tH\x02R\x19serviceMetadataDocumentId\x88\x01\x01\x12^\n" +
	"\x14transport_encryption\x18\xedV \x01(\v2*.clouditor.ontology.v1.TransportEncryptionR\x13transportEncryption\x12R\n" +
	"\x10usage_statistics\x18\x9d\x1c \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:Y\x82\xa6\x1d\x17SecurityAdvisoryService\x82\xa6\x1d\x0eNetworkService\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\r\n" +
	"\v_compute_idB\f\n" +
	"\n" +
	"_parent_idB\x1f\n" +
	"\x1d_service_metadata_document_id\"\xf5\x19\n" +
	"\x0fSecurityFeature\x12W\n" +
	"\x11anomaly_detection\x18\xf8$ \x01(\v2'.clouditor.ontology.v1.AnomalyDetectionH\x00R\x10anomalyDetection\x12T\n" +
	"\x10activity_logging\x18\x8c\x17 \x01(\v2&.clouditor.ontology.v1.ActivityLoggingH\x00R\x0factivityLogging\x12]\n" +
	"\x13application_logging\x18\xf7c \x01(\v2).clouditor.ontology.v1.ApplicationLoggingH\x00R\x12applicationLogging\x12I\n" +
	"\fboot_logging\x18\x87\x90\x01 \x01(\v2\".clouditor.ontology.v1.BootLoggingH\x00R\vbootLogging\x12B\n" +
	"\n" +
	"os_logging\x18\xee\x16 \x01(\v2 .clouditor.ontology.v1.OSLoggingH\x00R\tosLogging\x12U\n" +
	"\x10resource_logging\x18\x9b\x89\x01 \x01(\v2&.clouditor.ontology.v1.ResourceLoggingH\x00R\x0fresourceLogging\x12Z\n" +
	"\x12malware_protection\x18\xe18 \x01(\v2(.clouditor.ontology.v1.MalwareProtectionH\x00R\x11malwareProtection\x12T\n" +
	"\x10usage_statistics\x18\x8aw \x01(\v2&.clouditor.ontology.v1.UsageStatisticsH\x00R\x0fusageStatistics\x12\x82\x01\n" +
	" certificate_based_authentication\x18\xb0\x04 \x01(\v25.clouditor.ontology.v1.CertificateBasedAuthenticationH\x00R\x1ecertificateBasedAuthentication\x12p\n" +
	"\x1atoken_based_authentication\x18\xe4\x1c \x01(\v2/.clouditor.ontology.v1.TokenBasedAuthenticationH\x00R\x18tokenBasedAuthentication\x12p\n" +
	"\x1amulti_factor_authentiation\x18\xb0f \x01(\v2/.clouditor.ontology.v1.MultiFactorAuthentiationH\x00R\x18multiFactorAuthentiation\x12X\n" +
	"\x11no_authentication\x18\xb6\x8a\x01 \x01(\v2'.clouditor.ontology.v1.NoAuthenticationH\x00R\x10noAuthentication\x12k\n" +
	"\x18otp_based_authentication\x18\xb7\x92\x01 \x01(\v2-.clouditor.ontology.v1.OTPBasedAuthenticationH\x00R\x16otpBasedAuthentication\x12z\n" +
	"\x1dpassword_based_authentication\x18\xad\x84\x01 \x01(\v22.clouditor.ontology.v1.PasswordBasedAuthenticationH\x00R\x1bpasswordBasedAuthentication\x12L\n" +
	"\x0esingle_sign_on\x18\xc1H \x01(\v2#.clouditor.ontology.v1.SingleSignOnH\x00R\fsingleSignOn\x122\n" +
	"\x04abac\x18\xe6r \x01(\v2\x1b.clouditor.ontology.v1.ABACH\x00R\x04abac\x12E\n" +
	"\vl3_firewall\x18\xa5G \x01(\v2!.clouditor.ontology.v1.L3FirewallH\x00R\n" +
	"l3Firewall\x12j\n" +
	"\x18web_application_firewall\x18\x9d- \x01(\v2-.clouditor.ontology.v1.WebApplicationFirewallH\x00R\x16webApplicationFirewall\x123\n" +
	"\x04rbac\x18ߒ\x01 \x01(\v2\x1b.clouditor.ontology.v1.RBACH\x00R\x04rbac\x129\n" +
	"\x06backup\x18\x9d\x80\x01 \x01(\v2\x1d.clouditor.ontology.v1.BackupH\x00R\x06backup\x12T\n" +
	"\x11d_do_s_protection\x18Â\x01 \x01(\v2%.clouditor.ontology.v1.DDoSProtectionH\x00R\x0edDoSProtection\x12H\n" +
	"\fgeo_location\x18\xdaU \x01(\v2\".clouditor.ontology.v1.GeoLocationH\x00R\vgeoLocation\x12N\n" +
	"\x0egeo_redundancy\x18\x84\x13 \x01(\v2$.clouditor.ontology.v1.GeoRedundancyH\x00R\rgeoRedundancy\x12T\n" +
	"\x10local_redundancy\x18\xe9\x13 \x01(\v2&.clouditor.ontology.v1.LocalRedundancyH\x00R\x0flocalRedundancy\x12Q\n" +
	"\x0fzone_redundancy\x18\x89W \x01(\v2%.clouditor.ontology.v1.ZoneRedundancyH\x00R\x0ezoneRedundancy\x12g\n" +
	"\x17customer_key_encryption\x18\xab+ \x01(\v2,.clouditor.ontology.v1.CustomerKeyEncryptionH\x00R\x15customerKeyEncryption\x12d\n" +
	"\x16managed_key_encryption\x18\xedG \x01(\v2+.clouditor.ontology.v1.ManagedKeyEncryptionH\x00R\x14managedKeyEncryption\x12U\n" +
	"\x11encryption_in_use\x18\x9f{ \x01(\v2&.clouditor.ontology.v1.EncryptionInUseH\x00R\x0fencryptionInUse\x12`\n" +
	"\x14transport_encryption\x18\xb9| \x01(\v2*.clouditor.ontology.v1.TransportEncryptionH\x00R\x13transportEncryption\x12W\n" +
	"\x11local_attestation\x18\xc8! \x01(\v2'.clouditor.ontology.v1.LocalAttestationH\x00R\x10localAttestation\x12Z\n" +
	"\x12remote_attestation\x18\xc8j \x01(\v2(.clouditor.ontology.v1.RemoteAttestationH\x00R\x11remoteAttestation\x12W\n" +
	"\x11automatic_updates\x18\x86N \x01(\v2'.clouditor.ontology.v1.AutomaticUpdatesH\x00R\x10automaticUpdates\x12W\n" +
	"\x11document_checksum\x18\xe3} \x01(\v2'.clouditor.ontology.v1.DocumentChecksumH\x00R\x10documentChecksum\x12J\n" +
	"\fimmutability\x18\xd8\x0f \x01(\v2#.clouditor.ontology.v1.ImmutabilityH\x00R\fimmutability\x12Z\n" +
	"\x12document_signature\x18\x87> \x01(\v2(.clouditor.ontology.v1.DocumentSignatureH\x00R\x11documentSignature\x12]\n" +
	"\x13explainable_results\x18\xc90 \x01(\v2).clouditor.ontology.v1.ExplainableResultsH\x00R\x12explainableResults\x12T\n" +
	"\x10robustness_score\x18\xbce \x01(\v2&.clouditor.ontology.v1.RobustnessScoreH\x00R\x0frobustnessScoreB\x06\n" +
	"\x04type\"\xc1\x04\n" +
	"\x10SecurityTraining\x127\n" +
	"\x17annual_update_completed\x18\xfaO \x01(\bR\x15annualUpdateCompleted\x12@\n" +
	"\rcreation_time\x18\xfa3 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x89N \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18ل\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12L\n" +
	"\x06labels\x18\xe6\x16 \x03(\v23.clouditor.ontology.v1.SecurityTraining.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xf3] \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xdfC \x01(\tR\x03raw\x12K\n" +
	"!successfully_completed_percentage\x18\xdb_ \x01(\bR\x1fsuccessfullyCompletedPercentage\x12!\n" +
	"\tparent_id\x18\xfal \x01(\tH\x00R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:>\x82\xa6\x1d\x10SecurityTraining\x82\xa6\x1d\bTraining\x82\xa6\x1d\x0eHumanResources\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x90\a\n" +
	"\x17ServiceMetadataDocument\x12@\n" +
	"\rcreation_time\x18\xa5- \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xb5\x1d \x01(\tR\vdescription\x12\x1b\n" +
	"\bfiletype\x18\xc3# \x01(\tR\bfiletype\x12\x17\n" +
	"\x02id\x18\xc3@ \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12S\n" +
	"\x06labels\x18\x88\r \x03(\v2:.clouditor.ontology.v1.ServiceMetadataDocument.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xa0U \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x80? \x01(\tR\x03raw\x12I\n" +
	"\rdata_location\x18\xdf} \x01(\v2#.clouditor.ontology.v1.DataLocationR\fdataLocation\x12W\n" +
	"\x12document_checksums\x18\xf6\t \x03(\v2'.clouditor.ontology.v1.DocumentChecksumR\x11documentChecksums\x12Z\n" +
	"\x13document_signatures\x18\xact \x03(\v2(.clouditor.ontology.v1.DocumentSignatureR\x12documentSignatures\x12!\n" +
	"\tparent_id\x18\xa7k \x01(\tH\x00R\bparentId\x88\x01\x01\x12U\n" +
	"\x11schema_validation\x18\xe8G \x01(\v2'.clouditor.ontology.v1.SchemaValidationR\x10schemaValidation\x12U\n" +
	"\x11security_features\x18\xb5\x88\x01 \x03(\v2&.clouditor.ontology.v1.SecurityFeatureR\x10securityFeatures\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:;\x82\xa6\x1d\x17ServiceMetadataDocument\x82\xa6\x1d\bDocument\x82\xa6\x1d\x04Data\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xa0\x01\n" +
	"\x11DocumentSignature\x12\x1d\n" +
	"\talgorithm\x18\xbf\x1f \x01(\tR\talgorithm\x125\n" +
	"\x06errors\x18\xb8d \x03(\v2\x1c.clouditor.ontology.v1.ErrorR\x06errors:5\x82\xa6\x1d\x11DocumentSignature\x82\xa6\x1d\tIntegrity\x82\xa6\x1d\x0fSecurityFeature\"\x8d\x01\n" +
	"\fSingleSignOn\x12-\n" +
	"\x12context_is_checked\x18\x98q \x01(\bR\x10contextIsChecked\x12\x19\n" +
	"\aenabled\x18\xc9R \x01(\bR\aenabled:3\x82\xa6\x1d\fSingleSignOn\x82\xa6\x1d\fAuthenticity\x82\xa6\x1d\x0fSecurityFeature\"\xe9\x01\n" +
	"\x04Code\x12H\n" +
	"\vapplication\x18\xfa\x90\x01 \x01(\v2\".clouditor.ontology.v1.ApplicationH\x00R\vapplication\x12;\n" +
	"\alibrary\x18\xb9o \x01(\v2\x1e.clouditor.ontology.v1.LibraryH\x00R\alibrary\x12R\n" +
	"\x10source_code_file\x18\xf4\x15 \x01(\v2%.clouditor.ontology.v1.SourceCodeFileH\x00R\x0esourceCodeFileB\x06\n" +
	"\x04type\"\xf2\x04\n" +
	"\x0eSourceCodeFile\x12@\n" +
	"\rcreation_time\x18\xdc8 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xe0t \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x97R \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12J\n" +
	"\x06labels\x18\xb19 \x03(\v21.clouditor.ontology.v1.SourceCodeFile.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x97r \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x12\n" +
	"\x03raw\x18\xf1\x81\x01 \x01(\tR\x03raw\x12'\n" +
	"\x0fcode_module_ids\x18\x81\x0f \x03(\tR\rcodeModuleIds\x122\n" +
	"\x12code_repository_id\x18\xbb% \x01(\tH\x00R\x10codeRepositoryId\x88\x01\x01\x12O\n" +
	"\x0ffunctionalities\x18\xa40 \x03(\v2$.clouditor.ontology.v1.FunctionalityR\x0ffunctionalities\x12!\n" +
	"\tparent_id\x18\xbb8 \x01(\tH\x01R\bparentId\x88\x01\x01\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:4\x82\xa6\x1d\x0eSourceCodeFile\x82\xa6\x1d\n" +
	"CodeModule\x82\xa6\x1d\x04Code\x82\xa6\x1d\bResourceB\x15\n" +
	"\x13_code_repository_idB\f\n" +
	"\n" +
	"_parent_id\"\xce\x02\n" +
	"\aStorage\x12K\n" +
	"\rblock_storage\x18\x8dP \x01(\v2#.clouditor.ontology.v1.BlockStorageH\x00R\fblockStorage\x12T\n" +
	"\x10database_storage\x18\x8b` \x01(\v2&.clouditor.ontology.v1.DatabaseStorageH\x00R\x0fdatabaseStorage\x12H\n" +
	"\ffile_storage\x18\xb0\x15 \x01(\v2\".clouditor.ontology.v1.FileStorageH\x00R\vfileStorage\x12N\n" +
	"\x0eobject_storage\x18\xf6T \x01(\v2$.clouditor.ontology.v1.ObjectStorageH\x00R\robjectStorageB\x06\n" +
	"\x04type\"\xaa\x05\n" +
	"\x0eStorageService\x12n\n" +
	"\x19document_database_service\x18\x9e\x8c\x01 \x01(\v2..clouditor.ontology.v1.DocumentDatabaseServiceH\x00R\x17documentDatabaseService\x12n\n" +
	"\x1akey_value_database_service\x18\xec\a \x01(\v2..clouditor.ontology.v1.KeyValueDatabaseServiceH\x00R\x17keyValueDatabaseService\x12t\n" +
	"\x1cmulti_modal_database_service\x18\xe1\x14 \x01(\v20.clouditor.ontology.v1.MultiModalDatabaseServiceH\x00R\x19multiModalDatabaseService\x12s\n" +
	"\x1brelational_database_service\x18\xc5a \x01(\v20.clouditor.ontology.v1.RelationalDatabaseServiceH\x00R\x19relationalDatabaseService\x12_\n" +
	"\x14file_storage_service\x18\xae\x83\x01 \x01(\v2).clouditor.ontology.v1.FileStorageServiceH\x00R\x12fileStorageService\x12d\n" +
	"\x16object_storage_service\x18\xbb2 \x01(\v2+.clouditor.ontology.v1.ObjectStorageServiceH\x00R\x14objectStorageServiceB\x06\n" +
	"\x04type\"\x18\n" +
	"\x04Tool:\x10\x82\xa6\x1d\x04Tool\x82\xa6\x1d\x04Core\"\xc7\x01\n" +
	"\bTraining\x12Z\n" +
	"\x12awareness_training\x18\xe3i \x01(\v2(.clouditor.ontology.v1.AwarenessTrainingH\x00R\x11awarenessTraining\x12W\n" +
	"\x11security_training\x18\xbd' \x01(\v2'.clouditor.ontology.v1.SecurityTrainingH\x00R\x10securityTrainingB\x06\n" +
	"\x04type\"\xa0\x02\n" +
	"\x13TransportEncryption\x12\x19\n" +
	"\aenabled\x18\xd8\x14 \x01(\bR\aenabled\x12\x1b\n" +
	"\benforced\x18\xa6@ \x01(\bR\benforced\x12\x1b\n" +
	"\bprotocol\x18\xbbr \x01(\tR\bprotocol\x12*\n" +
	"\x10protocol_version\x18\xbd\x12 \x01(\x02R\x0fprotocolVersion\x12I\n" +
	"\rcipher_suites\x18ً\x01 \x03(\v2\".clouditor.ontology.v1.CipherSuiteR\fcipherSuites:=\x82\xa6\x1d\x13TransportEncryption\x82\xa6\x1d\x0fConfidentiality\x82\xa6\x1d\x0fSecurityFeature\"s\n" +
	"\x0fUsageStatistics\x12,\n" +
	"\x12api_hits_per_month\x18\xc9; \x01(\x05R\x0fapiHitsPerMonth:2\x82\xa6\x1d\x0fUsageStatistics\x82\xa6\x1d\bAuditing\x82\xa6\x1d\x0fSecurityFeature\"\xc3\x06\n" +
	"\aVMImage\x12@\n" +
	"\rcreation_time\x18\xd7@ \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\x98% \x01(\tR\vdescription\x12\x18\n" +
	"\x02id\x18ˋ\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x89u \x01(\bR\x1ainternetAccessibleEndpoint\x12D\n" +
	"\x06labels\x18͆\x01 \x03(\v2*.clouditor.ontology.v1.VMImage.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xe40 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x83\x1b \x01(\tR\x03raw\x12+\n" +
	"\x0eapplication_id\x18\xdfz \x01(\tH\x00R\rapplicationId\x88\x01\x01\x12F\n" +
	"\fgeo_location\x18\x81$ \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xa3* \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12G\n" +
	"\fredundancies\x18\xad\x8f\x01 \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xa7k \x01(\tH\x01R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xc1\x12 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:2\x82\xa6\x1d\aVMImage\x82\xa6\x1d\x05Image\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\x11\n" +
	"\x0f_application_idB\f\n" +
	"\n" +
	"_parent_id\"\x8d\f\n" +
	"\x0eVirtualMachine\x12@\n" +
	"\rcreation_time\x18\xe93 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xb1q \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xa8? \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\x96\x10 \x01(\bR\x1ainternetAccessibleEndpoint\x12J\n" +
	"\x06labels\x18\xf0\x12 \x03(\v21.clouditor.ontology.v1.VirtualMachine.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xe1Z \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xf9m \x01(\tR\x03raw\x12R\n" +
	"\x10activity_logging\x18\xc6? \x01(\v2&.clouditor.ontology.v1.ActivityLoggingR\x0factivityLogging\x12U\n" +
	"\x11automatic_updates\x18\xca7 \x01(\v2'.clouditor.ontology.v1.AutomaticUpdatesR\x10automaticUpdates\x12+\n" +
	"\x11block_storage_ids\x18\x86\x11 \x03(\tR\x0fblockStorageIds\x12F\n" +
	"\fboot_logging\x18\xe5{ \x01(\v2\".clouditor.ontology.v1.BootLoggingR\vbootLogging\x12S\n" +
	"\x11encryption_in_use\x18\xe4R \x01(\v2&.clouditor.ontology.v1.EncryptionInUseR\x0fencryptionInUse\x12F\n" +
	"\fgeo_location\x18\x8c9 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xb7u \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12Y\n" +
	"\x12malware_protection\x18\x97\x81\x01 \x01(\v2(.clouditor.ontology.v1.MalwareProtectionR\x11malwareProtection\x123\n" +
	"\x15network_interface_ids\x18\xe5\x05 \x03(\tR\x13networkInterfaceIds\x12@\n" +
	"\n" +
	"os_logging\x18\x94? \x01(\v2 .clouditor.ontology.v1.OSLoggingR\tosLogging\x12F\n" +
	"\fredundancies\x18\xe7s \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12Y\n" +
	"\x12remote_attestation\x18\x9c\x86\x01 \x01(\v2(.clouditor.ontology.v1.RemoteAttestationR\x11remoteAttestation\x12!\n" +
	"\tparent_id\x18\xc5U \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10resource_logging\x18\xdcx \x01(\v2&.clouditor.ontology.v1.ResourceLoggingR\x0fresourceLogging\x12R\n" +
	"\x10usage_statistics\x18\xcdq \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:;\x82\xa6\x1d\x0eVirtualMachine\x82\xa6\x1d\aCompute\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x9a\x06\n" +
	"\x0eVirtualNetwork\x12@\n" +
	"\rcreation_time\x18\xdd\x0e \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xcaM \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf7\x1f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xbf= \x01(\bR\x1ainternetAccessibleEndpoint\x12J\n" +
	"\x06labels\x18\xa25 \x03(\v21.clouditor.ontology.v1.VirtualNetwork.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xb2\x06 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\x88o \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\xe48 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\x8eM \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x87\x1c \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xfe\x15 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xa58 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:>\x82\xa6\x1d\x0eVirtualNetwork\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xa4\x06\n" +
	"\x11VirtualSubNetwork\x12@\n" +
	"\rcreation_time\x18\xbd\x02 \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xb0q \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\xf2O \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xc5p \x01(\bR\x1ainternetAccessibleEndpoint\x12M\n" +
	"\x06labels\x18\xdc  \x03(\v24.clouditor.ontology.v1.VirtualSubNetwork.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\x9b\f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xbdv \x01(\tR\x03raw\x12G\n" +
	"\fgeo_location\x18\xb2\x90\x01 \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\xe5' \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\xb2p \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\x87b \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\x8b0 \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:A\x82\xa6\x1d\x11VirtualSubNetwork\x82\xa6\x1d\n" +
	"Networking\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\xad\x01\n" +
	"\rVulnerability\x12\x11\n" +
	"\x03cve\x18\xcd\x01 \x01(\tR\x03cve\x12\x12\n" +
	"\x03cwe\x18\x95\x8f\x01 \x03(\tR\x03cwe\x12!\n" +
	"\vdescription\x18\xc2S \x01(\tR\vdescription\x12\x1b\n" +
	"\x04name\x18\xd8i \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03url\x18\x95] \x01(\tR\x03url:\"\x82\xa6\x1d\rVulnerability\x82\xa6\x1d\rFunctionality\"\x94\x01\n" +
	"\x16WebApplicationFirewall\x12\x19\n" +
	"\aenabled\x18\x81F \x01(\bR\aenabled:_\x82\xa6\x1d\x16WebApplicationFirewall\x82\xa6\x1d\bFirewall\x82\xa6\x1d\x11AccessRestriction\x82\xa6\x1d\rAuthorization\x82\xa6\x1d\x0fSecurityFeature\"\x89\x06\n" +
	"\bWorkflow\x12@\n" +
	"\rcreation_time\x18\xdc+ \x01(\v2\x1a.google.protobuf.TimestampR\fcreationTime\x12!\n" +
	"\vdescription\x18\xcf\x16 \x01(\tR\vdescription\x12\x17\n" +
	"\x02id\x18\x980 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12A\n" +
	"\x1cinternet_accessible_endpoint\x18\xd0' \x01(\bR\x1ainternetAccessibleEndpoint\x12D\n" +
	"\x06labels\x18\xe6H \x03(\v2+.clouditor.ontology.v1.Workflow.LabelsEntryR\x06labels\x12\x1b\n" +
	"\x04name\x18\xfe` \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12\x11\n" +
	"\x03raw\x18\xc8I \x01(\tR\x03raw\x12F\n" +
	"\fgeo_location\x18\x8eq \x01(\v2\".clouditor.ontology.v1.GeoLocationR\vgeoLocation\x12;\n" +
	"\bloggings\x18\x97| \x03(\v2\x1e.clouditor.ontology.v1.LoggingR\bloggings\x12F\n" +
	"\fredundancies\x18\x97w \x03(\v2!.clouditor.ontology.v1.RedundancyR\fredundancies\x12!\n" +
	"\tparent_id\x18\xba\x17 \x01(\tH\x00R\bparentId\x88\x01\x01\x12R\n" +
	"\x10usage_statistics\x18\xdax \x01(\v2&.clouditor.ontology.v1.UsageStatisticsR\x0fusageStatistics\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:9\x82\xa6\x1d\bWorkflow\x82\xa6\x1d\vCICDService\x82\xa6\x1d\x0eInfrastructure\x82\xa6\x1d\bResourceB\f\n" +
	"\n" +
	"_parent_id\"\x9f\x01\n" +
	"\x0eZoneRedundancy\x12H\n" +
	"\rgeo_locations\x18\xf7[ \x03(\v2\".clouditor.ontology.v1.GeoLocationR\fgeoLocations:C\x82\xa6\x1d\x0eZoneRedundancy\x82\xa6\x1d\n" +
	"Redundancy\x82\xa6\x1d\fAvailability\x82\xa6\x1d\x0fSecurityFeature:Q\n" +
	"\x13resource_type_names\x12\x1f.google.protobuf.MessageOptions\x18\xe0\xd4\x03 \x03(\tR\x11resourceTypeNamesB(Z&clouditor.io/clouditor/v2/api/ontologyb\x06proto3"

var (
	file_api_ontology_ontology_proto_rawDescOnce sync.Once
	file_api_ontology_ontology_proto_rawDescData []byte
)

func file_api_ontology_ontology_proto_rawDescGZIP() []byte {
	file_api_ontology_ontology_proto_rawDescOnce.Do(func() {
		file_api_ontology_ontology_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ontology_ontology_proto_rawDesc), len(file_api_ontology_ontology_proto_rawDesc)))
	})
	return file_api_ontology_ontology_proto_rawDescData
}

var file_api_ontology_ontology_proto_msgTypes = make([]protoimpl.MessageInfo, 209)
var file_api_ontology_ontology_proto_goTypes = []any{
	(*ABAC)(nil),                           // 0: clouditor.ontology.v1.ABAC
	(*AccessRestriction)(nil),              // 1: clouditor.ontology.v1.AccessRestriction
	(*Account)(nil),                        // 2: clouditor.ontology.v1.Account
	(*ActivityLogging)(nil),                // 3: clouditor.ontology.v1.ActivityLogging
	(*AnomalyDetection)(nil),               // 4: clouditor.ontology.v1.AnomalyDetection
	(*Application)(nil),                    // 5: clouditor.ontology.v1.Application
	(*ApplicationLogging)(nil),             // 6: clouditor.ontology.v1.ApplicationLogging
	(*AtRestEncryption)(nil),               // 7: clouditor.ontology.v1.AtRestEncryption
	(*Attestation)(nil),                    // 8: clouditor.ontology.v1.Attestation
	(*Auditing)(nil),                       // 9: clouditor.ontology.v1.Auditing
	(*Authenticity)(nil),                   // 10: clouditor.ontology.v1.Authenticity
	(*Authorization)(nil),                  // 11: clouditor.ontology.v1.Authorization
	(*AutomaticUpdates)(nil),               // 12: clouditor.ontology.v1.AutomaticUpdates
	(*Availability)(nil),                   // 13: clouditor.ontology.v1.Availability
	(*AwarenessTraining)(nil),              // 14: clouditor.ontology.v1.AwarenessTraining
	(*Backup)(nil),                         // 15: clouditor.ontology.v1.Backup
	(*BlockStorage)(nil),                   // 16: clouditor.ontology.v1.BlockStorage
	(*BootLogging)(nil),                    // 17: clouditor.ontology.v1.BootLogging
	(*CICDService)(nil),                    // 18: clouditor.ontology.v1.CICDService
	(*Certificate)(nil),                    // 19: clouditor.ontology.v1.Certificate
	(*CertificateBasedAuthentication)(nil), // 20: clouditor.ontology.v1.CertificateBasedAuthentication
	(*CertificationTarget)(nil),            // 21: clouditor.ontology.v1.CertificationTarget
	(*CipherSuite)(nil),                    // 22: clouditor.ontology.v1.CipherSuite
	(*Infrastructure)(nil),                 // 23: clouditor.ontology.v1.Infrastructure
	(*CloudSDK)(nil),                       // 24: clouditor.ontology.v1.CloudSDK
	(*CodeRegion)(nil),                     // 25: clouditor.ontology.v1.CodeRegion
	(*CodeRepository)(nil),                 // 26: clouditor.ontology.v1.CodeRepository
	(*Component)(nil),                      // 27: clouditor.ontology.v1.Component
	(*Compute)(nil),                        // 28: clouditor.ontology.v1.Compute
	(*Confidentiality)(nil),                // 29: clouditor.ontology.v1.Confidentiality
	(*Container)(nil),                      // 30: clouditor.ontology.v1.Container
	(*ContainerImage)(nil),                 // 31: clouditor.ontology.v1.ContainerImage
	(*ContainerOrchestration)(nil),         // 32: clouditor.ontology.v1.ContainerOrchestration
	(*ContainerRegistry)(nil),              // 33: clouditor.ontology.v1.ContainerRegistry
	(*Core)(nil),                           // 34: clouditor.ontology.v1.Core
	(*Credential)(nil),                     // 35: clouditor.ontology.v1.Credential
	(*DocumentChecksum)(nil),               // 36: clouditor.ontology.v1.DocumentChecksum
	(*CryptographicOperation)(nil),         // 37: clouditor.ontology.v1.CryptographicOperation
	(*CustomerKeyEncryption)(nil),          // 38: clouditor.ontology.v1.CustomerKeyEncryption
	(*DDoSProtection)(nil),                 // 39: clouditor.ontology.v1.DDoSProtection
	(*Data)(nil),                           // 40: clouditor.ontology.v1.Data
	(*DataLocation)(nil),                   // 41: clouditor.ontology.v1.DataLocation
	(*DatabaseConnect)(nil),                // 42: clouditor.ontology.v1.DatabaseConnect
	(*DatabaseOperation)(nil),              // 43: clouditor.ontology.v1.DatabaseOperation
	(*DatabaseQuery)(nil),                  // 44: clouditor.ontology.v1.DatabaseQuery
	(*DatabaseService)(nil),                // 45: clouditor.ontology.v1.DatabaseService
	(*DatabaseStorage)(nil),                // 46: clouditor.ontology.v1.DatabaseStorage
	(*Decryption)(nil),                     // 47: clouditor.ontology.v1.Decryption
	(*DeviceProvisioningService)(nil),      // 48: clouditor.ontology.v1.DeviceProvisioningService
	(*Document)(nil),                       // 49: clouditor.ontology.v1.Document
	(*DocumentDatabaseService)(nil),        // 50: clouditor.ontology.v1.DocumentDatabaseService
	(*EncryptionInUse)(nil),                // 51: clouditor.ontology.v1.EncryptionInUse
	(*Encryption)(nil),                     // 52: clouditor.ontology.v1.Encryption
	(*Error)(nil),                          // 53: clouditor.ontology.v1.Error
	(*Evidence)(nil),                       // 54: clouditor.ontology.v1.Evidence
	(*ExplainableResults)(nil),             // 55: clouditor.ontology.v1.ExplainableResults
	(*FileStorage)(nil),                    // 56: clouditor.ontology.v1.FileStorage
	(*FileStorageService)(nil),             // 57: clouditor.ontology.v1.FileStorageService
	(*Firewall)(nil),                       // 58: clouditor.ontology.v1.Firewall
	(*Framework)(nil),                      // 59: clouditor.ontology.v1.Framework
	(*Function)(nil),                       // 60: clouditor.ontology.v1.Function
	(*FunctionService)(nil),                // 61: clouditor.ontology.v1.FunctionService
	(*Functionality)(nil),                  // 62: clouditor.ontology.v1.Functionality
	(*GenericDocument)(nil),                // 63: clouditor.ontology.v1.GenericDocument
	(*GenericNetworkService)(nil),          // 64: clouditor.ontology.v1.GenericNetworkService
	(*GeoLocation)(nil),                    // 65: clouditor.ontology.v1.GeoLocation
	(*GeoRedundancy)(nil),                  // 66: clouditor.ontology.v1.GeoRedundancy
	(*CryptographicHash)(nil),              // 67: clouditor.ontology.v1.CryptographicHash
	(*HttpClientLibrary)(nil),              // 68: clouditor.ontology.v1.HttpClientLibrary
	(*HttpEndpoint)(nil),                   // 69: clouditor.ontology.v1.HttpEndpoint
	(*HttpRequest)(nil),                    // 70: clouditor.ontology.v1.HttpRequest
	(*HttpRequestHandler)(nil),             // 71: clouditor.ontology.v1.HttpRequestHandler
	(*HttpServer)(nil),                     // 72: clouditor.ontology.v1.HttpServer
	(*HumanResources)(nil),                 // 73: clouditor.ontology.v1.HumanResources
	(*Identifiable)(nil),                   // 74: clouditor.ontology.v1.Identifiable
	(*Identity)(nil),                       // 75: clouditor.ontology.v1.Identity
	(*Image)(nil),                          // 76: clouditor.ontology.v1.Image
	(*Immutability)(nil),                   // 77: clouditor.ontology.v1.Immutability
	(*Integrity)(nil),                      // 78: clouditor.ontology.v1.Integrity
	(*IoT)(nil),                            // 79: clouditor.ontology.v1.IoT
	(*Job)(nil),                            // 80: clouditor.ontology.v1.Job
	(*TokenBasedAuthentication)(nil),       // 81: clouditor.ontology.v1.TokenBasedAuthentication
	(*Key)(nil),                            // 82: clouditor.ontology.v1.Key
	(*KeyValueDatabaseService)(nil),        // 83: clouditor.ontology.v1.KeyValueDatabaseService
	(*KeyVault)(nil),                       // 84: clouditor.ontology.v1.KeyVault
	(*L3Firewall)(nil),                     // 85: clouditor.ontology.v1.L3Firewall
	(*Library)(nil),                        // 86: clouditor.ontology.v1.Library
	(*LoadBalancer)(nil),                   // 87: clouditor.ontology.v1.LoadBalancer
	(*LocalAttestation)(nil),               // 88: clouditor.ontology.v1.LocalAttestation
	(*LocalDataLocation)(nil),              // 89: clouditor.ontology.v1.LocalDataLocation
	(*LocalRedundancy)(nil),                // 90: clouditor.ontology.v1.LocalRedundancy
	(*LogOperation)(nil),                   // 91: clouditor.ontology.v1.LogOperation
	(*Logger)(nil),                         // 92: clouditor.ontology.v1.Logger
	(*Logging)(nil),                        // 93: clouditor.ontology.v1.Logging
	(*LoggingService)(nil),                 // 94: clouditor.ontology.v1.LoggingService
	(*MachineLearning)(nil),                // 95: clouditor.ontology.v1.MachineLearning
	(*MachineLearningDataset)(nil),         // 96: clouditor.ontology.v1.MachineLearningDataset
	(*MachineLearningModel)(nil),           // 97: clouditor.ontology.v1.MachineLearningModel
	(*MachineLearningService)(nil),         // 98: clouditor.ontology.v1.MachineLearningService
	(*MalwareProtection)(nil),              // 99: clouditor.ontology.v1.MalwareProtection
	(*ManagedKeyEncryption)(nil),           // 100: clouditor.ontology.v1.ManagedKeyEncryption
	(*MessagingHub)(nil),                   // 101: clouditor.ontology.v1.MessagingHub
	(*CodeModule)(nil),                     // 102: clouditor.ontology.v1.CodeModule
	(*MultiFactorAuthentiation)(nil),       // 103: clouditor.ontology.v1.MultiFactorAuthentiation
	(*MultiModalDatabaseService)(nil),      // 104: clouditor.ontology.v1.MultiModalDatabaseService
	(*NetworkInterface)(nil),               // 105: clouditor.ontology.v1.NetworkInterface
	(*NetworkSecurityGroup)(nil),           // 106: clouditor.ontology.v1.NetworkSecurityGroup
	(*NetworkService)(nil),                 // 107: clouditor.ontology.v1.NetworkService
	(*Networking)(nil),                     // 108: clouditor.ontology.v1.Networking
	(*NoAuthentication)(nil),               // 109: clouditor.ontology.v1.NoAuthentication
	(*OSLogging)(nil),                      // 110: clouditor.ontology.v1.OSLogging
	(*OTPBasedAuthentication)(nil),         // 111: clouditor.ontology.v1.OTPBasedAuthentication
	(*ObjectStorage)(nil),                  // 112: clouditor.ontology.v1.ObjectStorage
	(*ObjectStorageRequest)(nil),           // 113: clouditor.ontology.v1.ObjectStorageRequest
	(*ObjectStorageService)(nil),           // 114: clouditor.ontology.v1.ObjectStorageService
	(*Operation)(nil),                      // 115: clouditor.ontology.v1.Operation
	(*PasswordBasedAuthentication)(nil),    // 116: clouditor.ontology.v1.PasswordBasedAuthentication
	(*PasswordPolicy)(nil),                 // 117: clouditor.ontology.v1.PasswordPolicy
	(*PolicyDocument)(nil),                 // 118: clouditor.ontology.v1.PolicyDocument
	(*RBAC)(nil),                           // 119: clouditor.ontology.v1.RBAC
	(*Redundancy)(nil),                     // 120: clouditor.ontology.v1.Redundancy
	(*RelationalDatabaseService)(nil),      // 121: clouditor.ontology.v1.RelationalDatabaseService
	(*Reliability)(nil),                    // 122: clouditor.ontology.v1.Reliability
	(*RemoteAttestation)(nil),              // 123: clouditor.ontology.v1.RemoteAttestation
	(*RemoteDataLocation)(nil),             // 124: clouditor.ontology.v1.RemoteDataLocation
	(*Resource)(nil),                       // 125: clouditor.ontology.v1.Resource
	(*ResourceGroup)(nil),                  // 126: clouditor.ontology.v1.ResourceGroup
	(*ResourceLogging)(nil),                // 127: clouditor.ontology.v1.ResourceLogging
	(*ResourceType)(nil),                   // 128: clouditor.ontology.v1.ResourceType
	(*RobustnessScore)(nil),                // 129: clouditor.ontology.v1.RobustnessScore
	(*RoleAssignment)(nil),                 // 130: clouditor.ontology.v1.RoleAssignment
	(*SchemaValidation)(nil),               // 131: clouditor.ontology.v1.SchemaValidation
	(*Secret)(nil),                         // 132: clouditor.ontology.v1.Secret
	(*SecurityAdvisoryDocument)(nil),       // 133: clouditor.ontology.v1.SecurityAdvisoryDocument
	(*SecurityAdvisoryFeed)(nil),           // 134: clouditor.ontology.v1.SecurityAdvisoryFeed
	(*SecurityAdvisoryService)(nil),        // 135: clouditor.ontology.v1.SecurityAdvisoryService
	(*SecurityFeature)(nil),                // 136: clouditor.ontology.v1.SecurityFeature
	(*SecurityTraining)(nil),               // 137: clouditor.ontology.v1.SecurityTraining
	(*ServiceMetadataDocument)(nil),        // 138: clouditor.ontology.v1.ServiceMetadataDocument
	(*DocumentSignature)(nil),              // 139: clouditor.ontology.v1.DocumentSignature
	(*SingleSignOn)(nil),                   // 140: clouditor.ontology.v1.SingleSignOn
	(*Code)(nil),                           // 141: clouditor.ontology.v1.Code
	(*SourceCodeFile)(nil),                 // 142: clouditor.ontology.v1.SourceCodeFile
	(*Storage)(nil),                        // 143: clouditor.ontology.v1.Storage
	(*StorageService)(nil),                 // 144: clouditor.ontology.v1.StorageService
	(*Tool)(nil),                           // 145: clouditor.ontology.v1.Tool
	(*Training)(nil),                       // 146: clouditor.ontology.v1.Training
	(*TransportEncryption)(nil),            // 147: clouditor.ontology.v1.TransportEncryption
	(*UsageStatistics)(nil),                // 148: clouditor.ontology.v1.UsageStatistics
	(*VMImage)(nil),                        // 149: clouditor.ontology.v1.VMImage
	(*VirtualMachine)(nil),                 // 150: clouditor.ontology.v1.VirtualMachine
	(*VirtualNetwork)(nil),                 // 151: clouditor.ontology.v1.VirtualNetwork
	(*VirtualSubNetwork)(nil),              // 152: clouditor.ontology.v1.VirtualSubNetwork
	(*Vulnerability)(nil),                  // 153: clouditor.ontology.v1.Vulnerability
	(*WebApplicationFirewall)(nil),         // 154: clouditor.ontology.v1.WebApplicationFirewall
	(*Workflow)(nil),                       // 155: clouditor.ontology.v1.Workflow
	(*ZoneRedundancy)(nil),                 // 156: clouditor.ontology.v1.ZoneRedundancy
	nil,                                    // 157: clouditor.ontology.v1.Account.LabelsEntry
	nil,                                    // 158: clouditor.ontology.v1.Application.LabelsEntry
	nil,                                    // 159: clouditor.ontology.v1.AwarenessTraining.LabelsEntry
	nil,                                    // 160: clouditor.ontology.v1.BlockStorage.LabelsEntry
	nil,                                    // 161: clouditor.ontology.v1.Certificate.LabelsEntry
	nil,                                    // 162: clouditor.ontology.v1.CodeRepository.LabelsEntry
	nil,                                    // 163: clouditor.ontology.v1.Container.LabelsEntry
	nil,                                    // 164: clouditor.ontology.v1.ContainerImage.LabelsEntry
	nil,                                    // 165: clouditor.ontology.v1.ContainerOrchestration.LabelsEntry
	nil,                                    // 166: clouditor.ontology.v1.ContainerRegistry.LabelsEntry
	nil,                                    // 167: clouditor.ontology.v1.DatabaseStorage.LabelsEntry
	nil,                                    // 168: clouditor.ontology.v1.DeviceProvisioningService.LabelsEntry
	nil,                                    // 169: clouditor.ontology.v1.DocumentDatabaseService.LabelsEntry
	nil,                                    // 170: clouditor.ontology.v1.FileStorage.LabelsEntry
	nil,                                    // 171: clouditor.ontology.v1.FileStorageService.LabelsEntry
	nil,                                    // 172: clouditor.ontology.v1.Function.LabelsEntry
	nil,                                    // 173: clouditor.ontology.v1.FunctionService.LabelsEntry
	nil,                                    // 174: clouditor.ontology.v1.GenericDocument.LabelsEntry
	nil,                                    // 175: clouditor.ontology.v1.GenericNetworkService.LabelsEntry
	nil,                                    // 176: clouditor.ontology.v1.Identity.LabelsEntry
	nil,                                    // 177: clouditor.ontology.v1.Job.LabelsEntry
	nil,                                    // 178: clouditor.ontology.v1.Key.LabelsEntry
	nil,                                    // 179: clouditor.ontology.v1.KeyValueDatabaseService.LabelsEntry
	nil,                                    // 180: clouditor.ontology.v1.KeyVault.LabelsEntry
	nil,                                    // 181: clouditor.ontology.v1.Library.LabelsEntry
	nil,                                    // 182: clouditor.ontology.v1.LoadBalancer.LabelsEntry
	nil,                                    // 183: clouditor.ontology.v1.LoggingService.LabelsEntry
	nil,                                    // 184: clouditor.ontology.v1.MachineLearningDataset.LabelsEntry
	nil,                                    // 185: clouditor.ontology.v1.MachineLearningModel.LabelsEntry
	nil,                                    // 186: clouditor.ontology.v1.MachineLearningService.LabelsEntry
	nil,                                    // 187: clouditor.ontology.v1.MessagingHub.LabelsEntry
	nil,                                    // 188: clouditor.ontology.v1.MultiModalDatabaseService.LabelsEntry
	nil,                                    // 189: clouditor.ontology.v1.NetworkInterface.LabelsEntry
	nil,                                    // 190: clouditor.ontology.v1.NetworkSecurityGroup.LabelsEntry
	nil,                                    // 191: clouditor.ontology.v1.ObjectStorage.LabelsEntry
	nil,                                    // 192: clouditor.ontology.v1.ObjectStorageService.LabelsEntry
	nil,                                    // 193: clouditor.ontology.v1.PasswordPolicy.LabelsEntry
	nil,                                    // 194: clouditor.ontology.v1.PolicyDocument.LabelsEntry
	nil,                                    // 195: clouditor.ontology.v1.RelationalDatabaseService.LabelsEntry
	nil,                                    // 196: clouditor.ontology.v1.ResourceGroup.LabelsEntry
	nil,                                    // 197: clouditor.ontology.v1.RoleAssignment.LabelsEntry
	nil,                                    // 198: clouditor.ontology.v1.Secret.LabelsEntry
	nil,                                    // 199: clouditor.ontology.v1.SecurityAdvisoryDocument.LabelsEntry
	nil,                                    // 200: clouditor.ontology.v1.SecurityAdvisoryService.LabelsEntry
	nil,                                    // 201: clouditor.ontology.v1.SecurityTraining.LabelsEntry
	nil,                                    // 202: clouditor.ontology.v1.ServiceMetadataDocument.LabelsEntry
	nil,                                    // 203: clouditor.ontology.v1.SourceCodeFile.LabelsEntry
	nil,                                    // 204: clouditor.ontology.v1.VMImage.LabelsEntry
	nil,                                    // 205: clouditor.ontology.v1.VirtualMachine.LabelsEntry
	nil,                                    // 206: clouditor.ontology.v1.VirtualNetwork.LabelsEntry
	nil,                                    // 207: clouditor.ontology.v1.VirtualSubNetwork.LabelsEntry
	nil,                                    // 208: clouditor.ontology.v1.Workflow.LabelsEntry
	(*timestamppb.Timestamp)(nil),          // 209: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),            // 210: google.protobuf.Duration
	(*descriptorpb.MessageOptions)(nil),    // 211: google.protobuf.MessageOptions
}
var file_api_ontology_ontology_proto_depIdxs = []int32{
	85,  // 0: clouditor.ontology.v1.AccessRestriction.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	154, // 1: clouditor.ontology.v1.AccessRestriction.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	209, // 2: clouditor.ontology.v1.Account.creation_time:type_name -> google.protobuf.Timestamp
	157, // 3: clouditor.ontology.v1.Account.labels:type_name -> clouditor.ontology.v1.Account.LabelsEntry
	65,  // 4: clouditor.ontology.v1.Account.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 5: clouditor.ontology.v1.Account.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 6: clouditor.ontology.v1.Account.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 7: clouditor.ontology.v1.Account.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	210, // 8: clouditor.ontology.v1.ActivityLogging.retention_period:type_name -> google.protobuf.Duration
	6,   // 9: clouditor.ontology.v1.AnomalyDetection.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	209, // 10: clouditor.ontology.v1.Application.creation_time:type_name -> google.protobuf.Timestamp
	158, // 11: clouditor.ontology.v1.Application.labels:type_name -> clouditor.ontology.v1.Application.LabelsEntry
	12,  // 12: clouditor.ontology.v1.Application.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	62,  // 13: clouditor.ontology.v1.Application.functionalities:type_name -> clouditor.ontology.v1.Functionality
	210, // 14: clouditor.ontology.v1.ApplicationLogging.retention_period:type_name -> google.protobuf.Duration
	38,  // 15: clouditor.ontology.v1.AtRestEncryption.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	100, // 16: clouditor.ontology.v1.AtRestEncryption.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	88,  // 17: clouditor.ontology.v1.Attestation.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	123, // 18: clouditor.ontology.v1.Attestation.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	4,   // 19: clouditor.ontology.v1.Auditing.anomaly_detection:type_name -> clouditor.ontology.v1.AnomalyDetection
	3,   // 20: clouditor.ontology.v1.Auditing.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 21: clouditor.ontology.v1.Auditing.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 22: clouditor.ontology.v1.Auditing.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	110, // 23: clouditor.ontology.v1.Auditing.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	127, // 24: clouditor.ontology.v1.Auditing.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	99,  // 25: clouditor.ontology.v1.Auditing.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	148, // 26: clouditor.ontology.v1.Auditing.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	20,  // 27: clouditor.ontology.v1.Authenticity.certificate_based_authentication:type_name -> clouditor.ontology.v1.CertificateBasedAuthentication
	81,  // 28: clouditor.ontology.v1.Authenticity.token_based_authentication:type_name -> clouditor.ontology.v1.TokenBasedAuthentication
	103, // 29: clouditor.ontology.v1.Authenticity.multi_factor_authentiation:type_name -> clouditor.ontology.v1.MultiFactorAuthentiation
	109, // 30: clouditor.ontology.v1.Authenticity.no_authentication:type_name -> clouditor.ontology.v1.NoAuthentication
	111, // 31: clouditor.ontology.v1.Authenticity.otp_based_authentication:type_name -> clouditor.ontology.v1.OTPBasedAuthentication
	116, // 32: clouditor.ontology.v1.Authenticity.password_based_authentication:type_name -> clouditor.ontology.v1.PasswordBasedAuthentication
	140, // 33: clouditor.ontology.v1.Authenticity.single_sign_on:type_name -> clouditor.ontology.v1.SingleSignOn
	0,   // 34: clouditor.ontology.v1.Authorization.abac:type_name -> clouditor.ontology.v1.ABAC
	85,  // 35: clouditor.ontology.v1.Authorization.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	154, // 36: clouditor.ontology.v1.Authorization.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	119, // 37: clouditor.ontology.v1.Authorization.rbac:type_name -> clouditor.ontology.v1.RBAC
	210, // 38: clouditor.ontology.v1.AutomaticUpdates.interval:type_name -> google.protobuf.Duration
	15,  // 39: clouditor.ontology.v1.Availability.backup:type_name -> clouditor.ontology.v1.Backup
	39,  // 40: clouditor.ontology.v1.Availability.d_do_s_protection:type_name -> clouditor.ontology.v1.DDoSProtection
	65,  // 41: clouditor.ontology.v1.Availability.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	66,  // 42: clouditor.ontology.v1.Availability.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	90,  // 43: clouditor.ontology.v1.Availability.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	156, // 44: clouditor.ontology.v1.Availability.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	209, // 45: clouditor.ontology.v1.AwarenessTraining.creation_time:type_name -> google.protobuf.Timestamp
	159, // 46: clouditor.ontology.v1.AwarenessTraining.labels:type_name -> clouditor.ontology.v1.AwarenessTraining.LabelsEntry
	210, // 47: clouditor.ontology.v1.Backup.interval:type_name -> google.protobuf.Duration
	210, // 48: clouditor.ontology.v1.Backup.retention_period:type_name -> google.protobuf.Duration
	147, // 49: clouditor.ontology.v1.Backup.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	209, // 50: clouditor.ontology.v1.BlockStorage.creation_time:type_name -> google.protobuf.Timestamp
	160, // 51: clouditor.ontology.v1.BlockStorage.labels:type_name -> clouditor.ontology.v1.BlockStorage.LabelsEntry
	3,   // 52: clouditor.ontology.v1.BlockStorage.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	7,   // 53: clouditor.ontology.v1.BlockStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	15,  // 54: clouditor.ontology.v1.BlockStorage.backups:type_name -> clouditor.ontology.v1.Backup
	65,  // 55: clouditor.ontology.v1.BlockStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	77,  // 56: clouditor.ontology.v1.BlockStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	93,  // 57: clouditor.ontology.v1.BlockStorage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 58: clouditor.ontology.v1.BlockStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	127, // 59: clouditor.ontology.v1.BlockStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 60: clouditor.ontology.v1.BlockStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	210, // 61: clouditor.ontology.v1.BootLogging.retention_period:type_name -> google.protobuf.Duration
	80,  // 62: clouditor.ontology.v1.CICDService.job:type_name -> clouditor.ontology.v1.Job
	155, // 63: clouditor.ontology.v1.CICDService.workflow:type_name -> clouditor.ontology.v1.Workflow
	209, // 64: clouditor.ontology.v1.Certificate.creation_time:type_name -> google.protobuf.Timestamp
	209, // 65: clouditor.ontology.v1.Certificate.expiration_date:type_name -> google.protobuf.Timestamp
	161, // 66: clouditor.ontology.v1.Certificate.labels:type_name -> clouditor.ontology.v1.Certificate.LabelsEntry
	209, // 67: clouditor.ontology.v1.Certificate.not_before_date:type_name -> google.protobuf.Timestamp
	65,  // 68: clouditor.ontology.v1.Certificate.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 69: clouditor.ontology.v1.Certificate.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 70: clouditor.ontology.v1.Certificate.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 71: clouditor.ontology.v1.Certificate.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	2,   // 72: clouditor.ontology.v1.Infrastructure.account:type_name -> clouditor.ontology.v1.Account
	80,  // 73: clouditor.ontology.v1.Infrastructure.job:type_name -> clouditor.ontology.v1.Job
	155, // 74: clouditor.ontology.v1.Infrastructure.workflow:type_name -> clouditor.ontology.v1.Workflow
	26,  // 75: clouditor.ontology.v1.Infrastructure.code_repository:type_name -> clouditor.ontology.v1.CodeRepository
	30,  // 76: clouditor.ontology.v1.Infrastructure.container:type_name -> clouditor.ontology.v1.Container
	60,  // 77: clouditor.ontology.v1.Infrastructure.function:type_name -> clouditor.ontology.v1.Function
	150, // 78: clouditor.ontology.v1.Infrastructure.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	32,  // 79: clouditor.ontology.v1.Infrastructure.container_orchestration:type_name -> clouditor.ontology.v1.ContainerOrchestration
	33,  // 80: clouditor.ontology.v1.Infrastructure.container_registry:type_name -> clouditor.ontology.v1.ContainerRegistry
	19,  // 81: clouditor.ontology.v1.Infrastructure.certificate:type_name -> clouditor.ontology.v1.Certificate
	82,  // 82: clouditor.ontology.v1.Infrastructure.key:type_name -> clouditor.ontology.v1.Key
	132, // 83: clouditor.ontology.v1.Infrastructure.secret:type_name -> clouditor.ontology.v1.Secret
	75,  // 84: clouditor.ontology.v1.Infrastructure.identity:type_name -> clouditor.ontology.v1.Identity
	130, // 85: clouditor.ontology.v1.Infrastructure.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	31,  // 86: clouditor.ontology.v1.Infrastructure.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	149, // 87: clouditor.ontology.v1.Infrastructure.vm_image:type_name -> clouditor.ontology.v1.VMImage
	48,  // 88: clouditor.ontology.v1.Infrastructure.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	101, // 89: clouditor.ontology.v1.Infrastructure.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	84,  // 90: clouditor.ontology.v1.Infrastructure.key_vault:type_name -> clouditor.ontology.v1.KeyVault
	105, // 91: clouditor.ontology.v1.Infrastructure.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	106, // 92: clouditor.ontology.v1.Infrastructure.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	61,  // 93: clouditor.ontology.v1.Infrastructure.function_service:type_name -> clouditor.ontology.v1.FunctionService
	64,  // 94: clouditor.ontology.v1.Infrastructure.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	87,  // 95: clouditor.ontology.v1.Infrastructure.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	94,  // 96: clouditor.ontology.v1.Infrastructure.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	98,  // 97: clouditor.ontology.v1.Infrastructure.machine_learning_service:type_name -> clouditor.ontology.v1.MachineLearningService
	135, // 98: clouditor.ontology.v1.Infrastructure.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	50,  // 99: clouditor.ontology.v1.Infrastructure.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 100: clouditor.ontology.v1.Infrastructure.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 101: clouditor.ontology.v1.Infrastructure.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 102: clouditor.ontology.v1.Infrastructure.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	57,  // 103: clouditor.ontology.v1.Infrastructure.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	114, // 104: clouditor.ontology.v1.Infrastructure.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	151, // 105: clouditor.ontology.v1.Infrastructure.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	152, // 106: clouditor.ontology.v1.Infrastructure.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	117, // 107: clouditor.ontology.v1.Infrastructure.password_policy:type_name -> clouditor.ontology.v1.PasswordPolicy
	126, // 108: clouditor.ontology.v1.Infrastructure.resource_group:type_name -> clouditor.ontology.v1.ResourceGroup
	16,  // 109: clouditor.ontology.v1.Infrastructure.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	46,  // 110: clouditor.ontology.v1.Infrastructure.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	56,  // 111: clouditor.ontology.v1.Infrastructure.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	112, // 112: clouditor.ontology.v1.Infrastructure.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	209, // 113: clouditor.ontology.v1.CodeRepository.creation_time:type_name -> google.protobuf.Timestamp
	162, // 114: clouditor.ontology.v1.CodeRepository.labels:type_name -> clouditor.ontology.v1.CodeRepository.LabelsEntry
	65,  // 115: clouditor.ontology.v1.CodeRepository.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 116: clouditor.ontology.v1.CodeRepository.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 117: clouditor.ontology.v1.CodeRepository.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 118: clouditor.ontology.v1.CodeRepository.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	5,   // 119: clouditor.ontology.v1.Component.application:type_name -> clouditor.ontology.v1.Application
	86,  // 120: clouditor.ontology.v1.Component.library:type_name -> clouditor.ontology.v1.Library
	30,  // 121: clouditor.ontology.v1.Compute.container:type_name -> clouditor.ontology.v1.Container
	60,  // 122: clouditor.ontology.v1.Compute.function:type_name -> clouditor.ontology.v1.Function
	150, // 123: clouditor.ontology.v1.Compute.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	38,  // 124: clouditor.ontology.v1.Confidentiality.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	100, // 125: clouditor.ontology.v1.Confidentiality.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	51,  // 126: clouditor.ontology.v1.Confidentiality.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	147, // 127: clouditor.ontology.v1.Confidentiality.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	209, // 128: clouditor.ontology.v1.Container.creation_time:type_name -> google.protobuf.Timestamp
	163, // 129: clouditor.ontology.v1.Container.labels:type_name -> clouditor.ontology.v1.Container.LabelsEntry
	51,  // 130: clouditor.ontology.v1.Container.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	65,  // 131: clouditor.ontology.v1.Container.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 132: clouditor.ontology.v1.Container.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 133: clouditor.ontology.v1.Container.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	123, // 134: clouditor.ontology.v1.Container.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	127, // 135: clouditor.ontology.v1.Container.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 136: clouditor.ontology.v1.Container.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 137: clouditor.ontology.v1.ContainerImage.creation_time:type_name -> google.protobuf.Timestamp
	164, // 138: clouditor.ontology.v1.ContainerImage.labels:type_name -> clouditor.ontology.v1.ContainerImage.LabelsEntry
	65,  // 139: clouditor.ontology.v1.ContainerImage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 140: clouditor.ontology.v1.ContainerImage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 141: clouditor.ontology.v1.ContainerImage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 142: clouditor.ontology.v1.ContainerImage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 143: clouditor.ontology.v1.ContainerOrchestration.creation_time:type_name -> google.protobuf.Timestamp
	165, // 144: clouditor.ontology.v1.ContainerOrchestration.labels:type_name -> clouditor.ontology.v1.ContainerOrchestration.LabelsEntry
	65,  // 145: clouditor.ontology.v1.ContainerOrchestration.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 146: clouditor.ontology.v1.ContainerOrchestration.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 147: clouditor.ontology.v1.ContainerOrchestration.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	127, // 148: clouditor.ontology.v1.ContainerOrchestration.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 149: clouditor.ontology.v1.ContainerOrchestration.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 150: clouditor.ontology.v1.ContainerRegistry.creation_time:type_name -> google.protobuf.Timestamp
	166, // 151: clouditor.ontology.v1.ContainerRegistry.labels:type_name -> clouditor.ontology.v1.ContainerRegistry.LabelsEntry
	65,  // 152: clouditor.ontology.v1.ContainerRegistry.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 153: clouditor.ontology.v1.ContainerRegistry.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 154: clouditor.ontology.v1.ContainerRegistry.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 155: clouditor.ontology.v1.ContainerRegistry.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	21,  // 156: clouditor.ontology.v1.Core.certification_target:type_name -> clouditor.ontology.v1.CertificationTarget
	54,  // 157: clouditor.ontology.v1.Core.evidence:type_name -> clouditor.ontology.v1.Evidence
	24,  // 158: clouditor.ontology.v1.Core.cloud_sdk:type_name -> clouditor.ontology.v1.CloudSDK
	68,  // 159: clouditor.ontology.v1.Core.http_client_library:type_name -> clouditor.ontology.v1.HttpClientLibrary
	72,  // 160: clouditor.ontology.v1.Core.http_server:type_name -> clouditor.ontology.v1.HttpServer
	92,  // 161: clouditor.ontology.v1.Core.logger:type_name -> clouditor.ontology.v1.Logger
	128, // 162: clouditor.ontology.v1.Core.resource_type:type_name -> clouditor.ontology.v1.ResourceType
	145, // 163: clouditor.ontology.v1.Core.tool:type_name -> clouditor.ontology.v1.Tool
	19,  // 164: clouditor.ontology.v1.Credential.certificate:type_name -> clouditor.ontology.v1.Certificate
	82,  // 165: clouditor.ontology.v1.Credential.key:type_name -> clouditor.ontology.v1.Key
	132, // 166: clouditor.ontology.v1.Credential.secret:type_name -> clouditor.ontology.v1.Secret
	53,  // 167: clouditor.ontology.v1.DocumentChecksum.errors:type_name -> clouditor.ontology.v1.Error
	47,  // 168: clouditor.ontology.v1.CryptographicOperation.decryption:type_name -> clouditor.ontology.v1.Decryption
	52,  // 169: clouditor.ontology.v1.CryptographicOperation.encryption:type_name -> clouditor.ontology.v1.Encryption
	67,  // 170: clouditor.ontology.v1.CryptographicOperation.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	63,  // 171: clouditor.ontology.v1.Data.generic_document:type_name -> clouditor.ontology.v1.GenericDocument
	118, // 172: clouditor.ontology.v1.Data.policy_document:type_name -> clouditor.ontology.v1.PolicyDocument
	133, // 173: clouditor.ontology.v1.Data.security_advisory_document:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument
	138, // 174: clouditor.ontology.v1.Data.service_metadata_document:type_name -> clouditor.ontology.v1.ServiceMetadataDocument
	96,  // 175: clouditor.ontology.v1.Data.machine_learning_dataset:type_name -> clouditor.ontology.v1.MachineLearningDataset
	97,  // 176: clouditor.ontology.v1.Data.machine_learning_model:type_name -> clouditor.ontology.v1.MachineLearningModel
	89,  // 177: clouditor.ontology.v1.DataLocation.local_data_location:type_name -> clouditor.ontology.v1.LocalDataLocation
	124, // 178: clouditor.ontology.v1.DataLocation.remote_data_location:type_name -> clouditor.ontology.v1.RemoteDataLocation
	25,  // 179: clouditor.ontology.v1.DatabaseConnect.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	42,  // 180: clouditor.ontology.v1.DatabaseOperation.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	44,  // 181: clouditor.ontology.v1.DatabaseOperation.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	25,  // 182: clouditor.ontology.v1.DatabaseQuery.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	50,  // 183: clouditor.ontology.v1.DatabaseService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 184: clouditor.ontology.v1.DatabaseService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 185: clouditor.ontology.v1.DatabaseService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 186: clouditor.ontology.v1.DatabaseService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	209, // 187: clouditor.ontology.v1.DatabaseStorage.creation_time:type_name -> google.protobuf.Timestamp
	167, // 188: clouditor.ontology.v1.DatabaseStorage.labels:type_name -> clouditor.ontology.v1.DatabaseStorage.LabelsEntry
	3,   // 189: clouditor.ontology.v1.DatabaseStorage.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	7,   // 190: clouditor.ontology.v1.DatabaseStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	15,  // 191: clouditor.ontology.v1.DatabaseStorage.backups:type_name -> clouditor.ontology.v1.Backup
	65,  // 192: clouditor.ontology.v1.DatabaseStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	77,  // 193: clouditor.ontology.v1.DatabaseStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	93,  // 194: clouditor.ontology.v1.DatabaseStorage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 195: clouditor.ontology.v1.DatabaseStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	127, // 196: clouditor.ontology.v1.DatabaseStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 197: clouditor.ontology.v1.DatabaseStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	25,  // 198: clouditor.ontology.v1.Decryption.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	209, // 199: clouditor.ontology.v1.DeviceProvisioningService.creation_time:type_name -> google.protobuf.Timestamp
	168, // 200: clouditor.ontology.v1.DeviceProvisioningService.labels:type_name -> clouditor.ontology.v1.DeviceProvisioningService.LabelsEntry
	65,  // 201: clouditor.ontology.v1.DeviceProvisioningService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 202: clouditor.ontology.v1.DeviceProvisioningService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 203: clouditor.ontology.v1.DeviceProvisioningService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 204: clouditor.ontology.v1.DeviceProvisioningService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	63,  // 205: clouditor.ontology.v1.Document.generic_document:type_name -> clouditor.ontology.v1.GenericDocument
	118, // 206: clouditor.ontology.v1.Document.policy_document:type_name -> clouditor.ontology.v1.PolicyDocument
	133, // 207: clouditor.ontology.v1.Document.security_advisory_document:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument
	138, // 208: clouditor.ontology.v1.Document.service_metadata_document:type_name -> clouditor.ontology.v1.ServiceMetadataDocument
	209, // 209: clouditor.ontology.v1.DocumentDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	169, // 210: clouditor.ontology.v1.DocumentDatabaseService.labels:type_name -> clouditor.ontology.v1.DocumentDatabaseService.LabelsEntry
	3,   // 211: clouditor.ontology.v1.DocumentDatabaseService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	4,   // 212: clouditor.ontology.v1.DocumentDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 213: clouditor.ontology.v1.DocumentDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 214: clouditor.ontology.v1.DocumentDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 215: clouditor.ontology.v1.DocumentDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 216: clouditor.ontology.v1.DocumentDatabaseService.loggings:type_name -> clouditor.ontology.v1.Logging
	99,  // 217: clouditor.ontology.v1.DocumentDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	120, // 218: clouditor.ontology.v1.DocumentDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 219: clouditor.ontology.v1.DocumentDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 220: clouditor.ontology.v1.DocumentDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	25,  // 221: clouditor.ontology.v1.Encryption.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	209, // 222: clouditor.ontology.v1.FileStorage.creation_time:type_name -> google.protobuf.Timestamp
	170, // 223: clouditor.ontology.v1.FileStorage.labels:type_name -> clouditor.ontology.v1.FileStorage.LabelsEntry
	3,   // 224: clouditor.ontology.v1.FileStorage.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	7,   // 225: clouditor.ontology.v1.FileStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	15,  // 226: clouditor.ontology.v1.FileStorage.backups:type_name -> clouditor.ontology.v1.Backup
	65,  // 227: clouditor.ontology.v1.FileStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	77,  // 228: clouditor.ontology.v1.FileStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	93,  // 229: clouditor.ontology.v1.FileStorage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 230: clouditor.ontology.v1.FileStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	127, // 231: clouditor.ontology.v1.FileStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 232: clouditor.ontology.v1.FileStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 233: clouditor.ontology.v1.FileStorageService.creation_time:type_name -> google.protobuf.Timestamp
	171, // 234: clouditor.ontology.v1.FileStorageService.labels:type_name -> clouditor.ontology.v1.FileStorageService.LabelsEntry
	3,   // 235: clouditor.ontology.v1.FileStorageService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	10,  // 236: clouditor.ontology.v1.FileStorageService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 237: clouditor.ontology.v1.FileStorageService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 238: clouditor.ontology.v1.FileStorageService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 239: clouditor.ontology.v1.FileStorageService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 240: clouditor.ontology.v1.FileStorageService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 241: clouditor.ontology.v1.FileStorageService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 242: clouditor.ontology.v1.FileStorageService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	85,  // 243: clouditor.ontology.v1.Firewall.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	154, // 244: clouditor.ontology.v1.Firewall.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	24,  // 245: clouditor.ontology.v1.Framework.cloud_sdk:type_name -> clouditor.ontology.v1.CloudSDK
	68,  // 246: clouditor.ontology.v1.Framework.http_client_library:type_name -> clouditor.ontology.v1.HttpClientLibrary
	72,  // 247: clouditor.ontology.v1.Framework.http_server:type_name -> clouditor.ontology.v1.HttpServer
	92,  // 248: clouditor.ontology.v1.Framework.logger:type_name -> clouditor.ontology.v1.Logger
	209, // 249: clouditor.ontology.v1.Function.creation_time:type_name -> google.protobuf.Timestamp
	172, // 250: clouditor.ontology.v1.Function.labels:type_name -> clouditor.ontology.v1.Function.LabelsEntry
	51,  // 251: clouditor.ontology.v1.Function.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	65,  // 252: clouditor.ontology.v1.Function.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 253: clouditor.ontology.v1.Function.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 254: clouditor.ontology.v1.Function.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	123, // 255: clouditor.ontology.v1.Function.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	127, // 256: clouditor.ontology.v1.Function.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 257: clouditor.ontology.v1.Function.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 258: clouditor.ontology.v1.FunctionService.creation_time:type_name -> google.protobuf.Timestamp
	173, // 259: clouditor.ontology.v1.FunctionService.labels:type_name -> clouditor.ontology.v1.FunctionService.LabelsEntry
	10,  // 260: clouditor.ontology.v1.FunctionService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 261: clouditor.ontology.v1.FunctionService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 262: clouditor.ontology.v1.FunctionService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 263: clouditor.ontology.v1.FunctionService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 264: clouditor.ontology.v1.FunctionService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 265: clouditor.ontology.v1.FunctionService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	22,  // 266: clouditor.ontology.v1.Functionality.cipher_suite:type_name -> clouditor.ontology.v1.CipherSuite
	25,  // 267: clouditor.ontology.v1.Functionality.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	89,  // 268: clouditor.ontology.v1.Functionality.local_data_location:type_name -> clouditor.ontology.v1.LocalDataLocation
	124, // 269: clouditor.ontology.v1.Functionality.remote_data_location:type_name -> clouditor.ontology.v1.RemoteDataLocation
	53,  // 270: clouditor.ontology.v1.Functionality.error:type_name -> clouditor.ontology.v1.Error
	69,  // 271: clouditor.ontology.v1.Functionality.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	71,  // 272: clouditor.ontology.v1.Functionality.http_request_handler:type_name -> clouditor.ontology.v1.HttpRequestHandler
	47,  // 273: clouditor.ontology.v1.Functionality.decryption:type_name -> clouditor.ontology.v1.Decryption
	52,  // 274: clouditor.ontology.v1.Functionality.encryption:type_name -> clouditor.ontology.v1.Encryption
	67,  // 275: clouditor.ontology.v1.Functionality.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	42,  // 276: clouditor.ontology.v1.Functionality.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	44,  // 277: clouditor.ontology.v1.Functionality.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	70,  // 278: clouditor.ontology.v1.Functionality.http_request:type_name -> clouditor.ontology.v1.HttpRequest
	91,  // 279: clouditor.ontology.v1.Functionality.log_operation:type_name -> clouditor.ontology.v1.LogOperation
	113, // 280: clouditor.ontology.v1.Functionality.object_storage_request:type_name -> clouditor.ontology.v1.ObjectStorageRequest
	131, // 281: clouditor.ontology.v1.Functionality.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	134, // 282: clouditor.ontology.v1.Functionality.security_advisory_feed:type_name -> clouditor.ontology.v1.SecurityAdvisoryFeed
	153, // 283: clouditor.ontology.v1.Functionality.vulnerability:type_name -> clouditor.ontology.v1.Vulnerability
	209, // 284: clouditor.ontology.v1.GenericDocument.creation_time:type_name -> google.protobuf.Timestamp
	174, // 285: clouditor.ontology.v1.GenericDocument.labels:type_name -> clouditor.ontology.v1.GenericDocument.LabelsEntry
	41,  // 286: clouditor.ontology.v1.GenericDocument.data_location:type_name -> clouditor.ontology.v1.DataLocation
	36,  // 287: clouditor.ontology.v1.GenericDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	139, // 288: clouditor.ontology.v1.GenericDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	131, // 289: clouditor.ontology.v1.GenericDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	136, // 290: clouditor.ontology.v1.GenericDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	209, // 291: clouditor.ontology.v1.GenericNetworkService.creation_time:type_name -> google.protobuf.Timestamp
	175, // 292: clouditor.ontology.v1.GenericNetworkService.labels:type_name -> clouditor.ontology.v1.GenericNetworkService.LabelsEntry
	10,  // 293: clouditor.ontology.v1.GenericNetworkService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 294: clouditor.ontology.v1.GenericNetworkService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 295: clouditor.ontology.v1.GenericNetworkService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 296: clouditor.ontology.v1.GenericNetworkService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 297: clouditor.ontology.v1.GenericNetworkService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 298: clouditor.ontology.v1.GenericNetworkService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	65,  // 299: clouditor.ontology.v1.GeoRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	25,  // 300: clouditor.ontology.v1.CryptographicHash.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	10,  // 301: clouditor.ontology.v1.HttpEndpoint.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	147, // 302: clouditor.ontology.v1.HttpEndpoint.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	25,  // 303: clouditor.ontology.v1.HttpRequest.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	69,  // 304: clouditor.ontology.v1.HttpRequest.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	69,  // 305: clouditor.ontology.v1.HttpRequestHandler.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	71,  // 306: clouditor.ontology.v1.HttpServer.http_request_handler:type_name -> clouditor.ontology.v1.HttpRequestHandler
	14,  // 307: clouditor.ontology.v1.HumanResources.awareness_training:type_name -> clouditor.ontology.v1.AwarenessTraining
	137, // 308: clouditor.ontology.v1.HumanResources.security_training:type_name -> clouditor.ontology.v1.SecurityTraining
	75,  // 309: clouditor.ontology.v1.Identifiable.identity:type_name -> clouditor.ontology.v1.Identity
	130, // 310: clouditor.ontology.v1.Identifiable.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	209, // 311: clouditor.ontology.v1.Identity.creation_time:type_name -> google.protobuf.Timestamp
	176, // 312: clouditor.ontology.v1.Identity.labels:type_name -> clouditor.ontology.v1.Identity.LabelsEntry
	209, // 313: clouditor.ontology.v1.Identity.last_activity:type_name -> google.protobuf.Timestamp
	10,  // 314: clouditor.ontology.v1.Identity.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	11,  // 315: clouditor.ontology.v1.Identity.authorization:type_name -> clouditor.ontology.v1.Authorization
	65,  // 316: clouditor.ontology.v1.Identity.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 317: clouditor.ontology.v1.Identity.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 318: clouditor.ontology.v1.Identity.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 319: clouditor.ontology.v1.Identity.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	31,  // 320: clouditor.ontology.v1.Image.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	149, // 321: clouditor.ontology.v1.Image.vm_image:type_name -> clouditor.ontology.v1.VMImage
	88,  // 322: clouditor.ontology.v1.Integrity.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	123, // 323: clouditor.ontology.v1.Integrity.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	12,  // 324: clouditor.ontology.v1.Integrity.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	36,  // 325: clouditor.ontology.v1.Integrity.document_checksum:type_name -> clouditor.ontology.v1.DocumentChecksum
	77,  // 326: clouditor.ontology.v1.Integrity.immutability:type_name -> clouditor.ontology.v1.Immutability
	139, // 327: clouditor.ontology.v1.Integrity.document_signature:type_name -> clouditor.ontology.v1.DocumentSignature
	48,  // 328: clouditor.ontology.v1.IoT.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	101, // 329: clouditor.ontology.v1.IoT.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	209, // 330: clouditor.ontology.v1.Job.creation_time:type_name -> google.protobuf.Timestamp
	177, // 331: clouditor.ontology.v1.Job.labels:type_name -> clouditor.ontology.v1.Job.LabelsEntry
	65,  // 332: clouditor.ontology.v1.Job.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 333: clouditor.ontology.v1.Job.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 334: clouditor.ontology.v1.Job.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 335: clouditor.ontology.v1.Job.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 336: clouditor.ontology.v1.Key.creation_time:type_name -> google.protobuf.Timestamp
	209, // 337: clouditor.ontology.v1.Key.expiration_date:type_name -> google.protobuf.Timestamp
	178, // 338: clouditor.ontology.v1.Key.labels:type_name -> clouditor.ontology.v1.Key.LabelsEntry
	209, // 339: clouditor.ontology.v1.Key.not_before_date:type_name -> google.protobuf.Timestamp
	65,  // 340: clouditor.ontology.v1.Key.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 341: clouditor.ontology.v1.Key.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 342: clouditor.ontology.v1.Key.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 343: clouditor.ontology.v1.Key.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 344: clouditor.ontology.v1.KeyValueDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	179, // 345: clouditor.ontology.v1.KeyValueDatabaseService.labels:type_name -> clouditor.ontology.v1.KeyValueDatabaseService.LabelsEntry
	3,   // 346: clouditor.ontology.v1.KeyValueDatabaseService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	4,   // 347: clouditor.ontology.v1.KeyValueDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 348: clouditor.ontology.v1.KeyValueDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 349: clouditor.ontology.v1.KeyValueDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 350: clouditor.ontology.v1.KeyValueDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 351: clouditor.ontology.v1.KeyValueDatabaseService.loggings:type_name -> clouditor.ontology.v1.Logging
	99,  // 352: clouditor.ontology.v1.KeyValueDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	120, // 353: clouditor.ontology.v1.KeyValueDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 354: clouditor.ontology.v1.KeyValueDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 355: clouditor.ontology.v1.KeyValueDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 356: clouditor.ontology.v1.KeyVault.creation_time:type_name -> google.protobuf.Timestamp
	180, // 357: clouditor.ontology.v1.KeyVault.labels:type_name -> clouditor.ontology.v1.KeyVault.LabelsEntry
	65,  // 358: clouditor.ontology.v1.KeyVault.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 359: clouditor.ontology.v1.KeyVault.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 360: clouditor.ontology.v1.KeyVault.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 361: clouditor.ontology.v1.KeyVault.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 362: clouditor.ontology.v1.Library.creation_time:type_name -> google.protobuf.Timestamp
	181, // 363: clouditor.ontology.v1.Library.labels:type_name -> clouditor.ontology.v1.Library.LabelsEntry
	62,  // 364: clouditor.ontology.v1.Library.functionalities:type_name -> clouditor.ontology.v1.Functionality
	153, // 365: clouditor.ontology.v1.Library.vulnerabilities:type_name -> clouditor.ontology.v1.Vulnerability
	209, // 366: clouditor.ontology.v1.LoadBalancer.creation_time:type_name -> google.protobuf.Timestamp
	182, // 367: clouditor.ontology.v1.LoadBalancer.labels:type_name -> clouditor.ontology.v1.LoadBalancer.LabelsEntry
	1,   // 368: clouditor.ontology.v1.LoadBalancer.access_restriction:type_name -> clouditor.ontology.v1.AccessRestriction
	10,  // 369: clouditor.ontology.v1.LoadBalancer.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 370: clouditor.ontology.v1.LoadBalancer.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 371: clouditor.ontology.v1.LoadBalancer.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 372: clouditor.ontology.v1.LoadBalancer.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 373: clouditor.ontology.v1.LoadBalancer.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 374: clouditor.ontology.v1.LoadBalancer.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 375: clouditor.ontology.v1.LoadBalancer.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	7,   // 376: clouditor.ontology.v1.LocalDataLocation.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	65,  // 377: clouditor.ontology.v1.LocalRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	25,  // 378: clouditor.ontology.v1.LogOperation.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	93,  // 379: clouditor.ontology.v1.LogOperation.logging:type_name -> clouditor.ontology.v1.Logging
	3,   // 380: clouditor.ontology.v1.Logging.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 381: clouditor.ontology.v1.Logging.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 382: clouditor.ontology.v1.Logging.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	110, // 383: clouditor.ontology.v1.Logging.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	127, // 384: clouditor.ontology.v1.Logging.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	209, // 385: clouditor.ontology.v1.LoggingService.creation_time:type_name -> google.protobuf.Timestamp
	183, // 386: clouditor.ontology.v1.LoggingService.labels:type_name -> clouditor.ontology.v1.LoggingService.LabelsEntry
	10,  // 387: clouditor.ontology.v1.LoggingService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 388: clouditor.ontology.v1.LoggingService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 389: clouditor.ontology.v1.LoggingService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 390: clouditor.ontology.v1.LoggingService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 391: clouditor.ontology.v1.LoggingService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 392: clouditor.ontology.v1.LoggingService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	96,  // 393: clouditor.ontology.v1.MachineLearning.machine_learning_dataset:type_name -> clouditor.ontology.v1.MachineLearningDataset
	97,  // 394: clouditor.ontology.v1.MachineLearning.machine_learning_model:type_name -> clouditor.ontology.v1.MachineLearningModel
	209, // 395: clouditor.ontology.v1.MachineLearningDataset.creation_time:type_name -> google.protobuf.Timestamp
	184, // 396: clouditor.ontology.v1.MachineLearningDataset.labels:type_name -> clouditor.ontology.v1.MachineLearningDataset.LabelsEntry
	41,  // 397: clouditor.ontology.v1.MachineLearningDataset.data_location:type_name -> clouditor.ontology.v1.DataLocation
	209, // 398: clouditor.ontology.v1.MachineLearningModel.creation_time:type_name -> google.protobuf.Timestamp
	185, // 399: clouditor.ontology.v1.MachineLearningModel.labels:type_name -> clouditor.ontology.v1.MachineLearningModel.LabelsEntry
	41,  // 400: clouditor.ontology.v1.MachineLearningModel.data_location:type_name -> clouditor.ontology.v1.DataLocation
	209, // 401: clouditor.ontology.v1.MachineLearningService.creation_time:type_name -> google.protobuf.Timestamp
	186, // 402: clouditor.ontology.v1.MachineLearningService.labels:type_name -> clouditor.ontology.v1.MachineLearningService.LabelsEntry
	10,  // 403: clouditor.ontology.v1.MachineLearningService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 404: clouditor.ontology.v1.MachineLearningService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 405: clouditor.ontology.v1.MachineLearningService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 406: clouditor.ontology.v1.MachineLearningService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 407: clouditor.ontology.v1.MachineLearningService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 408: clouditor.ontology.v1.MachineLearningService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	210, // 409: clouditor.ontology.v1.MalwareProtection.duration_since_active:type_name -> google.protobuf.Duration
	6,   // 410: clouditor.ontology.v1.MalwareProtection.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	209, // 411: clouditor.ontology.v1.MessagingHub.creation_time:type_name -> google.protobuf.Timestamp
	187, // 412: clouditor.ontology.v1.MessagingHub.labels:type_name -> clouditor.ontology.v1.MessagingHub.LabelsEntry
	65,  // 413: clouditor.ontology.v1.MessagingHub.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 414: clouditor.ontology.v1.MessagingHub.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 415: clouditor.ontology.v1.MessagingHub.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 416: clouditor.ontology.v1.MessagingHub.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	142, // 417: clouditor.ontology.v1.CodeModule.source_code_file:type_name -> clouditor.ontology.v1.SourceCodeFile
	10,  // 418: clouditor.ontology.v1.MultiFactorAuthentiation.authenticities:type_name -> clouditor.ontology.v1.Authenticity
	209, // 419: clouditor.ontology.v1.MultiModalDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	188, // 420: clouditor.ontology.v1.MultiModalDatabaseService.labels:type_name -> clouditor.ontology.v1.MultiModalDatabaseService.LabelsEntry
	3,   // 421: clouditor.ontology.v1.MultiModalDatabaseService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	4,   // 422: clouditor.ontology.v1.MultiModalDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 423: clouditor.ontology.v1.MultiModalDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 424: clouditor.ontology.v1.MultiModalDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 425: clouditor.ontology.v1.MultiModalDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 426: clouditor.ontology.v1.MultiModalDatabaseService.loggings:type_name -> clouditor.ontology.v1.Logging
	99,  // 427: clouditor.ontology.v1.MultiModalDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	120, // 428: clouditor.ontology.v1.MultiModalDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 429: clouditor.ontology.v1.MultiModalDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 430: clouditor.ontology.v1.MultiModalDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 431: clouditor.ontology.v1.NetworkInterface.creation_time:type_name -> google.protobuf.Timestamp
	189, // 432: clouditor.ontology.v1.NetworkInterface.labels:type_name -> clouditor.ontology.v1.NetworkInterface.LabelsEntry
	1,   // 433: clouditor.ontology.v1.NetworkInterface.access_restriction:type_name -> clouditor.ontology.v1.AccessRestriction
	65,  // 434: clouditor.ontology.v1.NetworkInterface.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 435: clouditor.ontology.v1.NetworkInterface.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 436: clouditor.ontology.v1.NetworkInterface.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 437: clouditor.ontology.v1.NetworkInterface.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 438: clouditor.ontology.v1.NetworkSecurityGroup.creation_time:type_name -> google.protobuf.Timestamp
	190, // 439: clouditor.ontology.v1.NetworkSecurityGroup.labels:type_name -> clouditor.ontology.v1.NetworkSecurityGroup.LabelsEntry
	65,  // 440: clouditor.ontology.v1.NetworkSecurityGroup.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 441: clouditor.ontology.v1.NetworkSecurityGroup.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 442: clouditor.ontology.v1.NetworkSecurityGroup.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 443: clouditor.ontology.v1.NetworkSecurityGroup.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	61,  // 444: clouditor.ontology.v1.NetworkService.function_service:type_name -> clouditor.ontology.v1.FunctionService
	64,  // 445: clouditor.ontology.v1.NetworkService.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	87,  // 446: clouditor.ontology.v1.NetworkService.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	94,  // 447: clouditor.ontology.v1.NetworkService.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	98,  // 448: clouditor.ontology.v1.NetworkService.machine_learning_service:type_name -> clouditor.ontology.v1.MachineLearningService
	135, // 449: clouditor.ontology.v1.NetworkService.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	50,  // 450: clouditor.ontology.v1.NetworkService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 451: clouditor.ontology.v1.NetworkService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 452: clouditor.ontology.v1.NetworkService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 453: clouditor.ontology.v1.NetworkService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	57,  // 454: clouditor.ontology.v1.NetworkService.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	114, // 455: clouditor.ontology.v1.NetworkService.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	105, // 456: clouditor.ontology.v1.Networking.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	106, // 457: clouditor.ontology.v1.Networking.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	61,  // 458: clouditor.ontology.v1.Networking.function_service:type_name -> clouditor.ontology.v1.FunctionService
	64,  // 459: clouditor.ontology.v1.Networking.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	87,  // 460: clouditor.ontology.v1.Networking.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	94,  // 461: clouditor.ontology.v1.Networking.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	98,  // 462: clouditor.ontology.v1.Networking.machine_learning_service:type_name -> clouditor.ontology.v1.MachineLearningService
	135, // 463: clouditor.ontology.v1.Networking.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	50,  // 464: clouditor.ontology.v1.Networking.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 465: clouditor.ontology.v1.Networking.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 466: clouditor.ontology.v1.Networking.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 467: clouditor.ontology.v1.Networking.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	57,  // 468: clouditor.ontology.v1.Networking.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	114, // 469: clouditor.ontology.v1.Networking.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	151, // 470: clouditor.ontology.v1.Networking.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	152, // 471: clouditor.ontology.v1.Networking.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	210, // 472: clouditor.ontology.v1.OSLogging.retention_period:type_name -> google.protobuf.Duration
	209, // 473: clouditor.ontology.v1.ObjectStorage.creation_time:type_name -> google.protobuf.Timestamp
	191, // 474: clouditor.ontology.v1.ObjectStorage.labels:type_name -> clouditor.ontology.v1.ObjectStorage.LabelsEntry
	3,   // 475: clouditor.ontology.v1.ObjectStorage.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	7,   // 476: clouditor.ontology.v1.ObjectStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	15,  // 477: clouditor.ontology.v1.ObjectStorage.backups:type_name -> clouditor.ontology.v1.Backup
	65,  // 478: clouditor.ontology.v1.ObjectStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	77,  // 479: clouditor.ontology.v1.ObjectStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	93,  // 480: clouditor.ontology.v1.ObjectStorage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 481: clouditor.ontology.v1.ObjectStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	127, // 482: clouditor.ontology.v1.ObjectStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 483: clouditor.ontology.v1.ObjectStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	25,  // 484: clouditor.ontology.v1.ObjectStorageRequest.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	209, // 485: clouditor.ontology.v1.ObjectStorageService.creation_time:type_name -> google.protobuf.Timestamp
	192, // 486: clouditor.ontology.v1.ObjectStorageService.labels:type_name -> clouditor.ontology.v1.ObjectStorageService.LabelsEntry
	3,   // 487: clouditor.ontology.v1.ObjectStorageService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	10,  // 488: clouditor.ontology.v1.ObjectStorageService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 489: clouditor.ontology.v1.ObjectStorageService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 490: clouditor.ontology.v1.ObjectStorageService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 491: clouditor.ontology.v1.ObjectStorageService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 492: clouditor.ontology.v1.ObjectStorageService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 493: clouditor.ontology.v1.ObjectStorageService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 494: clouditor.ontology.v1.ObjectStorageService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	47,  // 495: clouditor.ontology.v1.Operation.decryption:type_name -> clouditor.ontology.v1.Decryption
	52,  // 496: clouditor.ontology.v1.Operation.encryption:type_name -> clouditor.ontology.v1.Encryption
	67,  // 497: clouditor.ontology.v1.Operation.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	42,  // 498: clouditor.ontology.v1.Operation.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	44,  // 499: clouditor.ontology.v1.Operation.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	70,  // 500: clouditor.ontology.v1.Operation.http_request:type_name -> clouditor.ontology.v1.HttpRequest
	91,  // 501: clouditor.ontology.v1.Operation.log_operation:type_name -> clouditor.ontology.v1.LogOperation
	113, // 502: clouditor.ontology.v1.Operation.object_storage_request:type_name -> clouditor.ontology.v1.ObjectStorageRequest
	209, // 503: clouditor.ontology.v1.PasswordPolicy.creation_time:type_name -> google.protobuf.Timestamp
	193, // 504: clouditor.ontology.v1.PasswordPolicy.labels:type_name -> clouditor.ontology.v1.PasswordPolicy.LabelsEntry
	65,  // 505: clouditor.ontology.v1.PasswordPolicy.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 506: clouditor.ontology.v1.PasswordPolicy.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 507: clouditor.ontology.v1.PasswordPolicy.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 508: clouditor.ontology.v1.PasswordPolicy.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 509: clouditor.ontology.v1.PolicyDocument.creation_time:type_name -> google.protobuf.Timestamp
	194, // 510: clouditor.ontology.v1.PolicyDocument.labels:type_name -> clouditor.ontology.v1.PolicyDocument.LabelsEntry
	41,  // 511: clouditor.ontology.v1.PolicyDocument.data_location:type_name -> clouditor.ontology.v1.DataLocation
	36,  // 512: clouditor.ontology.v1.PolicyDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	139, // 513: clouditor.ontology.v1.PolicyDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	131, // 514: clouditor.ontology.v1.PolicyDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	136, // 515: clouditor.ontology.v1.PolicyDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	66,  // 516: clouditor.ontology.v1.Redundancy.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	90,  // 517: clouditor.ontology.v1.Redundancy.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	156, // 518: clouditor.ontology.v1.Redundancy.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	209, // 519: clouditor.ontology.v1.RelationalDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	195, // 520: clouditor.ontology.v1.RelationalDatabaseService.labels:type_name -> clouditor.ontology.v1.RelationalDatabaseService.LabelsEntry
	3,   // 521: clouditor.ontology.v1.RelationalDatabaseService.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	4,   // 522: clouditor.ontology.v1.RelationalDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 523: clouditor.ontology.v1.RelationalDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 524: clouditor.ontology.v1.RelationalDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	69,  // 525: clouditor.ontology.v1.RelationalDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	93,  // 526: clouditor.ontology.v1.RelationalDatabaseService.loggings:type_name -> clouditor.ontology.v1.Logging
	99,  // 527: clouditor.ontology.v1.RelationalDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	120, // 528: clouditor.ontology.v1.RelationalDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	147, // 529: clouditor.ontology.v1.RelationalDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 530: clouditor.ontology.v1.RelationalDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	55,  // 531: clouditor.ontology.v1.Reliability.explainable_results:type_name -> clouditor.ontology.v1.ExplainableResults
	129, // 532: clouditor.ontology.v1.Reliability.robustness_score:type_name -> clouditor.ontology.v1.RobustnessScore
	209, // 533: clouditor.ontology.v1.RemoteAttestation.creation_time:type_name -> google.protobuf.Timestamp
	10,  // 534: clouditor.ontology.v1.RemoteDataLocation.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	147, // 535: clouditor.ontology.v1.RemoteDataLocation.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	2,   // 536: clouditor.ontology.v1.Resource.account:type_name -> clouditor.ontology.v1.Account
	80,  // 537: clouditor.ontology.v1.Resource.job:type_name -> clouditor.ontology.v1.Job
	155, // 538: clouditor.ontology.v1.Resource.workflow:type_name -> clouditor.ontology.v1.Workflow
	26,  // 539: clouditor.ontology.v1.Resource.code_repository:type_name -> clouditor.ontology.v1.CodeRepository
	30,  // 540: clouditor.ontology.v1.Resource.container:type_name -> clouditor.ontology.v1.Container
	60,  // 541: clouditor.ontology.v1.Resource.function:type_name -> clouditor.ontology.v1.Function
	150, // 542: clouditor.ontology.v1.Resource.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	32,  // 543: clouditor.ontology.v1.Resource.container_orchestration:type_name -> clouditor.ontology.v1.ContainerOrchestration
	33,  // 544: clouditor.ontology.v1.Resource.container_registry:type_name -> clouditor.ontology.v1.ContainerRegistry
	19,  // 545: clouditor.ontology.v1.Resource.certificate:type_name -> clouditor.ontology.v1.Certificate
	82,  // 546: clouditor.ontology.v1.Resource.key:type_name -> clouditor.ontology.v1.Key
	132, // 547: clouditor.ontology.v1.Resource.secret:type_name -> clouditor.ontology.v1.Secret
	75,  // 548: clouditor.ontology.v1.Resource.identity:type_name -> clouditor.ontology.v1.Identity
	130, // 549: clouditor.ontology.v1.Resource.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	31,  // 550: clouditor.ontology.v1.Resource.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	149, // 551: clouditor.ontology.v1.Resource.vm_image:type_name -> clouditor.ontology.v1.VMImage
	48,  // 552: clouditor.ontology.v1.Resource.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	101, // 553: clouditor.ontology.v1.Resource.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	84,  // 554: clouditor.ontology.v1.Resource.key_vault:type_name -> clouditor.ontology.v1.KeyVault
	105, // 555: clouditor.ontology.v1.Resource.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	106, // 556: clouditor.ontology.v1.Resource.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	61,  // 557: clouditor.ontology.v1.Resource.function_service:type_name -> clouditor.ontology.v1.FunctionService
	64,  // 558: clouditor.ontology.v1.Resource.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	87,  // 559: clouditor.ontology.v1.Resource.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	94,  // 560: clouditor.ontology.v1.Resource.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	98,  // 561: clouditor.ontology.v1.Resource.machine_learning_service:type_name -> clouditor.ontology.v1.MachineLearningService
	135, // 562: clouditor.ontology.v1.Resource.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	50,  // 563: clouditor.ontology.v1.Resource.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 564: clouditor.ontology.v1.Resource.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 565: clouditor.ontology.v1.Resource.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 566: clouditor.ontology.v1.Resource.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	57,  // 567: clouditor.ontology.v1.Resource.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	114, // 568: clouditor.ontology.v1.Resource.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	151, // 569: clouditor.ontology.v1.Resource.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	152, // 570: clouditor.ontology.v1.Resource.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	117, // 571: clouditor.ontology.v1.Resource.password_policy:type_name -> clouditor.ontology.v1.PasswordPolicy
	126, // 572: clouditor.ontology.v1.Resource.resource_group:type_name -> clouditor.ontology.v1.ResourceGroup
	16,  // 573: clouditor.ontology.v1.Resource.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	46,  // 574: clouditor.ontology.v1.Resource.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	56,  // 575: clouditor.ontology.v1.Resource.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	112, // 576: clouditor.ontology.v1.Resource.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	63,  // 577: clouditor.ontology.v1.Resource.generic_document:type_name -> clouditor.ontology.v1.GenericDocument
	118, // 578: clouditor.ontology.v1.Resource.policy_document:type_name -> clouditor.ontology.v1.PolicyDocument
	133, // 579: clouditor.ontology.v1.Resource.security_advisory_document:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument
	138, // 580: clouditor.ontology.v1.Resource.service_metadata_document:type_name -> clouditor.ontology.v1.ServiceMetadataDocument
	96,  // 581: clouditor.ontology.v1.Resource.machine_learning_dataset:type_name -> clouditor.ontology.v1.MachineLearningDataset
	97,  // 582: clouditor.ontology.v1.Resource.machine_learning_model:type_name -> clouditor.ontology.v1.MachineLearningModel
	14,  // 583: clouditor.ontology.v1.Resource.awareness_training:type_name -> clouditor.ontology.v1.AwarenessTraining
	137, // 584: clouditor.ontology.v1.Resource.security_training:type_name -> clouditor.ontology.v1.SecurityTraining
	5,   // 585: clouditor.ontology.v1.Resource.application:type_name -> clouditor.ontology.v1.Application
	86,  // 586: clouditor.ontology.v1.Resource.library:type_name -> clouditor.ontology.v1.Library
	142, // 587: clouditor.ontology.v1.Resource.source_code_file:type_name -> clouditor.ontology.v1.SourceCodeFile
	209, // 588: clouditor.ontology.v1.ResourceGroup.creation_time:type_name -> google.protobuf.Timestamp
	196, // 589: clouditor.ontology.v1.ResourceGroup.labels:type_name -> clouditor.ontology.v1.ResourceGroup.LabelsEntry
	65,  // 590: clouditor.ontology.v1.ResourceGroup.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 591: clouditor.ontology.v1.ResourceGroup.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 592: clouditor.ontology.v1.ResourceGroup.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 593: clouditor.ontology.v1.ResourceGroup.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	210, // 594: clouditor.ontology.v1.ResourceLogging.retention_period:type_name -> google.protobuf.Duration
	209, // 595: clouditor.ontology.v1.RoleAssignment.creation_time:type_name -> google.protobuf.Timestamp
	197, // 596: clouditor.ontology.v1.RoleAssignment.labels:type_name -> clouditor.ontology.v1.RoleAssignment.LabelsEntry
	10,  // 597: clouditor.ontology.v1.RoleAssignment.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	11,  // 598: clouditor.ontology.v1.RoleAssignment.authorization:type_name -> clouditor.ontology.v1.Authorization
	65,  // 599: clouditor.ontology.v1.RoleAssignment.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 600: clouditor.ontology.v1.RoleAssignment.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 601: clouditor.ontology.v1.RoleAssignment.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 602: clouditor.ontology.v1.RoleAssignment.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	53,  // 603: clouditor.ontology.v1.SchemaValidation.errors:type_name -> clouditor.ontology.v1.Error
	209, // 604: clouditor.ontology.v1.Secret.creation_time:type_name -> google.protobuf.Timestamp
	209, // 605: clouditor.ontology.v1.Secret.expiration_date:type_name -> google.protobuf.Timestamp
	198, // 606: clouditor.ontology.v1.Secret.labels:type_name -> clouditor.ontology.v1.Secret.LabelsEntry
	209, // 607: clouditor.ontology.v1.Secret.not_before_date:type_name -> google.protobuf.Timestamp
	65,  // 608: clouditor.ontology.v1.Secret.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 609: clouditor.ontology.v1.Secret.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 610: clouditor.ontology.v1.Secret.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 611: clouditor.ontology.v1.Secret.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 612: clouditor.ontology.v1.SecurityAdvisoryDocument.creation_time:type_name -> google.protobuf.Timestamp
	199, // 613: clouditor.ontology.v1.SecurityAdvisoryDocument.labels:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument.LabelsEntry
	41,  // 614: clouditor.ontology.v1.SecurityAdvisoryDocument.data_location:type_name -> clouditor.ontology.v1.DataLocation
	36,  // 615: clouditor.ontology.v1.SecurityAdvisoryDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	139, // 616: clouditor.ontology.v1.SecurityAdvisoryDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	131, // 617: clouditor.ontology.v1.SecurityAdvisoryDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	136, // 618: clouditor.ontology.v1.SecurityAdvisoryDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	153, // 619: clouditor.ontology.v1.SecurityAdvisoryDocument.vulnerabilities:type_name -> clouditor.ontology.v1.Vulnerability
	209, // 620: clouditor.ontology.v1.SecurityAdvisoryService.creation_time:type_name -> google.protobuf.Timestamp
	200, // 621: clouditor.ontology.v1.SecurityAdvisoryService.labels:type_name -> clouditor.ontology.v1.SecurityAdvisoryService.LabelsEntry
	10,  // 622: clouditor.ontology.v1.SecurityAdvisoryService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	65,  // 623: clouditor.ontology.v1.SecurityAdvisoryService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 624: clouditor.ontology.v1.SecurityAdvisoryService.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 625: clouditor.ontology.v1.SecurityAdvisoryService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	134, // 626: clouditor.ontology.v1.SecurityAdvisoryService.security_advisory_feeds:type_name -> clouditor.ontology.v1.SecurityAdvisoryFeed
	147, // 627: clouditor.ontology.v1.SecurityAdvisoryService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	148, // 628: clouditor.ontology.v1.SecurityAdvisoryService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	4,   // 629: clouditor.ontology.v1.SecurityFeature.anomaly_detection:type_name -> clouditor.ontology.v1.AnomalyDetection
	3,   // 630: clouditor.ontology.v1.SecurityFeature.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 631: clouditor.ontology.v1.SecurityFeature.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 632: clouditor.ontology.v1.SecurityFeature.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	110, // 633: clouditor.ontology.v1.SecurityFeature.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	127, // 634: clouditor.ontology.v1.SecurityFeature.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	99,  // 635: clouditor.ontology.v1.SecurityFeature.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	148, // 636: clouditor.ontology.v1.SecurityFeature.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	20,  // 637: clouditor.ontology.v1.SecurityFeature.certificate_based_authentication:type_name -> clouditor.ontology.v1.CertificateBasedAuthentication
	81,  // 638: clouditor.ontology.v1.SecurityFeature.token_based_authentication:type_name -> clouditor.ontology.v1.TokenBasedAuthentication
	103, // 639: clouditor.ontology.v1.SecurityFeature.multi_factor_authentiation:type_name -> clouditor.ontology.v1.MultiFactorAuthentiation
	109, // 640: clouditor.ontology.v1.SecurityFeature.no_authentication:type_name -> clouditor.ontology.v1.NoAuthentication
	111, // 641: clouditor.ontology.v1.SecurityFeature.otp_based_authentication:type_name -> clouditor.ontology.v1.OTPBasedAuthentication
	116, // 642: clouditor.ontology.v1.SecurityFeature.password_based_authentication:type_name -> clouditor.ontology.v1.PasswordBasedAuthentication
	140, // 643: clouditor.ontology.v1.SecurityFeature.single_sign_on:type_name -> clouditor.ontology.v1.SingleSignOn
	0,   // 644: clouditor.ontology.v1.SecurityFeature.abac:type_name -> clouditor.ontology.v1.ABAC
	85,  // 645: clouditor.ontology.v1.SecurityFeature.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	154, // 646: clouditor.ontology.v1.SecurityFeature.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	119, // 647: clouditor.ontology.v1.SecurityFeature.rbac:type_name -> clouditor.ontology.v1.RBAC
	15,  // 648: clouditor.ontology.v1.SecurityFeature.backup:type_name -> clouditor.ontology.v1.Backup
	39,  // 649: clouditor.ontology.v1.SecurityFeature.d_do_s_protection:type_name -> clouditor.ontology.v1.DDoSProtection
	65,  // 650: clouditor.ontology.v1.SecurityFeature.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	66,  // 651: clouditor.ontology.v1.SecurityFeature.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	90,  // 652: clouditor.ontology.v1.SecurityFeature.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	156, // 653: clouditor.ontology.v1.SecurityFeature.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	38,  // 654: clouditor.ontology.v1.SecurityFeature.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	100, // 655: clouditor.ontology.v1.SecurityFeature.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	51,  // 656: clouditor.ontology.v1.SecurityFeature.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	147, // 657: clouditor.ontology.v1.SecurityFeature.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	88,  // 658: clouditor.ontology.v1.SecurityFeature.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	123, // 659: clouditor.ontology.v1.SecurityFeature.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	12,  // 660: clouditor.ontology.v1.SecurityFeature.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	36,  // 661: clouditor.ontology.v1.SecurityFeature.document_checksum:type_name -> clouditor.ontology.v1.DocumentChecksum
	77,  // 662: clouditor.ontology.v1.SecurityFeature.immutability:type_name -> clouditor.ontology.v1.Immutability
	139, // 663: clouditor.ontology.v1.SecurityFeature.document_signature:type_name -> clouditor.ontology.v1.DocumentSignature
	55,  // 664: clouditor.ontology.v1.SecurityFeature.explainable_results:type_name -> clouditor.ontology.v1.ExplainableResults
	129, // 665: clouditor.ontology.v1.SecurityFeature.robustness_score:type_name -> clouditor.ontology.v1.RobustnessScore
	209, // 666: clouditor.ontology.v1.SecurityTraining.creation_time:type_name -> google.protobuf.Timestamp
	201, // 667: clouditor.ontology.v1.SecurityTraining.labels:type_name -> clouditor.ontology.v1.SecurityTraining.LabelsEntry
	209, // 668: clouditor.ontology.v1.ServiceMetadataDocument.creation_time:type_name -> google.protobuf.Timestamp
	202, // 669: clouditor.ontology.v1.ServiceMetadataDocument.labels:type_name -> clouditor.ontology.v1.ServiceMetadataDocument.LabelsEntry
	41,  // 670: clouditor.ontology.v1.ServiceMetadataDocument.data_location:type_name -> clouditor.ontology.v1.DataLocation
	36,  // 671: clouditor.ontology.v1.ServiceMetadataDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	139, // 672: clouditor.ontology.v1.ServiceMetadataDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	131, // 673: clouditor.ontology.v1.ServiceMetadataDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	136, // 674: clouditor.ontology.v1.ServiceMetadataDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	53,  // 675: clouditor.ontology.v1.DocumentSignature.errors:type_name -> clouditor.ontology.v1.Error
	5,   // 676: clouditor.ontology.v1.Code.application:type_name -> clouditor.ontology.v1.Application
	86,  // 677: clouditor.ontology.v1.Code.library:type_name -> clouditor.ontology.v1.Library
	142, // 678: clouditor.ontology.v1.Code.source_code_file:type_name -> clouditor.ontology.v1.SourceCodeFile
	209, // 679: clouditor.ontology.v1.SourceCodeFile.creation_time:type_name -> google.protobuf.Timestamp
	203, // 680: clouditor.ontology.v1.SourceCodeFile.labels:type_name -> clouditor.ontology.v1.SourceCodeFile.LabelsEntry
	62,  // 681: clouditor.ontology.v1.SourceCodeFile.functionalities:type_name -> clouditor.ontology.v1.Functionality
	16,  // 682: clouditor.ontology.v1.Storage.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	46,  // 683: clouditor.ontology.v1.Storage.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	56,  // 684: clouditor.ontology.v1.Storage.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	112, // 685: clouditor.ontology.v1.Storage.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	50,  // 686: clouditor.ontology.v1.StorageService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	83,  // 687: clouditor.ontology.v1.StorageService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	104, // 688: clouditor.ontology.v1.StorageService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	121, // 689: clouditor.ontology.v1.StorageService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	57,  // 690: clouditor.ontology.v1.StorageService.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	114, // 691: clouditor.ontology.v1.StorageService.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	14,  // 692: clouditor.ontology.v1.Training.awareness_training:type_name -> clouditor.ontology.v1.AwarenessTraining
	137, // 693: clouditor.ontology.v1.Training.security_training:type_name -> clouditor.ontology.v1.SecurityTraining
	22,  // 694: clouditor.ontology.v1.TransportEncryption.cipher_suites:type_name -> clouditor.ontology.v1.CipherSuite
	209, // 695: clouditor.ontology.v1.VMImage.creation_time:type_name -> google.protobuf.Timestamp
	204, // 696: clouditor.ontology.v1.VMImage.labels:type_name -> clouditor.ontology.v1.VMImage.LabelsEntry
	65,  // 697: clouditor.ontology.v1.VMImage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 698: clouditor.ontology.v1.VMImage.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 699: clouditor.ontology.v1.VMImage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 700: clouditor.ontology.v1.VMImage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 701: clouditor.ontology.v1.VirtualMachine.creation_time:type_name -> google.protobuf.Timestamp
	205, // 702: clouditor.ontology.v1.VirtualMachine.labels:type_name -> clouditor.ontology.v1.VirtualMachine.LabelsEntry
	3,   // 703: clouditor.ontology.v1.VirtualMachine.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	12,  // 704: clouditor.ontology.v1.VirtualMachine.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	17,  // 705: clouditor.ontology.v1.VirtualMachine.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	51,  // 706: clouditor.ontology.v1.VirtualMachine.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	65,  // 707: clouditor.ontology.v1.VirtualMachine.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 708: clouditor.ontology.v1.VirtualMachine.loggings:type_name -> clouditor.ontology.v1.Logging
	99,  // 709: clouditor.ontology.v1.VirtualMachine.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	110, // 710: clouditor.ontology.v1.VirtualMachine.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	120, // 711: clouditor.ontology.v1.VirtualMachine.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	123, // 712: clouditor.ontology.v1.VirtualMachine.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	127, // 713: clouditor.ontology.v1.VirtualMachine.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	148, // 714: clouditor.ontology.v1.VirtualMachine.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 715: clouditor.ontology.v1.VirtualNetwork.creation_time:type_name -> google.protobuf.Timestamp
	206, // 716: clouditor.ontology.v1.VirtualNetwork.labels:type_name -> clouditor.ontology.v1.VirtualNetwork.LabelsEntry
	65,  // 717: clouditor.ontology.v1.VirtualNetwork.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 718: clouditor.ontology.v1.VirtualNetwork.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 719: clouditor.ontology.v1.VirtualNetwork.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 720: clouditor.ontology.v1.VirtualNetwork.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 721: clouditor.ontology.v1.VirtualSubNetwork.creation_time:type_name -> google.protobuf.Timestamp
	207, // 722: clouditor.ontology.v1.VirtualSubNetwork.labels:type_name -> clouditor.ontology.v1.VirtualSubNetwork.LabelsEntry
	65,  // 723: clouditor.ontology.v1.VirtualSubNetwork.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 724: clouditor.ontology.v1.VirtualSubNetwork.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 725: clouditor.ontology.v1.VirtualSubNetwork.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 726: clouditor.ontology.v1.VirtualSubNetwork.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	209, // 727: clouditor.ontology.v1.Workflow.creation_time:type_name -> google.protobuf.Timestamp
	208, // 728: clouditor.ontology.v1.Workflow.labels:type_name -> clouditor.ontology.v1.Workflow.LabelsEntry
	65,  // 729: clouditor.ontology.v1.Workflow.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	93,  // 730: clouditor.ontology.v1.Workflow.loggings:type_name -> clouditor.ontology.v1.Logging
	120, // 731: clouditor.ontology.v1.Workflow.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	148, // 732: clouditor.ontology.v1.Workflow.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	65,  // 733: clouditor.ontology.v1.ZoneRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	211, // 734: clouditor.ontology.v1.resource_type_names:extendee -> google.protobuf.MessageOptions
	735, // [735:735] is the sub-list for method output_type
	735, // [735:735] is the sub-list for method input_type
	735, // [735:735] is the sub-list for extension type_name
	734, // [734:735] is the sub-list for extension extendee
	0,   // [0:734] is the sub-list for field type_name
}

func init() { file_api_ontology_ontology_proto_init() }
func file_api_ontology_ontology_proto_init() {
	if File_api_ontology_ontology_proto != nil {
		return
	}
	file_api_ontology_ontology_proto_msgTypes[1].OneofWrappers = []any{
		(*AccessRestriction_L3Firewall)(nil),
		(*AccessRestriction_WebApplicationFirewall)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[2].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[5].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[7].OneofWrappers = []any{
		(*AtRestEncryption_CustomerKeyEncryption)(nil),
		(*AtRestEncryption_ManagedKeyEncryption)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[8].OneofWrappers = []any{
		(*Attestation_LocalAttestation)(nil),
		(*Attestation_RemoteAttestation)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[9].OneofWrappers = []any{
		(*Auditing_AnomalyDetection)(nil),
		(*Auditing_ActivityLogging)(nil),
		(*Auditing_ApplicationLogging)(nil),
		(*Auditing_BootLogging)(nil),
		(*Auditing_OsLogging)(nil),
		(*Auditing_ResourceLogging)(nil),
		(*Auditing_MalwareProtection)(nil),
		(*Auditing_UsageStatistics)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[10].OneofWrappers = []any{
		(*Authenticity_CertificateBasedAuthentication)(nil),
		(*Authenticity_TokenBasedAuthentication)(nil),
		(*Authenticity_MultiFactorAuthentiation)(nil),
		(*Authenticity_NoAuthentication)(nil),
		(*Authenticity_OtpBasedAuthentication)(nil),
		(*Authenticity_PasswordBasedAuthentication)(nil),
		(*Authenticity_SingleSignOn)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[11].OneofWrappers = []any{
		(*Authorization_Abac)(nil),
		(*Authorization_L3Firewall)(nil),
		(*Authorization_WebApplicationFirewall)(nil),
		(*Authorization_Rbac)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[13].OneofWrappers = []any{
		(*Availability_Backup)(nil),
		(*Availability_DDoSProtection)(nil),
		(*Availability_GeoLocation)(nil),
		(*Availability_GeoRedundancy)(nil),
		(*Availability_LocalRedundancy)(nil),
		(*Availability_ZoneRedundancy)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[14].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[15].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[16].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[18].OneofWrappers = []any{
		(*CICDService_Job)(nil),
		(*CICDService_Workflow)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[19].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[23].OneofWrappers = []any{
		(*Infrastructure_Account)(nil),
		(*Infrastructure_Job)(nil),
		(*Infrastructure_Workflow)(nil),
		(*Infrastructure_CodeRepository)(nil),
		(*Infrastructure_Container)(nil),
		(*Infrastructure_Function)(nil),
		(*Infrastructure_VirtualMachine)(nil),
		(*Infrastructure_ContainerOrchestration)(nil),
		(*Infrastructure_ContainerRegistry)(nil),
		(*Infrastructure_Certificate)(nil),
		(*Infrastructure_Key)(nil),
		(*Infrastructure_Secret)(nil),
		(*Infrastructure_Identity)(nil),
		(*Infrastructure_RoleAssignment)(nil),
		(*Infrastructure_ContainerImage)(nil),
		(*Infrastructure_VmImage)(nil),
		(*Infrastructure_DeviceProvisioningService)(nil),
		(*Infrastructure_MessagingHub)(nil),
		(*Infrastructure_KeyVault)(nil),
		(*Infrastructure_NetworkInterface)(nil),
		(*Infrastructure_NetworkSecurityGroup)(nil),
		(*Infrastructure_FunctionService)(nil),
		(*Infrastructure_GenericNetworkService)(nil),
		(*Infrastructure_LoadBalancer)(nil),
		(*Infrastructure_LoggingService)(nil),
		(*Infrastructure_MachineLearningService)(nil),
		(*Infrastructure_SecurityAdvisoryService)(nil),
		(*Infrastructure_DocumentDatabaseService)(nil),
		(*Infrastructure_KeyValueDatabaseService)(nil),
		(*Infrastructure_MultiModalDatabaseService)(nil),
		(*Infrastructure_RelationalDatabaseService)(nil),
		(*Infrastructure_FileStorageService)(nil),
		(*Infrastructure_ObjectStorageService)(nil),
		(*Infrastructure_VirtualNetwork)(nil),
		(*Infrastructure_VirtualSubNetwork)(nil),
		(*Infrastructure_PasswordPolicy)(nil),
		(*Infrastructure_ResourceGroup)(nil),
		(*Infrastructure_BlockStorage)(nil),
		(*Infrastructure_DatabaseStorage)(nil),
		(*Infrastructure_FileStorage)(nil),
		(*Infrastructure_ObjectStorage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[26].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[27].OneofWrappers = []any{
		(*Component_Application)(nil),
		(*Component_Library)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[28].OneofWrappers = []any{
		(*Compute_Container)(nil),
		(*Compute_Function)(nil),
		(*Compute_VirtualMachine)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[29].OneofWrappers = []any{
		(*Confidentiality_CustomerKeyEncryption)(nil),
		(*Confidentiality_ManagedKeyEncryption)(nil),
		(*Confidentiality_EncryptionInUse)(nil),
		(*Confidentiality_TransportEncryption)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[30].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[31].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[32].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[33].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[34].OneofWrappers = []any{
		(*Core_CertificationTarget)(nil),
		(*Core_Evidence)(nil),
		(*Core_CloudSdk)(nil),
		(*Core_HttpClientLibrary)(nil),
		(*Core_HttpServer)(nil),
		(*Core_Logger)(nil),
		(*Core_ResourceType)(nil),
		(*Core_Tool)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[35].OneofWrappers = []any{
		(*Credential_Certificate)(nil),
		(*Credential_Key)(nil),
		(*Credential_Secret)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[37].OneofWrappers = []any{
		(*CryptographicOperation_Decryption)(nil),
		(*CryptographicOperation_Encryption)(nil),
		(*CryptographicOperation_CryptographicHash)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[40].OneofWrappers = []any{
		(*Data_GenericDocument)(nil),
		(*Data_PolicyDocument)(nil),
		(*Data_SecurityAdvisoryDocument)(nil),
		(*Data_ServiceMetadataDocument)(nil),
		(*Data_MachineLearningDataset)(nil),
		(*Data_MachineLearningModel)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[41].OneofWrappers = []any{
		(*DataLocation_LocalDataLocation)(nil),
		(*DataLocation_RemoteDataLocation)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[42].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[43].OneofWrappers = []any{
		(*DatabaseOperation_DatabaseConnect)(nil),
		(*DatabaseOperation_DatabaseQuery)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[44].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[45].OneofWrappers = []any{
		(*DatabaseService_DocumentDatabaseService)(nil),
		(*DatabaseService_KeyValueDatabaseService)(nil),
		(*DatabaseService_MultiModalDatabaseService)(nil),
		(*DatabaseService_RelationalDatabaseService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[46].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[48].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[49].OneofWrappers = []any{
		(*Document_GenericDocument)(nil),
		(*Document_PolicyDocument)(nil),
		(*Document_SecurityAdvisoryDocument)(nil),
		(*Document_ServiceMetadataDocument)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[50].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[56].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[57].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[58].OneofWrappers = []any{
		(*Firewall_L3Firewall)(nil),
		(*Firewall_WebApplicationFirewall)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[59].OneofWrappers = []any{
		(*Framework_CloudSdk)(nil),
		(*Framework_HttpClientLibrary)(nil),
		(*Framework_HttpServer)(nil),
		(*Framework_Logger)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[60].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[61].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[62].OneofWrappers = []any{
		(*Functionality_CipherSuite)(nil),
		(*Functionality_CodeRegion)(nil),
		(*Functionality_LocalDataLocation)(nil),
		(*Functionality_RemoteDataLocation)(nil),
		(*Functionality_Error)(nil),
		(*Functionality_HttpEndpoint)(nil),
		(*Functionality_HttpRequestHandler)(nil),
		(*Functionality_Decryption)(nil),
		(*Functionality_Encryption)(nil),
		(*Functionality_CryptographicHash)(nil),
		(*Functionality_DatabaseConnect)(nil),
		(*Functionality_DatabaseQuery)(nil),
		(*Functionality_HttpRequest)(nil),
		(*Functionality_LogOperation)(nil),
		(*Functionality_ObjectStorageRequest)(nil),
		(*Functionality_SchemaValidation)(nil),
		(*Functionality_SecurityAdvisoryFeed)(nil),
		(*Functionality_Vulnerability)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[63].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[64].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[71].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[73].OneofWrappers = []any{
		(*HumanResources_AwarenessTraining)(nil),
		(*HumanResources_SecurityTraining)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[74].OneofWrappers = []any{
		(*Identifiable_Identity)(nil),
		(*Identifiable_RoleAssignment)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[75].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[76].OneofWrappers = []any{
		(*Image_ContainerImage)(nil),
		(*Image_VmImage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[78].OneofWrappers = []any{
		(*Integrity_LocalAttestation)(nil),
		(*Integrity_RemoteAttestation)(nil),
		(*Integrity_AutomaticUpdates)(nil),
		(*Integrity_DocumentChecksum)(nil),
		(*Integrity_Immutability)(nil),
		(*Integrity_DocumentSignature)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[79].OneofWrappers = []any{
		(*IoT_DeviceProvisioningService)(nil),
		(*IoT_MessagingHub)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[80].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[82].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[83].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[84].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[86].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[87].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[89].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[93].OneofWrappers = []any{
		(*Logging_ActivityLogging)(nil),
		(*Logging_ApplicationLogging)(nil),
		(*Logging_BootLogging)(nil),
		(*Logging_OsLogging)(nil),
		(*Logging_ResourceLogging)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[94].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[95].OneofWrappers = []any{
		(*MachineLearning_MachineLearningDataset)(nil),
		(*MachineLearning_MachineLearningModel)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[96].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[97].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[98].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[101].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[102].OneofWrappers = []any{
		(*CodeModule_SourceCodeFile)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[104].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[105].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[106].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[107].OneofWrappers = []any{
		(*NetworkService_FunctionService)(nil),
		(*NetworkService_GenericNetworkService)(nil),
		(*NetworkService_LoadBalancer)(nil),
		(*NetworkService_LoggingService)(nil),
		(*NetworkService_MachineLearningService)(nil),
		(*NetworkService_SecurityAdvisoryService)(nil),
		(*NetworkService_DocumentDatabaseService)(nil),
		(*NetworkService_KeyValueDatabaseService)(nil),
		(*NetworkService_MultiModalDatabaseService)(nil),
		(*NetworkService_RelationalDatabaseService)(nil),
		(*NetworkService_FileStorageService)(nil),
		(*NetworkService_ObjectStorageService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[108].OneofWrappers = []any{
		(*Networking_NetworkInterface)(nil),
		(*Networking_NetworkSecurityGroup)(nil),
		(*Networking_FunctionService)(nil),
		(*Networking_GenericNetworkService)(nil),
		(*Networking_LoadBalancer)(nil),
		(*Networking_LoggingService)(nil),
		(*Networking_MachineLearningService)(nil),
		(*Networking_SecurityAdvisoryService)(nil),
		(*Networking_DocumentDatabaseService)(nil),
		(*Networking_KeyValueDatabaseService)(nil),
		(*Networking_MultiModalDatabaseService)(nil),
		(*Networking_RelationalDatabaseService)(nil),
		(*Networking_FileStorageService)(nil),
		(*Networking_ObjectStorageService)(nil),
		(*Networking_VirtualNetwork)(nil),
		(*Networking_VirtualSubNetwork)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[112].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[114].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[115].OneofWrappers = []any{
		(*Operation_Decryption)(nil),
		(*Operation_Encryption)(nil),
		(*Operation_CryptographicHash)(nil),
		(*Operation_DatabaseConnect)(nil),
		(*Operation_DatabaseQuery)(nil),
		(*Operation_HttpRequest)(nil),
		(*Operation_LogOperation)(nil),
		(*Operation_ObjectStorageRequest)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[117].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[118].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[120].OneofWrappers = []any{
		(*Redundancy_GeoRedundancy)(nil),
		(*Redundancy_LocalRedundancy)(nil),
		(*Redundancy_ZoneRedundancy)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[121].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[122].OneofWrappers = []any{
		(*Reliability_ExplainableResults)(nil),
		(*Reliability_RobustnessScore)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[124].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[125].OneofWrappers = []any{
		(*Resource_Account)(nil),
		(*Resource_Job)(nil),
		(*Resource_Workflow)(nil),
		(*Resource_CodeRepository)(nil),
		(*Resource_Container)(nil),
		(*Resource_Function)(nil),
		(*Resource_VirtualMachine)(nil),
		(*Resource_ContainerOrchestration)(nil),
		(*Resource_ContainerRegistry)(nil),
		(*Resource_Certificate)(nil),
		(*Resource_Key)(nil),
		(*Resource_Secret)(nil),
		(*Resource_Identity)(nil),
		(*Resource_RoleAssignment)(nil),
		(*Resource_ContainerImage)(nil),
		(*Resource_VmImage)(nil),
		(*Resource_DeviceProvisioningService)(nil),
		(*Resource_MessagingHub)(nil),
		(*Resource_KeyVault)(nil),
		(*Resource_NetworkInterface)(nil),
		(*Resource_NetworkSecurityGroup)(nil),
		(*Resource_FunctionService)(nil),
		(*Resource_GenericNetworkService)(nil),
		(*Resource_LoadBalancer)(nil),
		(*Resource_LoggingService)(nil),
		(*Resource_MachineLearningService)(nil),
		(*Resource_SecurityAdvisoryService)(nil),
		(*Resource_DocumentDatabaseService)(nil),
		(*Resource_KeyValueDatabaseService)(nil),
		(*Resource_MultiModalDatabaseService)(nil),
		(*Resource_RelationalDatabaseService)(nil),
		(*Resource_FileStorageService)(nil),
		(*Resource_ObjectStorageService)(nil),
		(*Resource_VirtualNetwork)(nil),
		(*Resource_VirtualSubNetwork)(nil),
		(*Resource_PasswordPolicy)(nil),
		(*Resource_ResourceGroup)(nil),
		(*Resource_BlockStorage)(nil),
		(*Resource_DatabaseStorage)(nil),
		(*Resource_FileStorage)(nil),
		(*Resource_ObjectStorage)(nil),
		(*Resource_GenericDocument)(nil),
		(*Resource_PolicyDocument)(nil),
		(*Resource_SecurityAdvisoryDocument)(nil),
		(*Resource_ServiceMetadataDocument)(nil),
		(*Resource_MachineLearningDataset)(nil),
		(*Resource_MachineLearningModel)(nil),
		(*Resource_AwarenessTraining)(nil),
		(*Resource_SecurityTraining)(nil),
		(*Resource_Application)(nil),
		(*Resource_Library)(nil),
		(*Resource_SourceCodeFile)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[126].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[130].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[132].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[133].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[135].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[136].OneofWrappers = []any{
		(*SecurityFeature_AnomalyDetection)(nil),
		(*SecurityFeature_ActivityLogging)(nil),
		(*SecurityFeature_ApplicationLogging)(nil),
		(*SecurityFeature_BootLogging)(nil),
		(*SecurityFeature_OsLogging)(nil),
		(*SecurityFeature_ResourceLogging)(nil),
		(*SecurityFeature_MalwareProtection)(nil),
		(*SecurityFeature_UsageStatistics)(nil),
		(*SecurityFeature_CertificateBasedAuthentication)(nil),
		(*SecurityFeature_TokenBasedAuthentication)(nil),
		(*SecurityFeature_MultiFactorAuthentiation)(nil),
		(*SecurityFeature_NoAuthentication)(nil),
		(*SecurityFeature_OtpBasedAuthentication)(nil),
		(*SecurityFeature_PasswordBasedAuthentication)(nil),
		(*SecurityFeature_SingleSignOn)(nil),
		(*SecurityFeature_Abac)(nil),
		(*SecurityFeature_L3Firewall)(nil),
		(*SecurityFeature_WebApplicationFirewall)(nil),
		(*SecurityFeature_Rbac)(nil),
		(*SecurityFeature_Backup)(nil),
		(*SecurityFeature_DDoSProtection)(nil),
		(*SecurityFeature_GeoLocation)(nil),
		(*SecurityFeature_GeoRedundancy)(nil),
		(*SecurityFeature_LocalRedundancy)(nil),
		(*SecurityFeature_ZoneRedundancy)(nil),
		(*SecurityFeature_CustomerKeyEncryption)(nil),
		(*SecurityFeature_ManagedKeyEncryption)(nil),
		(*SecurityFeature_EncryptionInUse)(nil),
		(*SecurityFeature_TransportEncryption)(nil),
		(*SecurityFeature_LocalAttestation)(nil),
		(*SecurityFeature_RemoteAttestation)(nil),
		(*SecurityFeature_AutomaticUpdates)(nil),
		(*SecurityFeature_DocumentChecksum)(nil),
		(*SecurityFeature_Immutability)(nil),
		(*SecurityFeature_DocumentSignature)(nil),
		(*SecurityFeature_ExplainableResults)(nil),
		(*SecurityFeature_RobustnessScore)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[137].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[138].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[141].OneofWrappers = []any{
		(*Code_Application)(nil),
		(*Code_Library)(nil),
		(*Code_SourceCodeFile)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[142].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[143].OneofWrappers = []any{
		(*Storage_BlockStorage)(nil),
		(*Storage_DatabaseStorage)(nil),
		(*Storage_FileStorage)(nil),
		(*Storage_ObjectStorage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[144].OneofWrappers = []any{
		(*StorageService_DocumentDatabaseService)(nil),
		(*StorageService_KeyValueDatabaseService)(nil),
		(*StorageService_MultiModalDatabaseService)(nil),
		(*StorageService_RelationalDatabaseService)(nil),
		(*StorageService_FileStorageService)(nil),
		(*StorageService_ObjectStorageService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[146].OneofWrappers = []any{
		(*Training_AwarenessTraining)(nil),
		(*Training_SecurityTraining)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[149].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[150].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[151].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[152].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[155].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ontology_ontology_proto_rawDesc), len(file_api_ontology_ontology_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   209,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_api_ontology_ontology_proto_goTypes,
		DependencyIndexes: file_api_ontology_ontology_proto_depIdxs,
		MessageInfos:      file_api_ontology_ontology_proto_msgTypes,
		ExtensionInfos:    file_api_ontology_ontology_proto_extTypes,
	}.Build()
	File_api_ontology_ontology_proto = out.File
	file_api_ontology_ontology_proto_goTypes = nil
	file_api_ontology_ontology_proto_depIdxs = nil
}
