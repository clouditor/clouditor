// Auto-generated code by owl2proto (https://github.com/oxisto/owl2proto)

// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        (unknown)
// source: api/ontology/ontology.proto

package ontology

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ABAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ABAC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ABAC) Reset() {
	*x = ABAC{}
	mi := &file_api_ontology_ontology_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ABAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABAC) ProtoMessage() {}

func (x *ABAC) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABAC.ProtoReflect.Descriptor instead.
func (*ABAC) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{0}
}

// AccessRestriction is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type AccessRestriction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AccessRestriction_L3Firewall
	//	*AccessRestriction_WebApplicationFirewall
	Type          isAccessRestriction_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessRestriction) Reset() {
	*x = AccessRestriction{}
	mi := &file_api_ontology_ontology_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRestriction) ProtoMessage() {}

func (x *AccessRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRestriction.ProtoReflect.Descriptor instead.
func (*AccessRestriction) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{1}
}

func (x *AccessRestriction) GetType() isAccessRestriction_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AccessRestriction) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*AccessRestriction_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *AccessRestriction) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*AccessRestriction_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

type isAccessRestriction_Type interface {
	isAccessRestriction_Type()
}

type AccessRestriction_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type AccessRestriction_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

func (*AccessRestriction_L3Firewall) isAccessRestriction_Type() {}

func (*AccessRestriction_WebApplicationFirewall) isAccessRestriction_Type() {}

// Account is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This represents the cloud account as a whole, e.g., an Azure subscription.
type Account struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,12742,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,8955,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,1395,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5528,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6485,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18836,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14088,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,2374,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15991,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,12102,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,11624,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_api_ontology_ontology_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Account) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Account) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Account) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Account) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Account) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Account) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ActivityLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ActivityLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,18133,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,13626,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,10788,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,17680,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	LoggingServiceIds        []string               `protobuf:"bytes,589,rep,name=logging_service_ids,json=loggingServiceIds,proto3" json:"logging_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ActivityLogging) Reset() {
	*x = ActivityLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityLogging) ProtoMessage() {}

func (x *ActivityLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityLogging.ProtoReflect.Descriptor instead.
func (*ActivityLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{3}
}

func (x *ActivityLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ActivityLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ActivityLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ActivityLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

func (x *ActivityLogging) GetLoggingServiceIds() []string {
	if x != nil {
		return x.LoggingServiceIds
	}
	return nil
}

// AnomalyDetection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// Analyzes the activity of a NetworkService (which includes DatabaseServices).
// Scope contains the resource ID of the protected resource.
type AnomalyDetection struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Enabled            bool                   `protobuf:"varint,8852,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Scope              string                 `protobuf:"bytes,8482,opt,name=scope,proto3" json:"scope,omitempty"`
	ApplicationLogging *ApplicationLogging    `protobuf:"bytes,11132,opt,name=application_logging,json=applicationLogging,proto3" json:"application_logging,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AnomalyDetection) Reset() {
	*x = AnomalyDetection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyDetection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyDetection) ProtoMessage() {}

func (x *AnomalyDetection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyDetection.ProtoReflect.Descriptor instead.
func (*AnomalyDetection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{4}
}

func (x *AnomalyDetection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AnomalyDetection) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *AnomalyDetection) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		return x.ApplicationLogging
	}
	return nil
}

// Application is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This encapsulates the whole (source) code of an application.
type Application struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreationTime        *timestamppb.Timestamp `protobuf:"bytes,15057,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description         string                 `protobuf:"bytes,2283,opt,name=description,proto3" json:"description,omitempty"`
	Id                  string                 `protobuf:"bytes,9299,opt,name=id,proto3" json:"id,omitempty"`
	Labels              map[string]string      `protobuf:"bytes,12760,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                string                 `protobuf:"bytes,1409,opt,name=name,proto3" json:"name,omitempty"`
	ProgrammingLanguage string                 `protobuf:"bytes,1665,opt,name=programming_language,json=programmingLanguage,proto3" json:"programming_language,omitempty"`
	ProgrammingVersion  string                 `protobuf:"bytes,3150,opt,name=programming_version,json=programmingVersion,proto3" json:"programming_version,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,18684,opt,name=raw,proto3" json:"raw,omitempty"`
	TranslationUnits []string          `protobuf:"bytes,9449,rep,name=translation_units,json=translationUnits,proto3" json:"translation_units,omitempty"`
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,1953,opt,name=automatic_updates,json=automaticUpdates,proto3" json:"automatic_updates,omitempty"`
	CodeModuleIds    []string          `protobuf:"bytes,15130,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string           `protobuf:"bytes,12633,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	ComputeId        *string           `protobuf:"bytes,8224,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	Functionalities  []*Functionality  `protobuf:"bytes,7253,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	LibraryIds       []string          `protobuf:"bytes,14815,rep,name=library_ids,json=libraryIds,proto3" json:"library_ids,omitempty"`
	ParentId         *string           `protobuf:"bytes,13276,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Application) Reset() {
	*x = Application{}
	mi := &file_api_ontology_ontology_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{5}
}

func (x *Application) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetProgrammingLanguage() string {
	if x != nil {
		return x.ProgrammingLanguage
	}
	return ""
}

func (x *Application) GetProgrammingVersion() string {
	if x != nil {
		return x.ProgrammingVersion
	}
	return ""
}

func (x *Application) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Application) GetTranslationUnits() []string {
	if x != nil {
		return x.TranslationUnits
	}
	return nil
}

func (x *Application) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		return x.AutomaticUpdates
	}
	return nil
}

func (x *Application) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *Application) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *Application) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *Application) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *Application) GetLibraryIds() []string {
	if x != nil {
		return x.LibraryIds
	}
	return nil
}

func (x *Application) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// ApplicationLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ApplicationLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,13571,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,4205,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,6319,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,17870,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	LoggingServiceIds        []string               `protobuf:"bytes,3793,rep,name=logging_service_ids,json=loggingServiceIds,proto3" json:"logging_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ApplicationLogging) Reset() {
	*x = ApplicationLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplicationLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLogging) ProtoMessage() {}

func (x *ApplicationLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLogging.ProtoReflect.Descriptor instead.
func (*ApplicationLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ApplicationLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ApplicationLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ApplicationLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

func (x *ApplicationLogging) GetLoggingServiceIds() []string {
	if x != nil {
		return x.LoggingServiceIds
	}
	return nil
}

// AtRestEncryption is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type AtRestEncryption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AtRestEncryption_CustomerKeyEncryption
	//	*AtRestEncryption_ManagedKeyEncryption
	Type          isAtRestEncryption_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AtRestEncryption) Reset() {
	*x = AtRestEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtRestEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtRestEncryption) ProtoMessage() {}

func (x *AtRestEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtRestEncryption.ProtoReflect.Descriptor instead.
func (*AtRestEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{7}
}

func (x *AtRestEncryption) GetType() isAtRestEncryption_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AtRestEncryption) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*AtRestEncryption_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *AtRestEncryption) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*AtRestEncryption_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

type isAtRestEncryption_Type interface {
	isAtRestEncryption_Type()
}

type AtRestEncryption_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type AtRestEncryption_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

func (*AtRestEncryption_CustomerKeyEncryption) isAtRestEncryption_Type() {}

func (*AtRestEncryption_ManagedKeyEncryption) isAtRestEncryption_Type() {}

// Attestation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Attestation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Attestation_LocalAttestation
	//	*Attestation_RemoteAttestation
	Type          isAttestation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

func (x *Attestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{8}
}

func (x *Attestation) GetType() isAttestation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Attestation) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*Attestation_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *Attestation) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*Attestation_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

type isAttestation_Type interface {
	isAttestation_Type()
}

type Attestation_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type Attestation_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

func (*Attestation_LocalAttestation) isAttestation_Type() {}

func (*Attestation_RemoteAttestation) isAttestation_Type() {}

// Auditing is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Auditing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Auditing_AnomalyDetection
	//	*Auditing_ActivityLogging
	//	*Auditing_ApplicationLogging
	//	*Auditing_BootLogging
	//	*Auditing_OsLogging
	//	*Auditing_ResourceLogging
	//	*Auditing_MalwareProtection
	//	*Auditing_UsageStatistics
	Type          isAuditing_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Auditing) Reset() {
	*x = Auditing{}
	mi := &file_api_ontology_ontology_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Auditing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auditing) ProtoMessage() {}

func (x *Auditing) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auditing.ProtoReflect.Descriptor instead.
func (*Auditing) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{9}
}

func (x *Auditing) GetType() isAuditing_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Auditing) GetAnomalyDetection() *AnomalyDetection {
	if x != nil {
		if x, ok := x.Type.(*Auditing_AnomalyDetection); ok {
			return x.AnomalyDetection
		}
	}
	return nil
}

func (x *Auditing) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *Auditing) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *Auditing) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *Auditing) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *Auditing) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*Auditing_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

func (x *Auditing) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		if x, ok := x.Type.(*Auditing_MalwareProtection); ok {
			return x.MalwareProtection
		}
	}
	return nil
}

func (x *Auditing) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		if x, ok := x.Type.(*Auditing_UsageStatistics); ok {
			return x.UsageStatistics
		}
	}
	return nil
}

type isAuditing_Type interface {
	isAuditing_Type()
}

type Auditing_AnomalyDetection struct {
	AnomalyDetection *AnomalyDetection `protobuf:"bytes,4728,opt,name=anomaly_detection,json=anomalyDetection,proto3,oneof"`
}

type Auditing_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type Auditing_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type Auditing_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type Auditing_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type Auditing_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

type Auditing_MalwareProtection struct {
	MalwareProtection *MalwareProtection `protobuf:"bytes,7265,opt,name=malware_protection,json=malwareProtection,proto3,oneof"`
}

type Auditing_UsageStatistics struct {
	UsageStatistics *UsageStatistics `protobuf:"bytes,15242,opt,name=usage_statistics,json=usageStatistics,proto3,oneof"`
}

func (*Auditing_AnomalyDetection) isAuditing_Type() {}

func (*Auditing_ActivityLogging) isAuditing_Type() {}

func (*Auditing_ApplicationLogging) isAuditing_Type() {}

func (*Auditing_BootLogging) isAuditing_Type() {}

func (*Auditing_OsLogging) isAuditing_Type() {}

func (*Auditing_ResourceLogging) isAuditing_Type() {}

func (*Auditing_MalwareProtection) isAuditing_Type() {}

func (*Auditing_UsageStatistics) isAuditing_Type() {}

// Authenticity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Authenticity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Authenticity_CertificateBasedAuthentication
	//	*Authenticity_TokenBasedAuthentication
	//	*Authenticity_MultiFactorAuthentiation
	//	*Authenticity_NoAuthentication
	//	*Authenticity_OtpBasedAuthentication
	//	*Authenticity_PasswordBasedAuthentication
	//	*Authenticity_SingleSignOn
	Type          isAuthenticity_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticity) Reset() {
	*x = Authenticity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticity) ProtoMessage() {}

func (x *Authenticity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticity.ProtoReflect.Descriptor instead.
func (*Authenticity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{10}
}

func (x *Authenticity) GetType() isAuthenticity_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Authenticity) GetCertificateBasedAuthentication() *CertificateBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_CertificateBasedAuthentication); ok {
			return x.CertificateBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetTokenBasedAuthentication() *TokenBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_TokenBasedAuthentication); ok {
			return x.TokenBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetMultiFactorAuthentiation() *MultiFactorAuthentiation {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_MultiFactorAuthentiation); ok {
			return x.MultiFactorAuthentiation
		}
	}
	return nil
}

func (x *Authenticity) GetNoAuthentication() *NoAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_NoAuthentication); ok {
			return x.NoAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetOtpBasedAuthentication() *OTPBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_OtpBasedAuthentication); ok {
			return x.OtpBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetPasswordBasedAuthentication() *PasswordBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_PasswordBasedAuthentication); ok {
			return x.PasswordBasedAuthentication
		}
	}
	return nil
}

func (x *Authenticity) GetSingleSignOn() *SingleSignOn {
	if x != nil {
		if x, ok := x.Type.(*Authenticity_SingleSignOn); ok {
			return x.SingleSignOn
		}
	}
	return nil
}

type isAuthenticity_Type interface {
	isAuthenticity_Type()
}

type Authenticity_CertificateBasedAuthentication struct {
	CertificateBasedAuthentication *CertificateBasedAuthentication `protobuf:"bytes,560,opt,name=certificate_based_authentication,json=certificateBasedAuthentication,proto3,oneof"`
}

type Authenticity_TokenBasedAuthentication struct {
	TokenBasedAuthentication *TokenBasedAuthentication `protobuf:"bytes,3684,opt,name=token_based_authentication,json=tokenBasedAuthentication,proto3,oneof"`
}

type Authenticity_MultiFactorAuthentiation struct {
	MultiFactorAuthentiation *MultiFactorAuthentiation `protobuf:"bytes,13104,opt,name=multi_factor_authentiation,json=multiFactorAuthentiation,proto3,oneof"`
}

type Authenticity_NoAuthentication struct {
	NoAuthentication *NoAuthentication `protobuf:"bytes,17718,opt,name=no_authentication,json=noAuthentication,proto3,oneof"`
}

type Authenticity_OtpBasedAuthentication struct {
	OtpBasedAuthentication *OTPBasedAuthentication `protobuf:"bytes,18743,opt,name=otp_based_authentication,json=otpBasedAuthentication,proto3,oneof"`
}

type Authenticity_PasswordBasedAuthentication struct {
	PasswordBasedAuthentication *PasswordBasedAuthentication `protobuf:"bytes,16941,opt,name=password_based_authentication,json=passwordBasedAuthentication,proto3,oneof"`
}

type Authenticity_SingleSignOn struct {
	SingleSignOn *SingleSignOn `protobuf:"bytes,9281,opt,name=single_sign_on,json=singleSignOn,proto3,oneof"`
}

func (*Authenticity_CertificateBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_TokenBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_MultiFactorAuthentiation) isAuthenticity_Type() {}

func (*Authenticity_NoAuthentication) isAuthenticity_Type() {}

func (*Authenticity_OtpBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_PasswordBasedAuthentication) isAuthenticity_Type() {}

func (*Authenticity_SingleSignOn) isAuthenticity_Type() {}

// Authorization is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Authorization_Abac
	//	*Authorization_L3Firewall
	//	*Authorization_WebApplicationFirewall
	//	*Authorization_Rbac
	Type          isAuthorization_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authorization) Reset() {
	*x = Authorization{}
	mi := &file_api_ontology_ontology_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorization) ProtoMessage() {}

func (x *Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorization.ProtoReflect.Descriptor instead.
func (*Authorization) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{11}
}

func (x *Authorization) GetType() isAuthorization_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Authorization) GetAbac() *ABAC {
	if x != nil {
		if x, ok := x.Type.(*Authorization_Abac); ok {
			return x.Abac
		}
	}
	return nil
}

func (x *Authorization) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*Authorization_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *Authorization) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*Authorization_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

func (x *Authorization) GetRbac() *RBAC {
	if x != nil {
		if x, ok := x.Type.(*Authorization_Rbac); ok {
			return x.Rbac
		}
	}
	return nil
}

type isAuthorization_Type interface {
	isAuthorization_Type()
}

type Authorization_Abac struct {
	Abac *ABAC `protobuf:"bytes,14694,opt,name=abac,proto3,oneof"`
}

type Authorization_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type Authorization_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

type Authorization_Rbac struct {
	Rbac *RBAC `protobuf:"bytes,18783,opt,name=rbac,proto3,oneof"`
}

func (*Authorization_Abac) isAuthorization_Type() {}

func (*Authorization_L3Firewall) isAuthorization_Type() {}

func (*Authorization_WebApplicationFirewall) isAuthorization_Type() {}

func (*Authorization_Rbac) isAuthorization_Type() {}

// AutomaticUpdates is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This feature is, e.g., available on some VM services to automatically update their software. It ensures that a resource is protected from tampering with its state.
type AutomaticUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,2283,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Interval      *durationpb.Duration   `protobuf:"bytes,2309,opt,name=interval,proto3" json:"interval,omitempty"`
	SecurityOnly  bool                   `protobuf:"varint,1034,opt,name=security_only,json=securityOnly,proto3" json:"security_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutomaticUpdates) Reset() {
	*x = AutomaticUpdates{}
	mi := &file_api_ontology_ontology_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutomaticUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutomaticUpdates) ProtoMessage() {}

func (x *AutomaticUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutomaticUpdates.ProtoReflect.Descriptor instead.
func (*AutomaticUpdates) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{12}
}

func (x *AutomaticUpdates) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AutomaticUpdates) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *AutomaticUpdates) GetSecurityOnly() bool {
	if x != nil {
		return x.SecurityOnly
	}
	return false
}

// Availability is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Availability struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Availability_Backup
	//	*Availability_DDoSProtection
	//	*Availability_GeoLocation
	//	*Availability_GeoRedundancy
	//	*Availability_LocalRedundancy
	//	*Availability_ZoneRedundancy
	Type          isAvailability_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Availability) Reset() {
	*x = Availability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{13}
}

func (x *Availability) GetType() isAvailability_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Availability) GetBackup() *Backup {
	if x != nil {
		if x, ok := x.Type.(*Availability_Backup); ok {
			return x.Backup
		}
	}
	return nil
}

func (x *Availability) GetDDoSProtection() *DDoSProtection {
	if x != nil {
		if x, ok := x.Type.(*Availability_DDoSProtection); ok {
			return x.DDoSProtection
		}
	}
	return nil
}

func (x *Availability) GetGeoLocation() *GeoLocation {
	if x != nil {
		if x, ok := x.Type.(*Availability_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *Availability) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *Availability) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *Availability) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Availability_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

type isAvailability_Type interface {
	isAvailability_Type()
}

type Availability_Backup struct {
	Backup *Backup `protobuf:"bytes,16413,opt,name=backup,proto3,oneof"`
}

type Availability_DDoSProtection struct {
	DDoSProtection *DDoSProtection `protobuf:"bytes,16707,opt,name=d_do_s_protection,json=dDoSProtection,proto3,oneof"`
}

type Availability_GeoLocation struct {
	GeoLocation *GeoLocation `protobuf:"bytes,10970,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type Availability_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type Availability_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type Availability_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

func (*Availability_Backup) isAvailability_Type() {}

func (*Availability_DDoSProtection) isAvailability_Type() {}

func (*Availability_GeoLocation) isAvailability_Type() {}

func (*Availability_GeoRedundancy) isAvailability_Type() {}

func (*Availability_LocalRedundancy) isAvailability_Type() {}

func (*Availability_ZoneRedundancy) isAvailability_Type() {}

// Backup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// RetentionPeriod in hours
type Backup struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Enabled             bool                   `protobuf:"varint,2815,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Interval            *durationpb.Duration   `protobuf:"bytes,7186,opt,name=interval,proto3" json:"interval,omitempty"`
	RetentionPeriod     *durationpb.Duration   `protobuf:"bytes,6795,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	StorageId           *string                `protobuf:"bytes,7061,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
	TransportEncryption *TransportEncryption   `protobuf:"bytes,1921,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Backup) Reset() {
	*x = Backup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{14}
}

func (x *Backup) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Backup) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Backup) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *Backup) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

func (x *Backup) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// Resource is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Resource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Resource_Account
	//	*Resource_Job
	//	*Resource_Workflow
	//	*Resource_CodeRepository
	//	*Resource_Container
	//	*Resource_Function
	//	*Resource_VirtualMachine
	//	*Resource_ContainerOrchestration
	//	*Resource_ContainerRegistry
	//	*Resource_Certificate
	//	*Resource_Key
	//	*Resource_Secret
	//	*Resource_Identity
	//	*Resource_RoleAssignment
	//	*Resource_ContainerImage
	//	*Resource_VmImage
	//	*Resource_DeviceProvisioningService
	//	*Resource_MessagingHub
	//	*Resource_KeyVault
	//	*Resource_MlWorkspace
	//	*Resource_NetworkInterface
	//	*Resource_NetworkSecurityGroup
	//	*Resource_FunctionService
	//	*Resource_GenericNetworkService
	//	*Resource_LoadBalancer
	//	*Resource_LoggingService
	//	*Resource_SecurityAdvisoryService
	//	*Resource_DocumentDatabaseService
	//	*Resource_KeyValueDatabaseService
	//	*Resource_MultiModalDatabaseService
	//	*Resource_RelationalDatabaseService
	//	*Resource_FileStorageService
	//	*Resource_ObjectStorageService
	//	*Resource_VirtualNetwork
	//	*Resource_VirtualSubNetwork
	//	*Resource_PasswordPolicy
	//	*Resource_ResourceGroup
	//	*Resource_BlockStorage
	//	*Resource_DatabaseStorage
	//	*Resource_FileStorage
	//	*Resource_ObjectStorage
	//	*Resource_Application
	//	*Resource_Library
	//	*Resource_CodeModule
	//	*Resource_GenericDocument
	//	*Resource_SecurityAdvisoryDocument
	//	*Resource_ServiceMetadataDocument
	Type          isResource_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_api_ontology_ontology_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{15}
}

func (x *Resource) GetType() isResource_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Resource) GetAccount() *Account {
	if x != nil {
		if x, ok := x.Type.(*Resource_Account); ok {
			return x.Account
		}
	}
	return nil
}

func (x *Resource) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*Resource_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *Resource) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*Resource_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

func (x *Resource) GetCodeRepository() *CodeRepository {
	if x != nil {
		if x, ok := x.Type.(*Resource_CodeRepository); ok {
			return x.CodeRepository
		}
	}
	return nil
}

func (x *Resource) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Resource_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Resource) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Resource_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Resource) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

func (x *Resource) GetContainerOrchestration() *ContainerOrchestration {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerOrchestration); ok {
			return x.ContainerOrchestration
		}
	}
	return nil
}

func (x *Resource) GetContainerRegistry() *ContainerRegistry {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerRegistry); ok {
			return x.ContainerRegistry
		}
	}
	return nil
}

func (x *Resource) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Resource_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Resource) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Resource_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Resource) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Resource_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

func (x *Resource) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Resource_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Resource) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Resource_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *Resource) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Resource_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Resource) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Resource_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

func (x *Resource) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*Resource_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *Resource) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*Resource_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

func (x *Resource) GetKeyVault() *KeyVault {
	if x != nil {
		if x, ok := x.Type.(*Resource_KeyVault); ok {
			return x.KeyVault
		}
	}
	return nil
}

func (x *Resource) GetMlWorkspace() *MLWorkspace {
	if x != nil {
		if x, ok := x.Type.(*Resource_MlWorkspace); ok {
			return x.MlWorkspace
		}
	}
	return nil
}

func (x *Resource) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Resource_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Resource) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Resource_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Resource) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Resource_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Resource) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Resource_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Resource) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Resource_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Resource) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Resource_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Resource) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Resource_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Resource) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Resource_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Resource) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Resource_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Resource) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Resource_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Resource) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Resource) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Resource_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

func (x *Resource) GetPasswordPolicy() *PasswordPolicy {
	if x != nil {
		if x, ok := x.Type.(*Resource_PasswordPolicy); ok {
			return x.PasswordPolicy
		}
	}
	return nil
}

func (x *Resource) GetResourceGroup() *ResourceGroup {
	if x != nil {
		if x, ok := x.Type.(*Resource_ResourceGroup); ok {
			return x.ResourceGroup
		}
	}
	return nil
}

func (x *Resource) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Resource) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Resource) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Resource) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Resource_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

func (x *Resource) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Resource_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Resource) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Resource_Library); ok {
			return x.Library
		}
	}
	return nil
}

func (x *Resource) GetCodeModule() *CodeModule {
	if x != nil {
		if x, ok := x.Type.(*Resource_CodeModule); ok {
			return x.CodeModule
		}
	}
	return nil
}

func (x *Resource) GetGenericDocument() *GenericDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_GenericDocument); ok {
			return x.GenericDocument
		}
	}
	return nil
}

func (x *Resource) GetSecurityAdvisoryDocument() *SecurityAdvisoryDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_SecurityAdvisoryDocument); ok {
			return x.SecurityAdvisoryDocument
		}
	}
	return nil
}

func (x *Resource) GetServiceMetadataDocument() *ServiceMetadataDocument {
	if x != nil {
		if x, ok := x.Type.(*Resource_ServiceMetadataDocument); ok {
			return x.ServiceMetadataDocument
		}
	}
	return nil
}

type isResource_Type interface {
	isResource_Type()
}

type Resource_Account struct {
	Account *Account `protobuf:"bytes,11456,opt,name=account,proto3,oneof"`
}

type Resource_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type Resource_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

type Resource_CodeRepository struct {
	CodeRepository *CodeRepository `protobuf:"bytes,3431,opt,name=code_repository,json=codeRepository,proto3,oneof"`
}

type Resource_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Resource_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Resource_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

type Resource_ContainerOrchestration struct {
	ContainerOrchestration *ContainerOrchestration `protobuf:"bytes,3211,opt,name=container_orchestration,json=containerOrchestration,proto3,oneof"`
}

type Resource_ContainerRegistry struct {
	ContainerRegistry *ContainerRegistry `protobuf:"bytes,8326,opt,name=container_registry,json=containerRegistry,proto3,oneof"`
}

type Resource_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Resource_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Resource_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

type Resource_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Resource_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type Resource_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Resource_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Resource_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type Resource_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

type Resource_KeyVault struct {
	KeyVault *KeyVault `protobuf:"bytes,18627,opt,name=key_vault,json=keyVault,proto3,oneof"`
}

type Resource_MlWorkspace struct {
	MlWorkspace *MLWorkspace `protobuf:"bytes,3361,opt,name=ml_workspace,json=mlWorkspace,proto3,oneof"`
}

type Resource_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Resource_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Resource_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Resource_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Resource_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Resource_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Resource_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Resource_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Resource_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Resource_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Resource_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Resource_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Resource_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Resource_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Resource_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

type Resource_PasswordPolicy struct {
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,970,opt,name=password_policy,json=passwordPolicy,proto3,oneof"`
}

type Resource_ResourceGroup struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,494,opt,name=resource_group,json=resourceGroup,proto3,oneof"`
}

type Resource_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Resource_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Resource_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Resource_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Resource_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Resource_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

type Resource_CodeModule struct {
	CodeModule *CodeModule `protobuf:"bytes,10890,opt,name=code_module,json=codeModule,proto3,oneof"`
}

type Resource_GenericDocument struct {
	GenericDocument *GenericDocument `protobuf:"bytes,5702,opt,name=generic_document,json=genericDocument,proto3,oneof"`
}

type Resource_SecurityAdvisoryDocument struct {
	SecurityAdvisoryDocument *SecurityAdvisoryDocument `protobuf:"bytes,8513,opt,name=security_advisory_document,json=securityAdvisoryDocument,proto3,oneof"`
}

type Resource_ServiceMetadataDocument struct {
	ServiceMetadataDocument *ServiceMetadataDocument `protobuf:"bytes,13959,opt,name=service_metadata_document,json=serviceMetadataDocument,proto3,oneof"`
}

func (*Resource_Account) isResource_Type() {}

func (*Resource_Job) isResource_Type() {}

func (*Resource_Workflow) isResource_Type() {}

func (*Resource_CodeRepository) isResource_Type() {}

func (*Resource_Container) isResource_Type() {}

func (*Resource_Function) isResource_Type() {}

func (*Resource_VirtualMachine) isResource_Type() {}

func (*Resource_ContainerOrchestration) isResource_Type() {}

func (*Resource_ContainerRegistry) isResource_Type() {}

func (*Resource_Certificate) isResource_Type() {}

func (*Resource_Key) isResource_Type() {}

func (*Resource_Secret) isResource_Type() {}

func (*Resource_Identity) isResource_Type() {}

func (*Resource_RoleAssignment) isResource_Type() {}

func (*Resource_ContainerImage) isResource_Type() {}

func (*Resource_VmImage) isResource_Type() {}

func (*Resource_DeviceProvisioningService) isResource_Type() {}

func (*Resource_MessagingHub) isResource_Type() {}

func (*Resource_KeyVault) isResource_Type() {}

func (*Resource_MlWorkspace) isResource_Type() {}

func (*Resource_NetworkInterface) isResource_Type() {}

func (*Resource_NetworkSecurityGroup) isResource_Type() {}

func (*Resource_FunctionService) isResource_Type() {}

func (*Resource_GenericNetworkService) isResource_Type() {}

func (*Resource_LoadBalancer) isResource_Type() {}

func (*Resource_LoggingService) isResource_Type() {}

func (*Resource_SecurityAdvisoryService) isResource_Type() {}

func (*Resource_DocumentDatabaseService) isResource_Type() {}

func (*Resource_KeyValueDatabaseService) isResource_Type() {}

func (*Resource_MultiModalDatabaseService) isResource_Type() {}

func (*Resource_RelationalDatabaseService) isResource_Type() {}

func (*Resource_FileStorageService) isResource_Type() {}

func (*Resource_ObjectStorageService) isResource_Type() {}

func (*Resource_VirtualNetwork) isResource_Type() {}

func (*Resource_VirtualSubNetwork) isResource_Type() {}

func (*Resource_PasswordPolicy) isResource_Type() {}

func (*Resource_ResourceGroup) isResource_Type() {}

func (*Resource_BlockStorage) isResource_Type() {}

func (*Resource_DatabaseStorage) isResource_Type() {}

func (*Resource_FileStorage) isResource_Type() {}

func (*Resource_ObjectStorage) isResource_Type() {}

func (*Resource_Application) isResource_Type() {}

func (*Resource_Library) isResource_Type() {}

func (*Resource_CodeModule) isResource_Type() {}

func (*Resource_GenericDocument) isResource_Type() {}

func (*Resource_SecurityAdvisoryDocument) isResource_Type() {}

func (*Resource_ServiceMetadataDocument) isResource_Type() {}

// BlockStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type BlockStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11167,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2163,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7003,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15007,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15784,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13869,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,11057,opt,name=raw,proto3" json:"raw,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,4444,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,4533,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,3522,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,9844,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,14466,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,8468,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,12392,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,17806,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BlockStorage) Reset() {
	*x = BlockStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockStorage) ProtoMessage() {}

func (x *BlockStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockStorage.ProtoReflect.Descriptor instead.
func (*BlockStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{16}
}

func (x *BlockStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *BlockStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BlockStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlockStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *BlockStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BlockStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *BlockStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *BlockStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *BlockStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *BlockStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *BlockStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *BlockStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *BlockStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *BlockStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// BootLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type BootLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,17321,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,9135,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,2338,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,3133,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	LoggingServiceIds        []string               `protobuf:"bytes,15790,rep,name=logging_service_ids,json=loggingServiceIds,proto3" json:"logging_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BootLogging) Reset() {
	*x = BootLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BootLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootLogging) ProtoMessage() {}

func (x *BootLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootLogging.ProtoReflect.Descriptor instead.
func (*BootLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{17}
}

func (x *BootLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BootLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *BootLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *BootLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

func (x *BootLogging) GetLoggingServiceIds() []string {
	if x != nil {
		return x.LoggingServiceIds
	}
	return nil
}

// CICDService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type CICDService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CICDService_Job
	//	*CICDService_Workflow
	Type          isCICDService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CICDService) Reset() {
	*x = CICDService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CICDService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CICDService) ProtoMessage() {}

func (x *CICDService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CICDService.ProtoReflect.Descriptor instead.
func (*CICDService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{18}
}

func (x *CICDService) GetType() isCICDService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CICDService) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*CICDService_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *CICDService) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*CICDService_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

type isCICDService_Type interface {
	isCICDService_Type()
}

type CICDService_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type CICDService_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

func (*CICDService_Job) isCICDService_Type() {}

func (*CICDService_Workflow) isCICDService_Type() {}

// Certificate is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Certificate struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,18284,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10382,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,11036,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,17025,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,1585,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15261,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,16025,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1369,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18981,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,11770,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,7199,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,12402,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,8357,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,7304,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,10685,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,11629,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_api_ontology_ontology_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{19}
}

func (x *Certificate) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Certificate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Certificate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Certificate) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Certificate) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Certificate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Certificate) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Certificate) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Certificate) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Certificate) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Certificate) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Certificate) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// CertificateBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CertificateBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,14958,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,11983,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CertificateBasedAuthentication) Reset() {
	*x = CertificateBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateBasedAuthentication) ProtoMessage() {}

func (x *CertificateBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateBasedAuthentication.ProtoReflect.Descriptor instead.
func (*CertificateBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{20}
}

func (x *CertificateBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *CertificateBasedAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// CipherSuite is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CipherSuite struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// for example: RSA, ECDSA
	AuthenticationMechanism string `protobuf:"bytes,3667,opt,name=authentication_mechanism,json=authenticationMechanism,proto3" json:"authentication_mechanism,omitempty"`
	KeyExchangeAlgorithm    string `protobuf:"bytes,14920,opt,name=key_exchange_algorithm,json=keyExchangeAlgorithm,proto3" json:"key_exchange_algorithm,omitempty"`
	// naming schema: SHA-256
	MacAlgorithm string `protobuf:"bytes,2344,opt,name=mac_algorithm,json=macAlgorithm,proto3" json:"mac_algorithm,omitempty"`
	// naming schema: AES-128-GCM
	SessionCipher string `protobuf:"bytes,5742,opt,name=session_cipher,json=sessionCipher,proto3" json:"session_cipher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CipherSuite) Reset() {
	*x = CipherSuite{}
	mi := &file_api_ontology_ontology_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CipherSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipherSuite) ProtoMessage() {}

func (x *CipherSuite) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipherSuite.ProtoReflect.Descriptor instead.
func (*CipherSuite) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{21}
}

func (x *CipherSuite) GetAuthenticationMechanism() string {
	if x != nil {
		return x.AuthenticationMechanism
	}
	return ""
}

func (x *CipherSuite) GetKeyExchangeAlgorithm() string {
	if x != nil {
		return x.KeyExchangeAlgorithm
	}
	return ""
}

func (x *CipherSuite) GetMacAlgorithm() string {
	if x != nil {
		return x.MacAlgorithm
	}
	return ""
}

func (x *CipherSuite) GetSessionCipher() string {
	if x != nil {
		return x.SessionCipher
	}
	return ""
}

// Infrastructure is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Infrastructure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Infrastructure_Account
	//	*Infrastructure_Job
	//	*Infrastructure_Workflow
	//	*Infrastructure_CodeRepository
	//	*Infrastructure_Container
	//	*Infrastructure_Function
	//	*Infrastructure_VirtualMachine
	//	*Infrastructure_ContainerOrchestration
	//	*Infrastructure_ContainerRegistry
	//	*Infrastructure_Certificate
	//	*Infrastructure_Key
	//	*Infrastructure_Secret
	//	*Infrastructure_Identity
	//	*Infrastructure_RoleAssignment
	//	*Infrastructure_ContainerImage
	//	*Infrastructure_VmImage
	//	*Infrastructure_DeviceProvisioningService
	//	*Infrastructure_MessagingHub
	//	*Infrastructure_KeyVault
	//	*Infrastructure_MlWorkspace
	//	*Infrastructure_NetworkInterface
	//	*Infrastructure_NetworkSecurityGroup
	//	*Infrastructure_FunctionService
	//	*Infrastructure_GenericNetworkService
	//	*Infrastructure_LoadBalancer
	//	*Infrastructure_LoggingService
	//	*Infrastructure_SecurityAdvisoryService
	//	*Infrastructure_DocumentDatabaseService
	//	*Infrastructure_KeyValueDatabaseService
	//	*Infrastructure_MultiModalDatabaseService
	//	*Infrastructure_RelationalDatabaseService
	//	*Infrastructure_FileStorageService
	//	*Infrastructure_ObjectStorageService
	//	*Infrastructure_VirtualNetwork
	//	*Infrastructure_VirtualSubNetwork
	//	*Infrastructure_PasswordPolicy
	//	*Infrastructure_ResourceGroup
	//	*Infrastructure_BlockStorage
	//	*Infrastructure_DatabaseStorage
	//	*Infrastructure_FileStorage
	//	*Infrastructure_ObjectStorage
	Type          isInfrastructure_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Infrastructure) Reset() {
	*x = Infrastructure{}
	mi := &file_api_ontology_ontology_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Infrastructure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Infrastructure) ProtoMessage() {}

func (x *Infrastructure) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Infrastructure.ProtoReflect.Descriptor instead.
func (*Infrastructure) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{22}
}

func (x *Infrastructure) GetType() isInfrastructure_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Infrastructure) GetAccount() *Account {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Account); ok {
			return x.Account
		}
	}
	return nil
}

func (x *Infrastructure) GetJob() *Job {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Job); ok {
			return x.Job
		}
	}
	return nil
}

func (x *Infrastructure) GetWorkflow() *Workflow {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Workflow); ok {
			return x.Workflow
		}
	}
	return nil
}

func (x *Infrastructure) GetCodeRepository() *CodeRepository {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_CodeRepository); ok {
			return x.CodeRepository
		}
	}
	return nil
}

func (x *Infrastructure) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Infrastructure) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerOrchestration() *ContainerOrchestration {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerOrchestration); ok {
			return x.ContainerOrchestration
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerRegistry() *ContainerRegistry {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerRegistry); ok {
			return x.ContainerRegistry
		}
	}
	return nil
}

func (x *Infrastructure) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Infrastructure) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Infrastructure) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

func (x *Infrastructure) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Infrastructure) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

func (x *Infrastructure) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Infrastructure) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

func (x *Infrastructure) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *Infrastructure) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

func (x *Infrastructure) GetKeyVault() *KeyVault {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_KeyVault); ok {
			return x.KeyVault
		}
	}
	return nil
}

func (x *Infrastructure) GetMlWorkspace() *MLWorkspace {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MlWorkspace); ok {
			return x.MlWorkspace
		}
	}
	return nil
}

func (x *Infrastructure) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Infrastructure) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Infrastructure) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Infrastructure) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Infrastructure) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Infrastructure) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Infrastructure) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Infrastructure) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Infrastructure) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Infrastructure) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Infrastructure) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

func (x *Infrastructure) GetPasswordPolicy() *PasswordPolicy {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_PasswordPolicy); ok {
			return x.PasswordPolicy
		}
	}
	return nil
}

func (x *Infrastructure) GetResourceGroup() *ResourceGroup {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ResourceGroup); ok {
			return x.ResourceGroup
		}
	}
	return nil
}

func (x *Infrastructure) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Infrastructure) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Infrastructure_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

type isInfrastructure_Type interface {
	isInfrastructure_Type()
}

type Infrastructure_Account struct {
	Account *Account `protobuf:"bytes,11456,opt,name=account,proto3,oneof"`
}

type Infrastructure_Job struct {
	Job *Job `protobuf:"bytes,3999,opt,name=job,proto3,oneof"`
}

type Infrastructure_Workflow struct {
	Workflow *Workflow `protobuf:"bytes,8746,opt,name=workflow,proto3,oneof"`
}

type Infrastructure_CodeRepository struct {
	CodeRepository *CodeRepository `protobuf:"bytes,3431,opt,name=code_repository,json=codeRepository,proto3,oneof"`
}

type Infrastructure_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Infrastructure_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Infrastructure_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

type Infrastructure_ContainerOrchestration struct {
	ContainerOrchestration *ContainerOrchestration `protobuf:"bytes,3211,opt,name=container_orchestration,json=containerOrchestration,proto3,oneof"`
}

type Infrastructure_ContainerRegistry struct {
	ContainerRegistry *ContainerRegistry `protobuf:"bytes,8326,opt,name=container_registry,json=containerRegistry,proto3,oneof"`
}

type Infrastructure_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Infrastructure_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Infrastructure_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

type Infrastructure_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Infrastructure_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

type Infrastructure_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Infrastructure_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

type Infrastructure_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type Infrastructure_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

type Infrastructure_KeyVault struct {
	KeyVault *KeyVault `protobuf:"bytes,18627,opt,name=key_vault,json=keyVault,proto3,oneof"`
}

type Infrastructure_MlWorkspace struct {
	MlWorkspace *MLWorkspace `protobuf:"bytes,3361,opt,name=ml_workspace,json=mlWorkspace,proto3,oneof"`
}

type Infrastructure_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Infrastructure_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Infrastructure_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Infrastructure_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Infrastructure_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Infrastructure_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Infrastructure_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Infrastructure_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Infrastructure_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Infrastructure_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Infrastructure_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Infrastructure_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Infrastructure_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Infrastructure_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Infrastructure_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

type Infrastructure_PasswordPolicy struct {
	PasswordPolicy *PasswordPolicy `protobuf:"bytes,970,opt,name=password_policy,json=passwordPolicy,proto3,oneof"`
}

type Infrastructure_ResourceGroup struct {
	ResourceGroup *ResourceGroup `protobuf:"bytes,494,opt,name=resource_group,json=resourceGroup,proto3,oneof"`
}

type Infrastructure_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Infrastructure_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Infrastructure_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Infrastructure_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

func (*Infrastructure_Account) isInfrastructure_Type() {}

func (*Infrastructure_Job) isInfrastructure_Type() {}

func (*Infrastructure_Workflow) isInfrastructure_Type() {}

func (*Infrastructure_CodeRepository) isInfrastructure_Type() {}

func (*Infrastructure_Container) isInfrastructure_Type() {}

func (*Infrastructure_Function) isInfrastructure_Type() {}

func (*Infrastructure_VirtualMachine) isInfrastructure_Type() {}

func (*Infrastructure_ContainerOrchestration) isInfrastructure_Type() {}

func (*Infrastructure_ContainerRegistry) isInfrastructure_Type() {}

func (*Infrastructure_Certificate) isInfrastructure_Type() {}

func (*Infrastructure_Key) isInfrastructure_Type() {}

func (*Infrastructure_Secret) isInfrastructure_Type() {}

func (*Infrastructure_Identity) isInfrastructure_Type() {}

func (*Infrastructure_RoleAssignment) isInfrastructure_Type() {}

func (*Infrastructure_ContainerImage) isInfrastructure_Type() {}

func (*Infrastructure_VmImage) isInfrastructure_Type() {}

func (*Infrastructure_DeviceProvisioningService) isInfrastructure_Type() {}

func (*Infrastructure_MessagingHub) isInfrastructure_Type() {}

func (*Infrastructure_KeyVault) isInfrastructure_Type() {}

func (*Infrastructure_MlWorkspace) isInfrastructure_Type() {}

func (*Infrastructure_NetworkInterface) isInfrastructure_Type() {}

func (*Infrastructure_NetworkSecurityGroup) isInfrastructure_Type() {}

func (*Infrastructure_FunctionService) isInfrastructure_Type() {}

func (*Infrastructure_GenericNetworkService) isInfrastructure_Type() {}

func (*Infrastructure_LoadBalancer) isInfrastructure_Type() {}

func (*Infrastructure_LoggingService) isInfrastructure_Type() {}

func (*Infrastructure_SecurityAdvisoryService) isInfrastructure_Type() {}

func (*Infrastructure_DocumentDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_KeyValueDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_MultiModalDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_RelationalDatabaseService) isInfrastructure_Type() {}

func (*Infrastructure_FileStorageService) isInfrastructure_Type() {}

func (*Infrastructure_ObjectStorageService) isInfrastructure_Type() {}

func (*Infrastructure_VirtualNetwork) isInfrastructure_Type() {}

func (*Infrastructure_VirtualSubNetwork) isInfrastructure_Type() {}

func (*Infrastructure_PasswordPolicy) isInfrastructure_Type() {}

func (*Infrastructure_ResourceGroup) isInfrastructure_Type() {}

func (*Infrastructure_BlockStorage) isInfrastructure_Type() {}

func (*Infrastructure_DatabaseStorage) isInfrastructure_Type() {}

func (*Infrastructure_FileStorage) isInfrastructure_Type() {}

func (*Infrastructure_ObjectStorage) isInfrastructure_Type() {}

// CloudSDK is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CloudSDK struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudSDK) Reset() {
	*x = CloudSDK{}
	mi := &file_api_ontology_ontology_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudSDK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudSDK) ProtoMessage() {}

func (x *CloudSDK) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudSDK.ProtoReflect.Descriptor instead.
func (*CloudSDK) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{23}
}

// Code is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Code struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Code_Application
	//	*Code_Library
	//	*Code_CodeModule
	Type          isCode_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Code) Reset() {
	*x = Code{}
	mi := &file_api_ontology_ontology_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{24}
}

func (x *Code) GetType() isCode_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Code) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Code_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Code) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Code_Library); ok {
			return x.Library
		}
	}
	return nil
}

func (x *Code) GetCodeModule() *CodeModule {
	if x != nil {
		if x, ok := x.Type.(*Code_CodeModule); ok {
			return x.CodeModule
		}
	}
	return nil
}

type isCode_Type interface {
	isCode_Type()
}

type Code_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Code_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

type Code_CodeModule struct {
	CodeModule *CodeModule `protobuf:"bytes,10890,opt,name=code_module,json=codeModule,proto3,oneof"`
}

func (*Code_Application) isCode_Type() {}

func (*Code_Library) isCode_Type() {}

func (*Code_CodeModule) isCode_Type() {}

// CodeRegion is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CodeRegion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,11271,opt,name=code,proto3" json:"code,omitempty"`
	EndColumn     int32                  `protobuf:"varint,18978,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
	EndLine       int32                  `protobuf:"varint,7512,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	File          string                 `protobuf:"bytes,1260,opt,name=file,proto3" json:"file,omitempty"`
	StartColumn   int32                  `protobuf:"varint,5651,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	StartLine     int32                  `protobuf:"varint,11889,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodeRegion) Reset() {
	*x = CodeRegion{}
	mi := &file_api_ontology_ontology_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeRegion) ProtoMessage() {}

func (x *CodeRegion) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeRegion.ProtoReflect.Descriptor instead.
func (*CodeRegion) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{25}
}

func (x *CodeRegion) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CodeRegion) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *CodeRegion) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *CodeRegion) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CodeRegion) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *CodeRegion) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

// CodeRepository is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CodeRepository struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14345,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,5754,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,1358,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,8874,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6055,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12766,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,15664,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,3636,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2093,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,8043,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,14597,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CodeRepository) Reset() {
	*x = CodeRepository{}
	mi := &file_api_ontology_ontology_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeRepository) ProtoMessage() {}

func (x *CodeRepository) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeRepository.ProtoReflect.Descriptor instead.
func (*CodeRepository) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{26}
}

func (x *CodeRepository) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *CodeRepository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CodeRepository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeRepository) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *CodeRepository) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CodeRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeRepository) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *CodeRepository) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *CodeRepository) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *CodeRepository) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *CodeRepository) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Component is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Component struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Component_Application
	//	*Component_Library
	Type          isComponent_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Component) Reset() {
	*x = Component{}
	mi := &file_api_ontology_ontology_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{27}
}

func (x *Component) GetType() isComponent_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Component) GetApplication() *Application {
	if x != nil {
		if x, ok := x.Type.(*Component_Application); ok {
			return x.Application
		}
	}
	return nil
}

func (x *Component) GetLibrary() *Library {
	if x != nil {
		if x, ok := x.Type.(*Component_Library); ok {
			return x.Library
		}
	}
	return nil
}

type isComponent_Type interface {
	isComponent_Type()
}

type Component_Application struct {
	Application *Application `protobuf:"bytes,18554,opt,name=application,proto3,oneof"`
}

type Component_Library struct {
	Library *Library `protobuf:"bytes,14265,opt,name=library,proto3,oneof"`
}

func (*Component_Application) isComponent_Type() {}

func (*Component_Library) isComponent_Type() {}

// Compute is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Compute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Compute_Container
	//	*Compute_Function
	//	*Compute_VirtualMachine
	Type          isCompute_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Compute) Reset() {
	*x = Compute{}
	mi := &file_api_ontology_ontology_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Compute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compute) ProtoMessage() {}

func (x *Compute) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compute.ProtoReflect.Descriptor instead.
func (*Compute) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{28}
}

func (x *Compute) GetType() isCompute_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Compute) GetContainer() *Container {
	if x != nil {
		if x, ok := x.Type.(*Compute_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Compute) GetFunction() *Function {
	if x != nil {
		if x, ok := x.Type.(*Compute_Function); ok {
			return x.Function
		}
	}
	return nil
}

func (x *Compute) GetVirtualMachine() *VirtualMachine {
	if x != nil {
		if x, ok := x.Type.(*Compute_VirtualMachine); ok {
			return x.VirtualMachine
		}
	}
	return nil
}

type isCompute_Type interface {
	isCompute_Type()
}

type Compute_Container struct {
	Container *Container `protobuf:"bytes,1659,opt,name=container,proto3,oneof"`
}

type Compute_Function struct {
	Function *Function `protobuf:"bytes,14943,opt,name=function,proto3,oneof"`
}

type Compute_VirtualMachine struct {
	VirtualMachine *VirtualMachine `protobuf:"bytes,18360,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

func (*Compute_Container) isCompute_Type() {}

func (*Compute_Function) isCompute_Type() {}

func (*Compute_VirtualMachine) isCompute_Type() {}

// Confidentiality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Confidentiality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Confidentiality_CustomerKeyEncryption
	//	*Confidentiality_ManagedKeyEncryption
	//	*Confidentiality_EncryptionInUse
	//	*Confidentiality_TransportEncryption
	Type          isConfidentiality_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Confidentiality) Reset() {
	*x = Confidentiality{}
	mi := &file_api_ontology_ontology_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Confidentiality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confidentiality) ProtoMessage() {}

func (x *Confidentiality) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confidentiality.ProtoReflect.Descriptor instead.
func (*Confidentiality) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{29}
}

func (x *Confidentiality) GetType() isConfidentiality_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Confidentiality) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *Confidentiality) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

func (x *Confidentiality) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_EncryptionInUse); ok {
			return x.EncryptionInUse
		}
	}
	return nil
}

func (x *Confidentiality) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		if x, ok := x.Type.(*Confidentiality_TransportEncryption); ok {
			return x.TransportEncryption
		}
	}
	return nil
}

type isConfidentiality_Type interface {
	isConfidentiality_Type()
}

type Confidentiality_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type Confidentiality_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

type Confidentiality_EncryptionInUse struct {
	EncryptionInUse *EncryptionInUse `protobuf:"bytes,15775,opt,name=encryption_in_use,json=encryptionInUse,proto3,oneof"`
}

type Confidentiality_TransportEncryption struct {
	TransportEncryption *TransportEncryption `protobuf:"bytes,15929,opt,name=transport_encryption,json=transportEncryption,proto3,oneof"`
}

func (*Confidentiality_CustomerKeyEncryption) isConfidentiality_Type() {}

func (*Confidentiality_ManagedKeyEncryption) isConfidentiality_Type() {}

func (*Confidentiality_EncryptionInUse) isConfidentiality_Type() {}

func (*Confidentiality_TransportEncryption) isConfidentiality_Type() {}

// Container is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Container struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,9429,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12773,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,903,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,10112,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,13214,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,736,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,18367,opt,name=raw,proto3" json:"raw,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,14323,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,1707,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	ImageId             *string            `protobuf:"bytes,9825,opt,name=image_id,json=imageId,proto3,oneof" json:"image_id,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,250,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,15735,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,15151,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,16383,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,11967,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,14019,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_api_ontology_ontology_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{30}
}

func (x *Container) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Container) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Container) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Container) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *Container) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Container) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *Container) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *Container) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Container) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *Container) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Container) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *Container) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerImage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11155,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10874,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6384,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,13186,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18019,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2181,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10543,opt,name=raw,proto3" json:"raw,omitempty"`
	ApplicationId   *string          `protobuf:"bytes,9751,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,13766,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,10648,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14165,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6924,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{31}
}

func (x *ContainerImage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerImage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerImage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerImage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerImage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerImage) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *ContainerImage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerImage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerImage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerImage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerOrchestration is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerOrchestration struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10116,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,259,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,12671,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2619,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15294,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ManagementUrl              string                 `protobuf:"bytes,1007,opt,name=management_url,json=managementUrl,proto3" json:"management_url,omitempty"`
	Name                       string                 `protobuf:"bytes,18187,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,17471,opt,name=raw,proto3" json:"raw,omitempty"`
	ContainerIds    []string         `protobuf:"bytes,12733,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,13354,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2264,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,16309,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging *ResourceLogging `protobuf:"bytes,13646,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6319,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerOrchestration) Reset() {
	*x = ContainerOrchestration{}
	mi := &file_api_ontology_ontology_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerOrchestration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerOrchestration) ProtoMessage() {}

func (x *ContainerOrchestration) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerOrchestration.ProtoReflect.Descriptor instead.
func (*ContainerOrchestration) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{32}
}

func (x *ContainerOrchestration) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerOrchestration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerOrchestration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerOrchestration) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerOrchestration) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerOrchestration) GetManagementUrl() string {
	if x != nil {
		return x.ManagementUrl
	}
	return ""
}

func (x *ContainerOrchestration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerOrchestration) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerOrchestration) GetContainerIds() []string {
	if x != nil {
		return x.ContainerIds
	}
	return nil
}

func (x *ContainerOrchestration) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerOrchestration) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerOrchestration) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerOrchestration) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *ContainerOrchestration) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ContainerRegistry is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ContainerRegistry struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4243,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17637,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17713,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,12721,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2453,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1523,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,5030,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,15152,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18999,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2537,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,17864,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ContainerRegistry) Reset() {
	*x = ContainerRegistry{}
	mi := &file_api_ontology_ontology_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRegistry) ProtoMessage() {}

func (x *ContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRegistry.ProtoReflect.Descriptor instead.
func (*ContainerRegistry) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerRegistry) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ContainerRegistry) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerRegistry) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContainerRegistry) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ContainerRegistry) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainerRegistry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerRegistry) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ContainerRegistry) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ContainerRegistry) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ContainerRegistry) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ContainerRegistry) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Credential is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Credential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Credential_Certificate
	//	*Credential_Key
	//	*Credential_Secret
	Type          isCredential_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_api_ontology_ontology_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{34}
}

func (x *Credential) GetType() isCredential_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Credential) GetCertificate() *Certificate {
	if x != nil {
		if x, ok := x.Type.(*Credential_Certificate); ok {
			return x.Certificate
		}
	}
	return nil
}

func (x *Credential) GetKey() *Key {
	if x != nil {
		if x, ok := x.Type.(*Credential_Key); ok {
			return x.Key
		}
	}
	return nil
}

func (x *Credential) GetSecret() *Secret {
	if x != nil {
		if x, ok := x.Type.(*Credential_Secret); ok {
			return x.Secret
		}
	}
	return nil
}

type isCredential_Type interface {
	isCredential_Type()
}

type Credential_Certificate struct {
	Certificate *Certificate `protobuf:"bytes,8542,opt,name=certificate,proto3,oneof"`
}

type Credential_Key struct {
	Key *Key `protobuf:"bytes,5122,opt,name=key,proto3,oneof"`
}

type Credential_Secret struct {
	Secret *Secret `protobuf:"bytes,16127,opt,name=secret,proto3,oneof"`
}

func (*Credential_Certificate) isCredential_Type() {}

func (*Credential_Key) isCredential_Type() {}

func (*Credential_Secret) isCredential_Type() {}

// DocumentChecksum is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentChecksum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,943,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Errors        []*Error               `protobuf:"bytes,17465,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentChecksum) Reset() {
	*x = DocumentChecksum{}
	mi := &file_api_ontology_ontology_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentChecksum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentChecksum) ProtoMessage() {}

func (x *DocumentChecksum) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentChecksum.ProtoReflect.Descriptor instead.
func (*DocumentChecksum) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{35}
}

func (x *DocumentChecksum) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DocumentChecksum) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// CryptographicOperation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type CryptographicOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CryptographicOperation_Decryption
	//	*CryptographicOperation_Encryption
	//	*CryptographicOperation_CryptographicHash
	Type          isCryptographicOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptographicOperation) Reset() {
	*x = CryptographicOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptographicOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptographicOperation) ProtoMessage() {}

func (x *CryptographicOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptographicOperation.ProtoReflect.Descriptor instead.
func (*CryptographicOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{36}
}

func (x *CryptographicOperation) GetType() isCryptographicOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CryptographicOperation) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *CryptographicOperation) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *CryptographicOperation) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*CryptographicOperation_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

type isCryptographicOperation_Type interface {
	isCryptographicOperation_Type()
}

type CryptographicOperation_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type CryptographicOperation_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type CryptographicOperation_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

func (*CryptographicOperation_Decryption) isCryptographicOperation_Type() {}

func (*CryptographicOperation_Encryption) isCryptographicOperation_Type() {}

func (*CryptographicOperation_CryptographicHash) isCryptographicOperation_Type() {}

// CustomerKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CustomerKeyEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,14884,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Enabled       bool                   `protobuf:"varint,12751,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeyUrl        string                 `protobuf:"bytes,6413,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomerKeyEncryption) Reset() {
	*x = CustomerKeyEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerKeyEncryption) ProtoMessage() {}

func (x *CustomerKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerKeyEncryption.ProtoReflect.Descriptor instead.
func (*CustomerKeyEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{37}
}

func (x *CustomerKeyEncryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *CustomerKeyEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CustomerKeyEncryption) GetKeyUrl() string {
	if x != nil {
		return x.KeyUrl
	}
	return ""
}

// DDoSProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DDoSProtection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DDoSProtection) Reset() {
	*x = DDoSProtection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DDoSProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DDoSProtection) ProtoMessage() {}

func (x *DDoSProtection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DDoSProtection.ProtoReflect.Descriptor instead.
func (*DDoSProtection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{38}
}

// DatabaseConnect is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DatabaseConnect struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Calls              []string               `protobuf:"bytes,12922,rep,name=calls,proto3" json:"calls,omitempty"`
	CodeRegion         *CodeRegion            `protobuf:"bytes,5983,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	DatabaseServiceIds []string               `protobuf:"bytes,5749,rep,name=database_service_ids,json=databaseServiceIds,proto3" json:"database_service_ids,omitempty"`
	DatabaseStorageId  *string                `protobuf:"bytes,3674,opt,name=database_storage_id,json=databaseStorageId,proto3,oneof" json:"database_storage_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DatabaseConnect) Reset() {
	*x = DatabaseConnect{}
	mi := &file_api_ontology_ontology_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConnect) ProtoMessage() {}

func (x *DatabaseConnect) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConnect.ProtoReflect.Descriptor instead.
func (*DatabaseConnect) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{39}
}

func (x *DatabaseConnect) GetCalls() []string {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *DatabaseConnect) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *DatabaseConnect) GetDatabaseServiceIds() []string {
	if x != nil {
		return x.DatabaseServiceIds
	}
	return nil
}

func (x *DatabaseConnect) GetDatabaseStorageId() string {
	if x != nil && x.DatabaseStorageId != nil {
		return *x.DatabaseStorageId
	}
	return ""
}

// DatabaseOperation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type DatabaseOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DatabaseOperation_DatabaseConnect
	//	*DatabaseOperation_DatabaseQuery
	Type          isDatabaseOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseOperation) Reset() {
	*x = DatabaseOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseOperation) ProtoMessage() {}

func (x *DatabaseOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseOperation.ProtoReflect.Descriptor instead.
func (*DatabaseOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{40}
}

func (x *DatabaseOperation) GetType() isDatabaseOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DatabaseOperation) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*DatabaseOperation_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *DatabaseOperation) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*DatabaseOperation_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

type isDatabaseOperation_Type interface {
	isDatabaseOperation_Type()
}

type DatabaseOperation_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type DatabaseOperation_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

func (*DatabaseOperation_DatabaseConnect) isDatabaseOperation_Type() {}

func (*DatabaseOperation_DatabaseQuery) isDatabaseOperation_Type() {}

// DatabaseQuery is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DatabaseQuery struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Calls              []string               `protobuf:"bytes,7647,rep,name=calls,proto3" json:"calls,omitempty"`
	Modify             bool                   `protobuf:"varint,7601,opt,name=modify,proto3" json:"modify,omitempty"`
	CodeRegion         *CodeRegion            `protobuf:"bytes,8496,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	DatabaseServiceIds []string               `protobuf:"bytes,14358,rep,name=database_service_ids,json=databaseServiceIds,proto3" json:"database_service_ids,omitempty"`
	DatabaseStorageId  *string                `protobuf:"bytes,17880,opt,name=database_storage_id,json=databaseStorageId,proto3,oneof" json:"database_storage_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DatabaseQuery) Reset() {
	*x = DatabaseQuery{}
	mi := &file_api_ontology_ontology_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseQuery) ProtoMessage() {}

func (x *DatabaseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseQuery.ProtoReflect.Descriptor instead.
func (*DatabaseQuery) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{41}
}

func (x *DatabaseQuery) GetCalls() []string {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *DatabaseQuery) GetModify() bool {
	if x != nil {
		return x.Modify
	}
	return false
}

func (x *DatabaseQuery) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *DatabaseQuery) GetDatabaseServiceIds() []string {
	if x != nil {
		return x.DatabaseServiceIds
	}
	return nil
}

func (x *DatabaseQuery) GetDatabaseStorageId() string {
	if x != nil && x.DatabaseStorageId != nil {
		return *x.DatabaseStorageId
	}
	return ""
}

// DatabaseService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This class represents a database service. For example, a postgres SQL server would be modelled as a database service (with a host and IP) and the individual tables or collections would be modelled as a DatabaseStorage entity.
type DatabaseService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DatabaseService_DocumentDatabaseService
	//	*DatabaseService_KeyValueDatabaseService
	//	*DatabaseService_MultiModalDatabaseService
	//	*DatabaseService_RelationalDatabaseService
	Type          isDatabaseService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseService) Reset() {
	*x = DatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseService) ProtoMessage() {}

func (x *DatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseService.ProtoReflect.Descriptor instead.
func (*DatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{42}
}

func (x *DatabaseService) GetType() isDatabaseService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DatabaseService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *DatabaseService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*DatabaseService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

type isDatabaseService_Type interface {
	isDatabaseService_Type()
}

type DatabaseService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type DatabaseService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type DatabaseService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type DatabaseService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

func (*DatabaseService_DocumentDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_KeyValueDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_MultiModalDatabaseService) isDatabaseService_Type() {}

func (*DatabaseService_RelationalDatabaseService) isDatabaseService_Type() {}

// DatabaseStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// describes the actual database or a table in a database
type DatabaseStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14609,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4217,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,5278,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,10131,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15362,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1264,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,11538,opt,name=raw,proto3" json:"raw,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,14578,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,12872,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,16892,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,13674,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,15577,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,3160,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,16054,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,283,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DatabaseStorage) Reset() {
	*x = DatabaseStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseStorage) ProtoMessage() {}

func (x *DatabaseStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseStorage.ProtoReflect.Descriptor instead.
func (*DatabaseStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{43}
}

func (x *DatabaseStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DatabaseStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DatabaseStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DatabaseStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DatabaseStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DatabaseStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DatabaseStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *DatabaseStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *DatabaseStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DatabaseStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *DatabaseStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DatabaseStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DatabaseStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *DatabaseStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Decryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Decryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,3758,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,12634,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Decryption) Reset() {
	*x = Decryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Decryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decryption) ProtoMessage() {}

func (x *Decryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decryption.ProtoReflect.Descriptor instead.
func (*Decryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{44}
}

func (x *Decryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Decryption) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// DeviceProvisioningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DeviceProvisioningService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,17874,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,18095,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18723,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15029,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5934,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,9731,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14841,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,9853,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,12751,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,4221,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,8367,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceProvisioningService) Reset() {
	*x = DeviceProvisioningService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceProvisioningService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProvisioningService) ProtoMessage() {}

func (x *DeviceProvisioningService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProvisioningService.ProtoReflect.Descriptor instead.
func (*DeviceProvisioningService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{45}
}

func (x *DeviceProvisioningService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DeviceProvisioningService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceProvisioningService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceProvisioningService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DeviceProvisioningService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DeviceProvisioningService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceProvisioningService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DeviceProvisioningService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DeviceProvisioningService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DeviceProvisioningService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DeviceProvisioningService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Document is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// path: Describes either local path or path in URL format
type Document struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Document_GenericDocument
	//	*Document_SecurityAdvisoryDocument
	//	*Document_ServiceMetadataDocument
	Type          isDocument_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_api_ontology_ontology_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{46}
}

func (x *Document) GetType() isDocument_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Document) GetGenericDocument() *GenericDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_GenericDocument); ok {
			return x.GenericDocument
		}
	}
	return nil
}

func (x *Document) GetSecurityAdvisoryDocument() *SecurityAdvisoryDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_SecurityAdvisoryDocument); ok {
			return x.SecurityAdvisoryDocument
		}
	}
	return nil
}

func (x *Document) GetServiceMetadataDocument() *ServiceMetadataDocument {
	if x != nil {
		if x, ok := x.Type.(*Document_ServiceMetadataDocument); ok {
			return x.ServiceMetadataDocument
		}
	}
	return nil
}

type isDocument_Type interface {
	isDocument_Type()
}

type Document_GenericDocument struct {
	GenericDocument *GenericDocument `protobuf:"bytes,5702,opt,name=generic_document,json=genericDocument,proto3,oneof"`
}

type Document_SecurityAdvisoryDocument struct {
	SecurityAdvisoryDocument *SecurityAdvisoryDocument `protobuf:"bytes,8513,opt,name=security_advisory_document,json=securityAdvisoryDocument,proto3,oneof"`
}

type Document_ServiceMetadataDocument struct {
	ServiceMetadataDocument *ServiceMetadataDocument `protobuf:"bytes,13959,opt,name=service_metadata_document,json=serviceMetadataDocument,proto3,oneof"`
}

func (*Document_GenericDocument) isDocument_Type() {}

func (*Document_SecurityAdvisoryDocument) isDocument_Type() {}

func (*Document_ServiceMetadataDocument) isDocument_Type() {}

// DocumentDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11758,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,13774,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7556,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,9855,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,7051,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,3177,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12726,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,10225,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,7317,opt,name=raw,proto3" json:"raw,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,1003,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6961,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,6197,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,9480,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,7406,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,15064,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,953,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,17568,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,1112,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7020,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,10295,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,10074,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DocumentDatabaseService) Reset() {
	*x = DocumentDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentDatabaseService) ProtoMessage() {}

func (x *DocumentDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentDatabaseService.ProtoReflect.Descriptor instead.
func (*DocumentDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{47}
}

func (x *DocumentDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *DocumentDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DocumentDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DocumentDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *DocumentDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *DocumentDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DocumentDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DocumentDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *DocumentDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *DocumentDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *DocumentDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *DocumentDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *DocumentDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *DocumentDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *DocumentDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *DocumentDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DocumentDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *DocumentDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *DocumentDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *DocumentDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// DocumentLocation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type DocumentLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*DocumentLocation_LocalDocumentLocation
	//	*DocumentLocation_RemoteDocumentLocation
	Type          isDocumentLocation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentLocation) Reset() {
	*x = DocumentLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentLocation) ProtoMessage() {}

func (x *DocumentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentLocation.ProtoReflect.Descriptor instead.
func (*DocumentLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{48}
}

func (x *DocumentLocation) GetType() isDocumentLocation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DocumentLocation) GetLocalDocumentLocation() *LocalDocumentLocation {
	if x != nil {
		if x, ok := x.Type.(*DocumentLocation_LocalDocumentLocation); ok {
			return x.LocalDocumentLocation
		}
	}
	return nil
}

func (x *DocumentLocation) GetRemoteDocumentLocation() *RemoteDocumentLocation {
	if x != nil {
		if x, ok := x.Type.(*DocumentLocation_RemoteDocumentLocation); ok {
			return x.RemoteDocumentLocation
		}
	}
	return nil
}

type isDocumentLocation_Type interface {
	isDocumentLocation_Type()
}

type DocumentLocation_LocalDocumentLocation struct {
	LocalDocumentLocation *LocalDocumentLocation `protobuf:"bytes,10096,opt,name=local_document_location,json=localDocumentLocation,proto3,oneof"`
}

type DocumentLocation_RemoteDocumentLocation struct {
	RemoteDocumentLocation *RemoteDocumentLocation `protobuf:"bytes,9297,opt,name=remote_document_location,json=remoteDocumentLocation,proto3,oneof"`
}

func (*DocumentLocation_LocalDocumentLocation) isDocumentLocation_Type() {}

func (*DocumentLocation_RemoteDocumentLocation) isDocumentLocation_Type() {}

// EncryptionInUse is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type EncryptionInUse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,8542,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncryptionInUse) Reset() {
	*x = EncryptionInUse{}
	mi := &file_api_ontology_ontology_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncryptionInUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInUse) ProtoMessage() {}

func (x *EncryptionInUse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInUse.ProtoReflect.Descriptor instead.
func (*EncryptionInUse) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{49}
}

func (x *EncryptionInUse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Encryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Encryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,16274,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,9339,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Encryption) Reset() {
	*x = Encryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Encryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encryption) ProtoMessage() {}

func (x *Encryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encryption.ProtoReflect.Descriptor instead.
func (*Encryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{50}
}

func (x *Encryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Encryption) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// Error is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,3497,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_api_ontology_ontology_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{51}
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// FileStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type FileStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3786,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,6154,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4569,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,3582,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2787,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,16132,opt,name=name,proto3" json:"name,omitempty"`
	PublicAccess               bool                   `protobuf:"varint,10539,opt,name=public_access,json=publicAccess,proto3" json:"public_access,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,4379,opt,name=raw,proto3" json:"raw,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,1429,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,17584,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,5391,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,7897,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,1278,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,4433,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,18223,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,8987,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FileStorage) Reset() {
	*x = FileStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStorage) ProtoMessage() {}

func (x *FileStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStorage.ProtoReflect.Descriptor instead.
func (*FileStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{52}
}

func (x *FileStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FileStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FileStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileStorage) GetPublicAccess() bool {
	if x != nil {
		return x.PublicAccess
	}
	return false
}

func (x *FileStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FileStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *FileStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *FileStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FileStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *FileStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FileStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *FileStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// FileStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An file storage service represents the network service that is used to access a list of file storage shares. The storage itself is modelled as a FileStorage. The service has an http endpoint.
type FileStorageService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,18615,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9940,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17295,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16036,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,6543,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,9347,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,3149,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,12509,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,13948,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,16174,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,15440,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,16763,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,12282,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,4497,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,3568,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,10599,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,5495,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,18341,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,1779,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FileStorageService) Reset() {
	*x = FileStorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileStorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStorageService) ProtoMessage() {}

func (x *FileStorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStorageService.ProtoReflect.Descriptor instead.
func (*FileStorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{53}
}

func (x *FileStorageService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FileStorageService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FileStorageService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FileStorageService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FileStorageService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *FileStorageService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FileStorageService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileStorageService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FileStorageService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FileStorageService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *FileStorageService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *FileStorageService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FileStorageService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *FileStorageService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FileStorageService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FileStorageService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *FileStorageService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *FileStorageService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *FileStorageService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Firewall is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Firewall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Firewall_L3Firewall
	//	*Firewall_WebApplicationFirewall
	Type          isFirewall_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{54}
}

func (x *Firewall) GetType() isFirewall_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Firewall) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*Firewall_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *Firewall) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*Firewall_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

type isFirewall_Type interface {
	isFirewall_Type()
}

type Firewall_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type Firewall_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

func (*Firewall_L3Firewall) isFirewall_Type() {}

func (*Firewall_WebApplicationFirewall) isFirewall_Type() {}

// Framework is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Framework struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Framework_CloudSdk
	//	*Framework_HttpClientLibrary
	//	*Framework_HttpServer
	//	*Framework_Logger
	Type          isFramework_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Framework) Reset() {
	*x = Framework{}
	mi := &file_api_ontology_ontology_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{55}
}

func (x *Framework) GetType() isFramework_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Framework) GetCloudSdk() *CloudSDK {
	if x != nil {
		if x, ok := x.Type.(*Framework_CloudSdk); ok {
			return x.CloudSdk
		}
	}
	return nil
}

func (x *Framework) GetHttpClientLibrary() *HttpClientLibrary {
	if x != nil {
		if x, ok := x.Type.(*Framework_HttpClientLibrary); ok {
			return x.HttpClientLibrary
		}
	}
	return nil
}

func (x *Framework) GetHttpServer() *HttpServer {
	if x != nil {
		if x, ok := x.Type.(*Framework_HttpServer); ok {
			return x.HttpServer
		}
	}
	return nil
}

func (x *Framework) GetLogger() *Logger {
	if x != nil {
		if x, ok := x.Type.(*Framework_Logger); ok {
			return x.Logger
		}
	}
	return nil
}

type isFramework_Type interface {
	isFramework_Type()
}

type Framework_CloudSdk struct {
	CloudSdk *CloudSDK `protobuf:"bytes,776,opt,name=cloud_sdk,json=cloudSdk,proto3,oneof"`
}

type Framework_HttpClientLibrary struct {
	HttpClientLibrary *HttpClientLibrary `protobuf:"bytes,12339,opt,name=http_client_library,json=httpClientLibrary,proto3,oneof"`
}

type Framework_HttpServer struct {
	HttpServer *HttpServer `protobuf:"bytes,12938,opt,name=http_server,json=httpServer,proto3,oneof"`
}

type Framework_Logger struct {
	Logger *Logger `protobuf:"bytes,17354,opt,name=logger,proto3,oneof"`
}

func (*Framework_CloudSdk) isFramework_Type() {}

func (*Framework_HttpClientLibrary) isFramework_Type() {}

func (*Framework_HttpServer) isFramework_Type() {}

func (*Framework_Logger) isFramework_Type() {}

// Function is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Function struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4066,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,18203,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11465,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,4184,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15030,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,6517,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,1531,opt,name=raw,proto3" json:"raw,omitempty"`
	RuntimeLanguage     string             `protobuf:"bytes,7048,opt,name=runtime_language,json=runtimeLanguage,proto3" json:"runtime_language,omitempty"`
	RuntimeVersion      string             `protobuf:"bytes,16017,opt,name=runtime_version,json=runtimeVersion,proto3" json:"runtime_version,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,16630,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,8822,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,3840,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,18216,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,13435,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,11924,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,5288,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,9808,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Function) Reset() {
	*x = Function{}
	mi := &file_api_ontology_ontology_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{56}
}

func (x *Function) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Function) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Function) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Function) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Function) GetRuntimeLanguage() string {
	if x != nil {
		return x.RuntimeLanguage
	}
	return ""
}

func (x *Function) GetRuntimeVersion() string {
	if x != nil {
		return x.RuntimeVersion
	}
	return ""
}

func (x *Function) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *Function) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Function) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *Function) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Function) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *Function) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Function) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *Function) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// FunctionService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type FunctionService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3632,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17359,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,3617,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5242,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,7370,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18713,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,15731,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,17713,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,4925,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,17652,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,5429,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	FunctionIds               []string             `protobuf:"bytes,2362,rep,name=function_ids,json=functionIds,proto3" json:"function_ids,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,8116,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,17787,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,11473,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,5508,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,8143,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,7485,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FunctionService) Reset() {
	*x = FunctionService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionService) ProtoMessage() {}

func (x *FunctionService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionService.ProtoReflect.Descriptor instead.
func (*FunctionService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{57}
}

func (x *FunctionService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *FunctionService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FunctionService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunctionService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *FunctionService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *FunctionService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FunctionService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *FunctionService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *FunctionService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *FunctionService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *FunctionService) GetFunctionIds() []string {
	if x != nil {
		return x.FunctionIds
	}
	return nil
}

func (x *FunctionService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *FunctionService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *FunctionService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *FunctionService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *FunctionService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *FunctionService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Functionality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Functionality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Functionality_CipherSuite
	//	*Functionality_CodeRegion
	//	*Functionality_LocalDocumentLocation
	//	*Functionality_RemoteDocumentLocation
	//	*Functionality_Error
	//	*Functionality_HttpEndpoint
	//	*Functionality_HttpRequestHandler
	//	*Functionality_Decryption
	//	*Functionality_Encryption
	//	*Functionality_CryptographicHash
	//	*Functionality_DatabaseConnect
	//	*Functionality_DatabaseQuery
	//	*Functionality_HttpRequest
	//	*Functionality_LogOperation
	//	*Functionality_ObjectStorageRequest
	//	*Functionality_SchemaValidation
	//	*Functionality_SecurityAdvisoryFeed
	//	*Functionality_Vulnerability
	Type          isFunctionality_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Functionality) Reset() {
	*x = Functionality{}
	mi := &file_api_ontology_ontology_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Functionality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Functionality) ProtoMessage() {}

func (x *Functionality) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Functionality.ProtoReflect.Descriptor instead.
func (*Functionality) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{58}
}

func (x *Functionality) GetType() isFunctionality_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Functionality) GetCipherSuite() *CipherSuite {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CipherSuite); ok {
			return x.CipherSuite
		}
	}
	return nil
}

func (x *Functionality) GetCodeRegion() *CodeRegion {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CodeRegion); ok {
			return x.CodeRegion
		}
	}
	return nil
}

func (x *Functionality) GetLocalDocumentLocation() *LocalDocumentLocation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_LocalDocumentLocation); ok {
			return x.LocalDocumentLocation
		}
	}
	return nil
}

func (x *Functionality) GetRemoteDocumentLocation() *RemoteDocumentLocation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_RemoteDocumentLocation); ok {
			return x.RemoteDocumentLocation
		}
	}
	return nil
}

func (x *Functionality) GetError() *Error {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *Functionality) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpEndpoint); ok {
			return x.HttpEndpoint
		}
	}
	return nil
}

func (x *Functionality) GetHttpRequestHandler() *HttpRequestHandler {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpRequestHandler); ok {
			return x.HttpRequestHandler
		}
	}
	return nil
}

func (x *Functionality) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *Functionality) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *Functionality) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*Functionality_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

func (x *Functionality) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*Functionality_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *Functionality) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*Functionality_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

func (x *Functionality) GetHttpRequest() *HttpRequest {
	if x != nil {
		if x, ok := x.Type.(*Functionality_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *Functionality) GetLogOperation() *LogOperation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_LogOperation); ok {
			return x.LogOperation
		}
	}
	return nil
}

func (x *Functionality) GetObjectStorageRequest() *ObjectStorageRequest {
	if x != nil {
		if x, ok := x.Type.(*Functionality_ObjectStorageRequest); ok {
			return x.ObjectStorageRequest
		}
	}
	return nil
}

func (x *Functionality) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		if x, ok := x.Type.(*Functionality_SchemaValidation); ok {
			return x.SchemaValidation
		}
	}
	return nil
}

func (x *Functionality) GetSecurityAdvisoryFeed() *SecurityAdvisoryFeed {
	if x != nil {
		if x, ok := x.Type.(*Functionality_SecurityAdvisoryFeed); ok {
			return x.SecurityAdvisoryFeed
		}
	}
	return nil
}

func (x *Functionality) GetVulnerability() *Vulnerability {
	if x != nil {
		if x, ok := x.Type.(*Functionality_Vulnerability); ok {
			return x.Vulnerability
		}
	}
	return nil
}

type isFunctionality_Type interface {
	isFunctionality_Type()
}

type Functionality_CipherSuite struct {
	CipherSuite *CipherSuite `protobuf:"bytes,11132,opt,name=cipher_suite,json=cipherSuite,proto3,oneof"`
}

type Functionality_CodeRegion struct {
	CodeRegion *CodeRegion `protobuf:"bytes,9184,opt,name=code_region,json=codeRegion,proto3,oneof"`
}

type Functionality_LocalDocumentLocation struct {
	LocalDocumentLocation *LocalDocumentLocation `protobuf:"bytes,10096,opt,name=local_document_location,json=localDocumentLocation,proto3,oneof"`
}

type Functionality_RemoteDocumentLocation struct {
	RemoteDocumentLocation *RemoteDocumentLocation `protobuf:"bytes,9297,opt,name=remote_document_location,json=remoteDocumentLocation,proto3,oneof"`
}

type Functionality_Error struct {
	Error *Error `protobuf:"bytes,6544,opt,name=error,proto3,oneof"`
}

type Functionality_HttpEndpoint struct {
	HttpEndpoint *HttpEndpoint `protobuf:"bytes,4266,opt,name=http_endpoint,json=httpEndpoint,proto3,oneof"`
}

type Functionality_HttpRequestHandler struct {
	HttpRequestHandler *HttpRequestHandler `protobuf:"bytes,7403,opt,name=http_request_handler,json=httpRequestHandler,proto3,oneof"`
}

type Functionality_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type Functionality_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type Functionality_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

type Functionality_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type Functionality_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

type Functionality_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,2901,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type Functionality_LogOperation struct {
	LogOperation *LogOperation `protobuf:"bytes,14250,opt,name=log_operation,json=logOperation,proto3,oneof"`
}

type Functionality_ObjectStorageRequest struct {
	ObjectStorageRequest *ObjectStorageRequest `protobuf:"bytes,16887,opt,name=object_storage_request,json=objectStorageRequest,proto3,oneof"`
}

type Functionality_SchemaValidation struct {
	SchemaValidation *SchemaValidation `protobuf:"bytes,16331,opt,name=schema_validation,json=schemaValidation,proto3,oneof"`
}

type Functionality_SecurityAdvisoryFeed struct {
	SecurityAdvisoryFeed *SecurityAdvisoryFeed `protobuf:"bytes,13903,opt,name=security_advisory_feed,json=securityAdvisoryFeed,proto3,oneof"`
}

type Functionality_Vulnerability struct {
	Vulnerability *Vulnerability `protobuf:"bytes,5095,opt,name=vulnerability,proto3,oneof"`
}

func (*Functionality_CipherSuite) isFunctionality_Type() {}

func (*Functionality_CodeRegion) isFunctionality_Type() {}

func (*Functionality_LocalDocumentLocation) isFunctionality_Type() {}

func (*Functionality_RemoteDocumentLocation) isFunctionality_Type() {}

func (*Functionality_Error) isFunctionality_Type() {}

func (*Functionality_HttpEndpoint) isFunctionality_Type() {}

func (*Functionality_HttpRequestHandler) isFunctionality_Type() {}

func (*Functionality_Decryption) isFunctionality_Type() {}

func (*Functionality_Encryption) isFunctionality_Type() {}

func (*Functionality_CryptographicHash) isFunctionality_Type() {}

func (*Functionality_DatabaseConnect) isFunctionality_Type() {}

func (*Functionality_DatabaseQuery) isFunctionality_Type() {}

func (*Functionality_HttpRequest) isFunctionality_Type() {}

func (*Functionality_LogOperation) isFunctionality_Type() {}

func (*Functionality_ObjectStorageRequest) isFunctionality_Type() {}

func (*Functionality_SchemaValidation) isFunctionality_Type() {}

func (*Functionality_SecurityAdvisoryFeed) isFunctionality_Type() {}

func (*Functionality_Vulnerability) isFunctionality_Type() {}

// GenericDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This is a placeholder for all other documents, e.g. index.txt
type GenericDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,11055,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,5911,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,4013,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,11297,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,9013,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,5165,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,2153,opt,name=raw,proto3" json:"raw,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,14501,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentLocation   *DocumentLocation    `protobuf:"bytes,7961,opt,name=document_location,json=documentLocation,proto3" json:"document_location,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,16971,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,10767,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,15254,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,1202,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GenericDocument) Reset() {
	*x = GenericDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericDocument) ProtoMessage() {}

func (x *GenericDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericDocument.ProtoReflect.Descriptor instead.
func (*GenericDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{59}
}

func (x *GenericDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *GenericDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *GenericDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GenericDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *GenericDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *GenericDocument) GetDocumentLocation() *DocumentLocation {
	if x != nil {
		return x.DocumentLocation
	}
	return nil
}

func (x *GenericDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *GenericDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *GenericDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *GenericDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

// GenericNetworkService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A generic network service.
type GenericNetworkService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,16606,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14235,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,12784,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2744,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,11538,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5016,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13467,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,532,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,10844,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,16001,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,6238,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,10055,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,16059,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,12959,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,11825,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,13959,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,16789,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GenericNetworkService) Reset() {
	*x = GenericNetworkService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericNetworkService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericNetworkService) ProtoMessage() {}

func (x *GenericNetworkService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericNetworkService.ProtoReflect.Descriptor instead.
func (*GenericNetworkService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{60}
}

func (x *GenericNetworkService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *GenericNetworkService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GenericNetworkService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericNetworkService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *GenericNetworkService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *GenericNetworkService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GenericNetworkService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GenericNetworkService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GenericNetworkService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *GenericNetworkService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *GenericNetworkService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *GenericNetworkService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *GenericNetworkService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *GenericNetworkService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *GenericNetworkService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *GenericNetworkService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *GenericNetworkService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// GeoLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type GeoLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Region        string                 `protobuf:"bytes,7708,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoLocation) Reset() {
	*x = GeoLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoLocation) ProtoMessage() {}

func (x *GeoLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoLocation.ProtoReflect.Descriptor instead.
func (*GeoLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{61}
}

func (x *GeoLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// GeoRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type GeoRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,13910,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoRedundancy) Reset() {
	*x = GeoRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRedundancy) ProtoMessage() {}

func (x *GeoRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRedundancy.ProtoReflect.Descriptor instead.
func (*GeoRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{62}
}

func (x *GeoRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

// CryptographicHash is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CryptographicHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,9887,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	UsesSalt      bool                   `protobuf:"varint,8538,opt,name=uses_salt,json=usesSalt,proto3" json:"uses_salt,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,6454,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CryptographicHash) Reset() {
	*x = CryptographicHash{}
	mi := &file_api_ontology_ontology_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CryptographicHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptographicHash) ProtoMessage() {}

func (x *CryptographicHash) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptographicHash.ProtoReflect.Descriptor instead.
func (*CryptographicHash) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{63}
}

func (x *CryptographicHash) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *CryptographicHash) GetUsesSalt() bool {
	if x != nil {
		return x.UsesSalt
	}
	return false
}

func (x *CryptographicHash) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

// HttpClientLibrary is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpClientLibrary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpClientLibrary) Reset() {
	*x = HttpClientLibrary{}
	mi := &file_api_ontology_ontology_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpClientLibrary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpClientLibrary) ProtoMessage() {}

func (x *HttpClientLibrary) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpClientLibrary.ProtoReflect.Descriptor instead.
func (*HttpClientLibrary) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{64}
}

// HttpEndpoint is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An HTTP endpoint can set the "proxyTarget" property, in case that is routed through a (reverse) proxy, e.g. a load balancer.
// Via the Authenticity relationship, the access type can be specified, e.g. public access (no authentication), password-based, etc.
type HttpEndpoint struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Handler             string                 `protobuf:"bytes,9890,opt,name=handler,proto3" json:"handler,omitempty"`
	Method              string                 `protobuf:"bytes,125,opt,name=method,proto3" json:"method,omitempty"`
	Path                string                 `protobuf:"bytes,17149,opt,name=path,proto3" json:"path,omitempty"`
	Url                 string                 `protobuf:"bytes,8687,opt,name=url,proto3" json:"url,omitempty"`
	Authenticity        *Authenticity          `protobuf:"bytes,18568,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	TransportEncryption *TransportEncryption   `protobuf:"bytes,12277,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *HttpEndpoint) Reset() {
	*x = HttpEndpoint{}
	mi := &file_api_ontology_ontology_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpEndpoint) ProtoMessage() {}

func (x *HttpEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpEndpoint.ProtoReflect.Descriptor instead.
func (*HttpEndpoint) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{65}
}

func (x *HttpEndpoint) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *HttpEndpoint) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpEndpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpEndpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpEndpoint) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *HttpEndpoint) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// HttpRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Call          string                 `protobuf:"bytes,3127,opt,name=call,proto3" json:"call,omitempty"`
	ReqBody       string                 `protobuf:"bytes,14536,opt,name=req_body,json=reqBody,proto3" json:"req_body,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,6045,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	HttpEndpoints []*HttpEndpoint        `protobuf:"bytes,8204,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	mi := &file_api_ontology_ontology_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{66}
}

func (x *HttpRequest) GetCall() string {
	if x != nil {
		return x.Call
	}
	return ""
}

func (x *HttpRequest) GetReqBody() string {
	if x != nil {
		return x.ReqBody
	}
	return ""
}

func (x *HttpRequest) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *HttpRequest) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

// HttpRequestHandler is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpRequestHandler struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,3307,opt,name=path,proto3" json:"path,omitempty"`
	ApplicationId *string                `protobuf:"bytes,9918,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	HttpEndpoints []*HttpEndpoint        `protobuf:"bytes,8938,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequestHandler) Reset() {
	*x = HttpRequestHandler{}
	mi := &file_api_ontology_ontology_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequestHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequestHandler) ProtoMessage() {}

func (x *HttpRequestHandler) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequestHandler.ProtoReflect.Descriptor instead.
func (*HttpRequestHandler) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{67}
}

func (x *HttpRequestHandler) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpRequestHandler) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *HttpRequestHandler) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

// HttpServer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type HttpServer struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HttpRequestHandler *HttpRequestHandler    `protobuf:"bytes,18811,opt,name=http_request_handler,json=httpRequestHandler,proto3" json:"http_request_handler,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HttpServer) Reset() {
	*x = HttpServer{}
	mi := &file_api_ontology_ontology_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer) ProtoMessage() {}

func (x *HttpServer) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpServer.ProtoReflect.Descriptor instead.
func (*HttpServer) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{68}
}

func (x *HttpServer) GetHttpRequestHandler() *HttpRequestHandler {
	if x != nil {
		return x.HttpRequestHandler
	}
	return nil
}

// Identifiable is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Identifiable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Identifiable_Identity
	//	*Identifiable_RoleAssignment
	Type          isIdentifiable_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identifiable) Reset() {
	*x = Identifiable{}
	mi := &file_api_ontology_ontology_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identifiable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifiable) ProtoMessage() {}

func (x *Identifiable) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifiable.ProtoReflect.Descriptor instead.
func (*Identifiable) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{69}
}

func (x *Identifiable) GetType() isIdentifiable_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Identifiable) GetIdentity() *Identity {
	if x != nil {
		if x, ok := x.Type.(*Identifiable_Identity); ok {
			return x.Identity
		}
	}
	return nil
}

func (x *Identifiable) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		if x, ok := x.Type.(*Identifiable_RoleAssignment); ok {
			return x.RoleAssignment
		}
	}
	return nil
}

type isIdentifiable_Type interface {
	isIdentifiable_Type()
}

type Identifiable_Identity struct {
	Identity *Identity `protobuf:"bytes,14693,opt,name=identity,proto3,oneof"`
}

type Identifiable_RoleAssignment struct {
	RoleAssignment *RoleAssignment `protobuf:"bytes,2361,opt,name=role_assignment,json=roleAssignment,proto3,oneof"`
}

func (*Identifiable_Identity) isIdentifiable_Type() {}

func (*Identifiable_RoleAssignment) isIdentifiable_Type() {}

// Identity is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Identity struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Activated                  bool                   `protobuf:"varint,10116,opt,name=activated,proto3" json:"activated,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,14103,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9218,opt,name=description,proto3" json:"description,omitempty"`
	DisablePasswordPolicy      bool                   `protobuf:"varint,5968,opt,name=disable_password_policy,json=disablePasswordPolicy,proto3" json:"disable_password_policy,omitempty"`
	EnforceMfa                 bool                   `protobuf:"varint,13721,opt,name=enforce_mfa,json=enforceMfa,proto3" json:"enforce_mfa,omitempty"`
	Id                         string                 `protobuf:"bytes,5350,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15444,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,716,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastActivity               *timestamppb.Timestamp `protobuf:"bytes,2591,opt,name=last_activity,json=lastActivity,proto3" json:"last_activity,omitempty"`
	LoginDefenderEnabled       bool                   `protobuf:"varint,18632,opt,name=login_defender_enabled,json=loginDefenderEnabled,proto3" json:"login_defender_enabled,omitempty"`
	Name                       string                 `protobuf:"bytes,2578,opt,name=name,proto3" json:"name,omitempty"`
	Privileged                 bool                   `protobuf:"varint,2301,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16151,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity    *Authenticity    `protobuf:"bytes,6720,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	Authorization   *Authorization   `protobuf:"bytes,14925,opt,name=authorization,proto3" json:"authorization,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,9161,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15828,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,5028,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,4966,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{70}
}

func (x *Identity) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *Identity) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Identity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Identity) GetDisablePasswordPolicy() bool {
	if x != nil {
		return x.DisablePasswordPolicy
	}
	return false
}

func (x *Identity) GetEnforceMfa() bool {
	if x != nil {
		return x.EnforceMfa
	}
	return false
}

func (x *Identity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Identity) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Identity) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Identity) GetLastActivity() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivity
	}
	return nil
}

func (x *Identity) GetLoginDefenderEnabled() bool {
	if x != nil {
		return x.LoginDefenderEnabled
	}
	return false
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identity) GetPrivileged() bool {
	if x != nil {
		return x.Privileged
	}
	return false
}

func (x *Identity) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Identity) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *Identity) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Identity) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Identity) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Identity) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Identity) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Image is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Image struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Image_ContainerImage
	//	*Image_VmImage
	Type          isImage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_api_ontology_ontology_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{71}
}

func (x *Image) GetType() isImage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Image) GetContainerImage() *ContainerImage {
	if x != nil {
		if x, ok := x.Type.(*Image_ContainerImage); ok {
			return x.ContainerImage
		}
	}
	return nil
}

func (x *Image) GetVmImage() *VMImage {
	if x != nil {
		if x, ok := x.Type.(*Image_VmImage); ok {
			return x.VmImage
		}
	}
	return nil
}

type isImage_Type interface {
	isImage_Type()
}

type Image_ContainerImage struct {
	ContainerImage *ContainerImage `protobuf:"bytes,17864,opt,name=container_image,json=containerImage,proto3,oneof"`
}

type Image_VmImage struct {
	VmImage *VMImage `protobuf:"bytes,16417,opt,name=vm_image,json=vmImage,proto3,oneof"`
}

func (*Image_ContainerImage) isImage_Type() {}

func (*Image_VmImage) isImage_Type() {}

// Immutability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Immutability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1859,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Immutability) Reset() {
	*x = Immutability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Immutability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Immutability) ProtoMessage() {}

func (x *Immutability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Immutability.ProtoReflect.Descriptor instead.
func (*Immutability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{72}
}

func (x *Immutability) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Integrity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Integrity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Integrity_LocalAttestation
	//	*Integrity_RemoteAttestation
	//	*Integrity_AutomaticUpdates
	//	*Integrity_DocumentChecksum
	//	*Integrity_Immutability
	//	*Integrity_DocumentSignature
	Type          isIntegrity_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Integrity) Reset() {
	*x = Integrity{}
	mi := &file_api_ontology_ontology_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Integrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrity) ProtoMessage() {}

func (x *Integrity) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrity.ProtoReflect.Descriptor instead.
func (*Integrity) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{73}
}

func (x *Integrity) GetType() isIntegrity_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Integrity) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*Integrity_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *Integrity) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*Integrity_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

func (x *Integrity) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		if x, ok := x.Type.(*Integrity_AutomaticUpdates); ok {
			return x.AutomaticUpdates
		}
	}
	return nil
}

func (x *Integrity) GetDocumentChecksum() *DocumentChecksum {
	if x != nil {
		if x, ok := x.Type.(*Integrity_DocumentChecksum); ok {
			return x.DocumentChecksum
		}
	}
	return nil
}

func (x *Integrity) GetImmutability() *Immutability {
	if x != nil {
		if x, ok := x.Type.(*Integrity_Immutability); ok {
			return x.Immutability
		}
	}
	return nil
}

func (x *Integrity) GetDocumentSignature() *DocumentSignature {
	if x != nil {
		if x, ok := x.Type.(*Integrity_DocumentSignature); ok {
			return x.DocumentSignature
		}
	}
	return nil
}

type isIntegrity_Type interface {
	isIntegrity_Type()
}

type Integrity_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type Integrity_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

type Integrity_AutomaticUpdates struct {
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,9990,opt,name=automatic_updates,json=automaticUpdates,proto3,oneof"`
}

type Integrity_DocumentChecksum struct {
	DocumentChecksum *DocumentChecksum `protobuf:"bytes,16099,opt,name=document_checksum,json=documentChecksum,proto3,oneof"`
}

type Integrity_Immutability struct {
	Immutability *Immutability `protobuf:"bytes,2008,opt,name=immutability,proto3,oneof"`
}

type Integrity_DocumentSignature struct {
	DocumentSignature *DocumentSignature `protobuf:"bytes,7943,opt,name=document_signature,json=documentSignature,proto3,oneof"`
}

func (*Integrity_LocalAttestation) isIntegrity_Type() {}

func (*Integrity_RemoteAttestation) isIntegrity_Type() {}

func (*Integrity_AutomaticUpdates) isIntegrity_Type() {}

func (*Integrity_DocumentChecksum) isIntegrity_Type() {}

func (*Integrity_Immutability) isIntegrity_Type() {}

func (*Integrity_DocumentSignature) isIntegrity_Type() {}

// IoT is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type IoT struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*IoT_DeviceProvisioningService
	//	*IoT_MessagingHub
	Type          isIoT_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IoT) Reset() {
	*x = IoT{}
	mi := &file_api_ontology_ontology_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IoT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IoT) ProtoMessage() {}

func (x *IoT) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IoT.ProtoReflect.Descriptor instead.
func (*IoT) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{74}
}

func (x *IoT) GetType() isIoT_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IoT) GetDeviceProvisioningService() *DeviceProvisioningService {
	if x != nil {
		if x, ok := x.Type.(*IoT_DeviceProvisioningService); ok {
			return x.DeviceProvisioningService
		}
	}
	return nil
}

func (x *IoT) GetMessagingHub() *MessagingHub {
	if x != nil {
		if x, ok := x.Type.(*IoT_MessagingHub); ok {
			return x.MessagingHub
		}
	}
	return nil
}

type isIoT_Type interface {
	isIoT_Type()
}

type IoT_DeviceProvisioningService struct {
	DeviceProvisioningService *DeviceProvisioningService `protobuf:"bytes,14564,opt,name=device_provisioning_service,json=deviceProvisioningService,proto3,oneof"`
}

type IoT_MessagingHub struct {
	MessagingHub *MessagingHub `protobuf:"bytes,12819,opt,name=messaging_hub,json=messagingHub,proto3,oneof"`
}

func (*IoT_DeviceProvisioningService) isIoT_Type() {}

func (*IoT_MessagingHub) isIoT_Type() {}

// Job is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Job struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,2948,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,7869,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,14780,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5659,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17969,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18498,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,5776,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,2037,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,12361,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,15338,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,11249,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_api_ontology_ontology_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{75}
}

func (x *Job) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Job) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Job) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Job) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Job) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Job) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// TokenBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type TokenBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,1232,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,10600,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Enforced         bool                   `protobuf:"varint,6934,opt,name=enforced,proto3" json:"enforced,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TokenBasedAuthentication) Reset() {
	*x = TokenBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBasedAuthentication) ProtoMessage() {}

func (x *TokenBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBasedAuthentication.ProtoReflect.Descriptor instead.
func (*TokenBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{76}
}

func (x *TokenBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *TokenBasedAuthentication) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TokenBasedAuthentication) GetEnforced() bool {
	if x != nil {
		return x.Enforced
	}
	return false
}

// Key is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Key struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Algorithm                  string                 `protobuf:"bytes,1413,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,4922,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17406,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,12499,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,15098,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,15294,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,434,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,16202,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	KeySize                    int32                  `protobuf:"varint,16391,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4273,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18961,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,235,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,11846,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,16066,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,15145,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,12591,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,4414,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,9113,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Key) Reset() {
	*x = Key{}
	mi := &file_api_ontology_ontology_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{77}
}

func (x *Key) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *Key) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Key) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Key) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Key) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Key) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Key) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Key) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Key) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *Key) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Key) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Key) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Key) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Key) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Key) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Key) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Key) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Key) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// KeyValueDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type KeyValueDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,15632,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,1436,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,14675,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,1908,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,10855,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,13607,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11207,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,6710,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,14509,opt,name=raw,proto3" json:"raw,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,18959,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,11723,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,11235,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,6514,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,15867,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,10213,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,281,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,18945,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,3747,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,14846,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,5751,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,4417,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *KeyValueDatabaseService) Reset() {
	*x = KeyValueDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueDatabaseService) ProtoMessage() {}

func (x *KeyValueDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueDatabaseService.ProtoReflect.Descriptor instead.
func (*KeyValueDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{78}
}

func (x *KeyValueDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *KeyValueDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KeyValueDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyValueDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *KeyValueDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *KeyValueDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KeyValueDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyValueDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *KeyValueDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *KeyValueDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *KeyValueDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *KeyValueDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *KeyValueDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *KeyValueDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *KeyValueDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *KeyValueDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *KeyValueDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *KeyValueDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *KeyValueDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// KeyVault is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type KeyVault struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13116,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4543,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11681,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15576,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,11857,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,5705,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16199,opt,name=raw,proto3" json:"raw,omitempty"`
	CredentialIds   []string         `protobuf:"bytes,17792,rep,name=credential_ids,json=credentialIds,proto3" json:"credential_ids,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,413,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,2540,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,18361,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,5303,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeyVault) Reset() {
	*x = KeyVault{}
	mi := &file_api_ontology_ontology_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyVault) ProtoMessage() {}

func (x *KeyVault) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyVault.ProtoReflect.Descriptor instead.
func (*KeyVault) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{79}
}

func (x *KeyVault) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *KeyVault) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KeyVault) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyVault) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *KeyVault) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *KeyVault) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyVault) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *KeyVault) GetCredentialIds() []string {
	if x != nil {
		return x.CredentialIds
	}
	return nil
}

func (x *KeyVault) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *KeyVault) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *KeyVault) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *KeyVault) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// L3Firewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type L3Firewall struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,9476,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Inbound         bool                   `protobuf:"varint,1000,opt,name=inbound,proto3" json:"inbound,omitempty"`
	RestrictedPorts string                 `protobuf:"bytes,7341,opt,name=restricted_ports,json=restrictedPorts,proto3" json:"restricted_ports,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *L3Firewall) Reset() {
	*x = L3Firewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *L3Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3Firewall) ProtoMessage() {}

func (x *L3Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3Firewall.ProtoReflect.Descriptor instead.
func (*L3Firewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{80}
}

func (x *L3Firewall) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *L3Firewall) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *L3Firewall) GetRestrictedPorts() string {
	if x != nil {
		return x.RestrictedPorts
	}
	return ""
}

// Library is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Library struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,11987,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,2499,opt,name=description,proto3" json:"description,omitempty"`
	Id           string                 `protobuf:"bytes,11694,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,7546,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,18601,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,9988,opt,name=raw,proto3" json:"raw,omitempty"`
	CodeModuleIds    []string         `protobuf:"bytes,9719,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string          `protobuf:"bytes,295,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	Functionalities  []*Functionality `protobuf:"bytes,10589,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	LibraryIds       []string         `protobuf:"bytes,9020,rep,name=library_ids,json=libraryIds,proto3" json:"library_ids,omitempty"`
	ParentId         *string          `protobuf:"bytes,2928,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Vulnerabilities  []*Vulnerability `protobuf:"bytes,3131,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Library) Reset() {
	*x = Library{}
	mi := &file_api_ontology_ontology_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{81}
}

func (x *Library) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Library) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Library) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Library) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Library) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Library) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Library) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *Library) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *Library) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *Library) GetLibraryIds() []string {
	if x != nil {
		return x.LibraryIds
	}
	return nil
}

func (x *Library) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Library) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

// LoadBalancer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A Load Balancer may have multiple access restriction features, e.g. a L3 firewall and a WAF
type LoadBalancer struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,2708,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2822,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,8281,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16617,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,12489,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1121,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,16420,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,5004,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,16379,opt,name=raw,proto3" json:"raw,omitempty"`
	Url                       string               `protobuf:"bytes,2355,opt,name=url,proto3" json:"url,omitempty"`
	AccessRestriction         *AccessRestriction   `protobuf:"bytes,6911,opt,name=access_restriction,json=accessRestriction,proto3" json:"access_restriction,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,4102,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,4301,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,17490,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoints             []*HttpEndpoint      `protobuf:"bytes,10792,rep,name=http_endpoints,json=httpEndpoints,proto3" json:"http_endpoints,omitempty"`
	NetworkServiceIds         []string             `protobuf:"bytes,14537,rep,name=network_service_ids,json=networkServiceIds,proto3" json:"network_service_ids,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,10689,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,3822,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,8705,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,9485,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,16809,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LoadBalancer) Reset() {
	*x = LoadBalancer{}
	mi := &file_api_ontology_ontology_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadBalancer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancer) ProtoMessage() {}

func (x *LoadBalancer) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancer.ProtoReflect.Descriptor instead.
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{82}
}

func (x *LoadBalancer) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *LoadBalancer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoadBalancer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoadBalancer) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *LoadBalancer) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *LoadBalancer) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoadBalancer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadBalancer) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *LoadBalancer) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *LoadBalancer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LoadBalancer) GetAccessRestriction() *AccessRestriction {
	if x != nil {
		return x.AccessRestriction
	}
	return nil
}

func (x *LoadBalancer) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *LoadBalancer) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *LoadBalancer) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *LoadBalancer) GetHttpEndpoints() []*HttpEndpoint {
	if x != nil {
		return x.HttpEndpoints
	}
	return nil
}

func (x *LoadBalancer) GetNetworkServiceIds() []string {
	if x != nil {
		return x.NetworkServiceIds
	}
	return nil
}

func (x *LoadBalancer) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *LoadBalancer) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *LoadBalancer) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *LoadBalancer) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *LoadBalancer) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// LocalAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalAttestation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,12670,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalAttestation) Reset() {
	*x = LocalAttestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAttestation) ProtoMessage() {}

func (x *LocalAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAttestation.ProtoReflect.Descriptor instead.
func (*LocalAttestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{83}
}

func (x *LocalAttestation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// LocalDocumentLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalDocumentLocation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Path             string                 `protobuf:"bytes,5788,opt,name=path,proto3" json:"path,omitempty"`
	AtRestEncryption *AtRestEncryption      `protobuf:"bytes,47,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LocalDocumentLocation) Reset() {
	*x = LocalDocumentLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalDocumentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalDocumentLocation) ProtoMessage() {}

func (x *LocalDocumentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalDocumentLocation.ProtoReflect.Descriptor instead.
func (*LocalDocumentLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{84}
}

func (x *LocalDocumentLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LocalDocumentLocation) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

// LocalRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type LocalRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,5006,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalRedundancy) Reset() {
	*x = LocalRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalRedundancy) ProtoMessage() {}

func (x *LocalRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalRedundancy.ProtoReflect.Descriptor instead.
func (*LocalRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{85}
}

func (x *LocalRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

// LogOperation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A LogOperation is used by an application
type LogOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Call          string                 `protobuf:"bytes,6418,opt,name=call,proto3" json:"call,omitempty"`
	Value         string                 `protobuf:"bytes,7549,opt,name=value,proto3" json:"value,omitempty"`
	CodeRegion    *CodeRegion            `protobuf:"bytes,11664,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	Logging       *Logging               `protobuf:"bytes,12393,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogOperation) Reset() {
	*x = LogOperation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogOperation) ProtoMessage() {}

func (x *LogOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogOperation.ProtoReflect.Descriptor instead.
func (*LogOperation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{86}
}

func (x *LogOperation) GetCall() string {
	if x != nil {
		return x.Call
	}
	return ""
}

func (x *LogOperation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LogOperation) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *LogOperation) GetLogging() *Logging {
	if x != nil {
		return x.Logging
	}
	return nil
}

// Logger is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Logger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logger) Reset() {
	*x = Logger{}
	mi := &file_api_ontology_ontology_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{87}
}

// Logging is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Logging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Logging_ActivityLogging
	//	*Logging_ApplicationLogging
	//	*Logging_BootLogging
	//	*Logging_OsLogging
	//	*Logging_ResourceLogging
	Type          isLogging_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logging) Reset() {
	*x = Logging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging) ProtoMessage() {}

func (x *Logging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging.ProtoReflect.Descriptor instead.
func (*Logging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{88}
}

func (x *Logging) GetType() isLogging_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Logging) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *Logging) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *Logging) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *Logging) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *Logging) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*Logging_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

type isLogging_Type interface {
	isLogging_Type()
}

type Logging_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type Logging_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type Logging_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type Logging_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type Logging_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

func (*Logging_ActivityLogging) isLogging_Type() {}

func (*Logging_ApplicationLogging) isLogging_Type() {}

func (*Logging_BootLogging) isLogging_Type() {}

func (*Logging_OsLogging) isLogging_Type() {}

func (*Logging_ResourceLogging) isLogging_Type() {}

// LoggingService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A logging-as-a-service offering, e.g. for analyzing logs; has a Storage resource that stores the logs
type LoggingService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13718,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,15076,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,10888,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,3605,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,4262,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,769,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,3964,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,2549,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,3703,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,15306,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,10285,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,4238,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,1550,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,258,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,16013,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7044,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,17323,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,1203,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LoggingService) Reset() {
	*x = LoggingService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingService) ProtoMessage() {}

func (x *LoggingService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingService.ProtoReflect.Descriptor instead.
func (*LoggingService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{89}
}

func (x *LoggingService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *LoggingService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoggingService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoggingService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *LoggingService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *LoggingService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LoggingService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoggingService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *LoggingService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *LoggingService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *LoggingService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *LoggingService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *LoggingService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *LoggingService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *LoggingService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *LoggingService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *LoggingService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *LoggingService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// MachineLearning is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type MachineLearning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*MachineLearning_MlWorkspace
	Type          isMachineLearning_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineLearning) Reset() {
	*x = MachineLearning{}
	mi := &file_api_ontology_ontology_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineLearning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineLearning) ProtoMessage() {}

func (x *MachineLearning) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineLearning.ProtoReflect.Descriptor instead.
func (*MachineLearning) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{90}
}

func (x *MachineLearning) GetType() isMachineLearning_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MachineLearning) GetMlWorkspace() *MLWorkspace {
	if x != nil {
		if x, ok := x.Type.(*MachineLearning_MlWorkspace); ok {
			return x.MlWorkspace
		}
	}
	return nil
}

type isMachineLearning_Type interface {
	isMachineLearning_Type()
}

type MachineLearning_MlWorkspace struct {
	MlWorkspace *MLWorkspace `protobuf:"bytes,3361,opt,name=ml_workspace,json=mlWorkspace,proto3,oneof"`
}

func (*MachineLearning_MlWorkspace) isMachineLearning_Type() {}

// MalwareProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// analyzes the activity within a Compute resource
type MalwareProtection struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DurationSinceActive  *durationpb.Duration   `protobuf:"bytes,18754,opt,name=duration_since_active,json=durationSinceActive,proto3" json:"duration_since_active,omitempty"`
	Enabled              bool                   `protobuf:"varint,18004,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NumberOfThreatsFound int32                  `protobuf:"varint,11973,opt,name=number_of_threats_found,json=numberOfThreatsFound,proto3" json:"number_of_threats_found,omitempty"`
	ApplicationLogging   *ApplicationLogging    `protobuf:"bytes,8181,opt,name=application_logging,json=applicationLogging,proto3" json:"application_logging,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MalwareProtection) Reset() {
	*x = MalwareProtection{}
	mi := &file_api_ontology_ontology_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MalwareProtection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareProtection) ProtoMessage() {}

func (x *MalwareProtection) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareProtection.ProtoReflect.Descriptor instead.
func (*MalwareProtection) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{91}
}

func (x *MalwareProtection) GetDurationSinceActive() *durationpb.Duration {
	if x != nil {
		return x.DurationSinceActive
	}
	return nil
}

func (x *MalwareProtection) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *MalwareProtection) GetNumberOfThreatsFound() int32 {
	if x != nil {
		return x.NumberOfThreatsFound
	}
	return 0
}

func (x *MalwareProtection) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		return x.ApplicationLogging
	}
	return nil
}

// ManagedKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ManagedKeyEncryption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,2563,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Enabled       bool                   `protobuf:"varint,18264,opt,name=enabled,proto3" json:"enabled,omitempty"`
	KeyUrl        string                 `protobuf:"bytes,16266,opt,name=key_url,json=keyUrl,proto3" json:"key_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManagedKeyEncryption) Reset() {
	*x = ManagedKeyEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManagedKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedKeyEncryption) ProtoMessage() {}

func (x *ManagedKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedKeyEncryption.ProtoReflect.Descriptor instead.
func (*ManagedKeyEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{92}
}

func (x *ManagedKeyEncryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *ManagedKeyEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ManagedKeyEncryption) GetKeyUrl() string {
	if x != nil {
		return x.KeyUrl
	}
	return ""
}

// MessagingHub is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MessagingHub struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,8454,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11913,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,7039,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5261,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4650,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,4131,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,6465,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,10702,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18734,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2352,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,13729,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessagingHub) Reset() {
	*x = MessagingHub{}
	mi := &file_api_ontology_ontology_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessagingHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingHub) ProtoMessage() {}

func (x *MessagingHub) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingHub.ProtoReflect.Descriptor instead.
func (*MessagingHub) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{93}
}

func (x *MessagingHub) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MessagingHub) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessagingHub) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessagingHub) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MessagingHub) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MessagingHub) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessagingHub) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MessagingHub) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MessagingHub) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MessagingHub) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MessagingHub) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// CodeModule is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type CodeModule struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4660,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,1331,opt,name=description,proto3" json:"description,omitempty"`
	Id           string                 `protobuf:"bytes,3225,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,2688,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,16449,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,18119,opt,name=raw,proto3" json:"raw,omitempty"`
	CodeModuleIds    []string         `protobuf:"bytes,17307,rep,name=code_module_ids,json=codeModuleIds,proto3" json:"code_module_ids,omitempty"`
	CodeRepositoryId *string          `protobuf:"bytes,12032,opt,name=code_repository_id,json=codeRepositoryId,proto3,oneof" json:"code_repository_id,omitempty"`
	Functionalities  []*Functionality `protobuf:"bytes,5976,rep,name=functionalities,proto3" json:"functionalities,omitempty"`
	ParentId         *string          `protobuf:"bytes,18719,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CodeModule) Reset() {
	*x = CodeModule{}
	mi := &file_api_ontology_ontology_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeModule) ProtoMessage() {}

func (x *CodeModule) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeModule.ProtoReflect.Descriptor instead.
func (*CodeModule) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{94}
}

func (x *CodeModule) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *CodeModule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CodeModule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodeModule) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CodeModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CodeModule) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *CodeModule) GetCodeModuleIds() []string {
	if x != nil {
		return x.CodeModuleIds
	}
	return nil
}

func (x *CodeModule) GetCodeRepositoryId() string {
	if x != nil && x.CodeRepositoryId != nil {
		return *x.CodeRepositoryId
	}
	return ""
}

func (x *CodeModule) GetFunctionalities() []*Functionality {
	if x != nil {
		return x.Functionalities
	}
	return nil
}

func (x *CodeModule) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

// MultiFactorAuthentiation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MultiFactorAuthentiation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,17335,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Authenticities   []*Authenticity        `protobuf:"bytes,14915,rep,name=authenticities,proto3" json:"authenticities,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MultiFactorAuthentiation) Reset() {
	*x = MultiFactorAuthentiation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiFactorAuthentiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFactorAuthentiation) ProtoMessage() {}

func (x *MultiFactorAuthentiation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFactorAuthentiation.ProtoReflect.Descriptor instead.
func (*MultiFactorAuthentiation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{95}
}

func (x *MultiFactorAuthentiation) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *MultiFactorAuthentiation) GetAuthenticities() []*Authenticity {
	if x != nil {
		return x.Authenticities
	}
	return nil
}

// MultiModalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This class represents a database service that identifies itself as "multi-model", e.g., offers document storage as well as relational features.
type MultiModalDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10465,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,15631,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,5439,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16156,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,8280,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,7492,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13533,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,5,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,17449,opt,name=raw,proto3" json:"raw,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,7208,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,12713,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,18111,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,4221,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,8906,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,13719,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,9020,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,4408,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,13625,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,7826,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,3867,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,10570,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MultiModalDatabaseService) Reset() {
	*x = MultiModalDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiModalDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiModalDatabaseService) ProtoMessage() {}

func (x *MultiModalDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiModalDatabaseService.ProtoReflect.Descriptor instead.
func (*MultiModalDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{96}
}

func (x *MultiModalDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MultiModalDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MultiModalDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiModalDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MultiModalDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *MultiModalDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MultiModalDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiModalDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *MultiModalDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MultiModalDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *MultiModalDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *MultiModalDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MultiModalDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *MultiModalDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *MultiModalDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MultiModalDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *MultiModalDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *MultiModalDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *MultiModalDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkInterface is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NetworkInterface struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,5497,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,10885,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17981,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14370,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4721,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12404,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw               string             `protobuf:"bytes,5176,opt,name=raw,proto3" json:"raw,omitempty"`
	AccessRestriction *AccessRestriction `protobuf:"bytes,15102,opt,name=access_restriction,json=accessRestriction,proto3" json:"access_restriction,omitempty"`
	GeoLocation       *GeoLocation       `protobuf:"bytes,8368,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	NetworkServiceId  *string            `protobuf:"bytes,16990,opt,name=network_service_id,json=networkServiceId,proto3,oneof" json:"network_service_id,omitempty"`
	Redundancies      []*Redundancy      `protobuf:"bytes,13764,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId          *string            `protobuf:"bytes,11276,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics   *UsageStatistics   `protobuf:"bytes,3807,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_api_ontology_ontology_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{97}
}

func (x *NetworkInterface) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *NetworkInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkInterface) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *NetworkInterface) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *NetworkInterface) GetAccessRestriction() *AccessRestriction {
	if x != nil {
		return x.AccessRestriction
	}
	return nil
}

func (x *NetworkInterface) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *NetworkInterface) GetNetworkServiceId() string {
	if x != nil && x.NetworkServiceId != nil {
		return *x.NetworkServiceId
	}
	return ""
}

func (x *NetworkInterface) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *NetworkInterface) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *NetworkInterface) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkSecurityGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NetworkSecurityGroup struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,7240,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,3524,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11635,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,15045,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5905,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11440,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,11170,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,6795,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,13648,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14499,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6140,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkSecurityGroup) Reset() {
	*x = NetworkSecurityGroup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSecurityGroup) ProtoMessage() {}

func (x *NetworkSecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSecurityGroup.ProtoReflect.Descriptor instead.
func (*NetworkSecurityGroup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{98}
}

func (x *NetworkSecurityGroup) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *NetworkSecurityGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkSecurityGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NetworkSecurityGroup) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *NetworkSecurityGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkSecurityGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkSecurityGroup) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *NetworkSecurityGroup) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *NetworkSecurityGroup) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *NetworkSecurityGroup) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *NetworkSecurityGroup) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// NetworkService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// A NetworkService is an application (on the network layer) running on a Compute resource. It provides access to a resource
// has: Compute instance the network service is running on. This can also be a compute resource within the cloud provider itself if it is a managed service (e.g. Azure App Service)
type NetworkService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*NetworkService_FunctionService
	//	*NetworkService_GenericNetworkService
	//	*NetworkService_LoadBalancer
	//	*NetworkService_LoggingService
	//	*NetworkService_SecurityAdvisoryService
	//	*NetworkService_DocumentDatabaseService
	//	*NetworkService_KeyValueDatabaseService
	//	*NetworkService_MultiModalDatabaseService
	//	*NetworkService_RelationalDatabaseService
	//	*NetworkService_FileStorageService
	//	*NetworkService_ObjectStorageService
	Type          isNetworkService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkService) Reset() {
	*x = NetworkService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkService) ProtoMessage() {}

func (x *NetworkService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkService.ProtoReflect.Descriptor instead.
func (*NetworkService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{99}
}

func (x *NetworkService) GetType() isNetworkService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *NetworkService) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *NetworkService) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *NetworkService) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *NetworkService) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *NetworkService) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *NetworkService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *NetworkService) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *NetworkService) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*NetworkService_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

type isNetworkService_Type interface {
	isNetworkService_Type()
}

type NetworkService_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type NetworkService_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type NetworkService_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type NetworkService_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type NetworkService_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type NetworkService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type NetworkService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type NetworkService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type NetworkService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type NetworkService_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type NetworkService_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

func (*NetworkService_FunctionService) isNetworkService_Type() {}

func (*NetworkService_GenericNetworkService) isNetworkService_Type() {}

func (*NetworkService_LoadBalancer) isNetworkService_Type() {}

func (*NetworkService_LoggingService) isNetworkService_Type() {}

func (*NetworkService_SecurityAdvisoryService) isNetworkService_Type() {}

func (*NetworkService_DocumentDatabaseService) isNetworkService_Type() {}

func (*NetworkService_KeyValueDatabaseService) isNetworkService_Type() {}

func (*NetworkService_MultiModalDatabaseService) isNetworkService_Type() {}

func (*NetworkService_RelationalDatabaseService) isNetworkService_Type() {}

func (*NetworkService_FileStorageService) isNetworkService_Type() {}

func (*NetworkService_ObjectStorageService) isNetworkService_Type() {}

// Networking is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Networking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Networking_NetworkInterface
	//	*Networking_NetworkSecurityGroup
	//	*Networking_FunctionService
	//	*Networking_GenericNetworkService
	//	*Networking_LoadBalancer
	//	*Networking_LoggingService
	//	*Networking_SecurityAdvisoryService
	//	*Networking_DocumentDatabaseService
	//	*Networking_KeyValueDatabaseService
	//	*Networking_MultiModalDatabaseService
	//	*Networking_RelationalDatabaseService
	//	*Networking_FileStorageService
	//	*Networking_ObjectStorageService
	//	*Networking_VirtualNetwork
	//	*Networking_VirtualSubNetwork
	Type          isNetworking_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Networking) Reset() {
	*x = Networking{}
	mi := &file_api_ontology_ontology_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Networking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networking) ProtoMessage() {}

func (x *Networking) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networking.ProtoReflect.Descriptor instead.
func (*Networking) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{100}
}

func (x *Networking) GetType() isNetworking_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Networking) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		if x, ok := x.Type.(*Networking_NetworkInterface); ok {
			return x.NetworkInterface
		}
	}
	return nil
}

func (x *Networking) GetNetworkSecurityGroup() *NetworkSecurityGroup {
	if x != nil {
		if x, ok := x.Type.(*Networking_NetworkSecurityGroup); ok {
			return x.NetworkSecurityGroup
		}
	}
	return nil
}

func (x *Networking) GetFunctionService() *FunctionService {
	if x != nil {
		if x, ok := x.Type.(*Networking_FunctionService); ok {
			return x.FunctionService
		}
	}
	return nil
}

func (x *Networking) GetGenericNetworkService() *GenericNetworkService {
	if x != nil {
		if x, ok := x.Type.(*Networking_GenericNetworkService); ok {
			return x.GenericNetworkService
		}
	}
	return nil
}

func (x *Networking) GetLoadBalancer() *LoadBalancer {
	if x != nil {
		if x, ok := x.Type.(*Networking_LoadBalancer); ok {
			return x.LoadBalancer
		}
	}
	return nil
}

func (x *Networking) GetLoggingService() *LoggingService {
	if x != nil {
		if x, ok := x.Type.(*Networking_LoggingService); ok {
			return x.LoggingService
		}
	}
	return nil
}

func (x *Networking) GetSecurityAdvisoryService() *SecurityAdvisoryService {
	if x != nil {
		if x, ok := x.Type.(*Networking_SecurityAdvisoryService); ok {
			return x.SecurityAdvisoryService
		}
	}
	return nil
}

func (x *Networking) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*Networking_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *Networking) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*Networking_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *Networking) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*Networking_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

func (x *Networking) GetVirtualNetwork() *VirtualNetwork {
	if x != nil {
		if x, ok := x.Type.(*Networking_VirtualNetwork); ok {
			return x.VirtualNetwork
		}
	}
	return nil
}

func (x *Networking) GetVirtualSubNetwork() *VirtualSubNetwork {
	if x != nil {
		if x, ok := x.Type.(*Networking_VirtualSubNetwork); ok {
			return x.VirtualSubNetwork
		}
	}
	return nil
}

type isNetworking_Type interface {
	isNetworking_Type()
}

type Networking_NetworkInterface struct {
	NetworkInterface *NetworkInterface `protobuf:"bytes,9859,opt,name=network_interface,json=networkInterface,proto3,oneof"`
}

type Networking_NetworkSecurityGroup struct {
	NetworkSecurityGroup *NetworkSecurityGroup `protobuf:"bytes,12647,opt,name=network_security_group,json=networkSecurityGroup,proto3,oneof"`
}

type Networking_FunctionService struct {
	FunctionService *FunctionService `protobuf:"bytes,4929,opt,name=function_service,json=functionService,proto3,oneof"`
}

type Networking_GenericNetworkService struct {
	GenericNetworkService *GenericNetworkService `protobuf:"bytes,1382,opt,name=generic_network_service,json=genericNetworkService,proto3,oneof"`
}

type Networking_LoadBalancer struct {
	LoadBalancer *LoadBalancer `protobuf:"bytes,4201,opt,name=load_balancer,json=loadBalancer,proto3,oneof"`
}

type Networking_LoggingService struct {
	LoggingService *LoggingService `protobuf:"bytes,14131,opt,name=logging_service,json=loggingService,proto3,oneof"`
}

type Networking_SecurityAdvisoryService struct {
	SecurityAdvisoryService *SecurityAdvisoryService `protobuf:"bytes,173,opt,name=security_advisory_service,json=securityAdvisoryService,proto3,oneof"`
}

type Networking_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type Networking_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type Networking_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type Networking_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type Networking_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type Networking_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

type Networking_VirtualNetwork struct {
	VirtualNetwork *VirtualNetwork `protobuf:"bytes,2559,opt,name=virtual_network,json=virtualNetwork,proto3,oneof"`
}

type Networking_VirtualSubNetwork struct {
	VirtualSubNetwork *VirtualSubNetwork `protobuf:"bytes,11314,opt,name=virtual_sub_network,json=virtualSubNetwork,proto3,oneof"`
}

func (*Networking_NetworkInterface) isNetworking_Type() {}

func (*Networking_NetworkSecurityGroup) isNetworking_Type() {}

func (*Networking_FunctionService) isNetworking_Type() {}

func (*Networking_GenericNetworkService) isNetworking_Type() {}

func (*Networking_LoadBalancer) isNetworking_Type() {}

func (*Networking_LoggingService) isNetworking_Type() {}

func (*Networking_SecurityAdvisoryService) isNetworking_Type() {}

func (*Networking_DocumentDatabaseService) isNetworking_Type() {}

func (*Networking_KeyValueDatabaseService) isNetworking_Type() {}

func (*Networking_MultiModalDatabaseService) isNetworking_Type() {}

func (*Networking_RelationalDatabaseService) isNetworking_Type() {}

func (*Networking_FileStorageService) isNetworking_Type() {}

func (*Networking_ObjectStorageService) isNetworking_Type() {}

func (*Networking_VirtualNetwork) isNetworking_Type() {}

func (*Networking_VirtualSubNetwork) isNetworking_Type() {}

// NoAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type NoAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,12023,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NoAuthentication) Reset() {
	*x = NoAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoAuthentication) ProtoMessage() {}

func (x *NoAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoAuthentication.ProtoReflect.Descriptor instead.
func (*NoAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{101}
}

func (x *NoAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// OSLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type OSLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,207,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,12434,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,11358,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,7453,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	LoggingServiceIds        []string               `protobuf:"bytes,10850,rep,name=logging_service_ids,json=loggingServiceIds,proto3" json:"logging_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *OSLogging) Reset() {
	*x = OSLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OSLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSLogging) ProtoMessage() {}

func (x *OSLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSLogging.ProtoReflect.Descriptor instead.
func (*OSLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{102}
}

func (x *OSLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *OSLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *OSLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *OSLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

func (x *OSLogging) GetLoggingServiceIds() []string {
	if x != nil {
		return x.LoggingServiceIds
	}
	return nil
}

// OTPBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type OTPBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Activated        bool                   `protobuf:"varint,7456,opt,name=activated,proto3" json:"activated,omitempty"`
	ContextIsChecked bool                   `protobuf:"varint,18913,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OTPBasedAuthentication) Reset() {
	*x = OTPBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OTPBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTPBasedAuthentication) ProtoMessage() {}

func (x *OTPBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTPBasedAuthentication.ProtoReflect.Descriptor instead.
func (*OTPBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{103}
}

func (x *OTPBasedAuthentication) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *OTPBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// ObjectStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ObjectStorage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3389,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,7516,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4155,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,18085,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,15572,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,13009,opt,name=name,proto3" json:"name,omitempty"`
	PublicAccess               bool                   `protobuf:"varint,4621,opt,name=public_access,json=publicAccess,proto3" json:"public_access,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,6632,opt,name=raw,proto3" json:"raw,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,2034,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	Backups          []*Backup         `protobuf:"bytes,10118,rep,name=backups,proto3" json:"backups,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,8835,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Immutability     *Immutability     `protobuf:"bytes,13608,opt,name=immutability,proto3" json:"immutability,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,3309,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,1663,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,3619,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,8818,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ObjectStorage) Reset() {
	*x = ObjectStorage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorage) ProtoMessage() {}

func (x *ObjectStorage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorage.ProtoReflect.Descriptor instead.
func (*ObjectStorage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{104}
}

func (x *ObjectStorage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ObjectStorage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectStorage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectStorage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ObjectStorage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectStorage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectStorage) GetPublicAccess() bool {
	if x != nil {
		return x.PublicAccess
	}
	return false
}

func (x *ObjectStorage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ObjectStorage) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *ObjectStorage) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ObjectStorage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ObjectStorage) GetImmutability() *Immutability {
	if x != nil {
		return x.Immutability
	}
	return nil
}

func (x *ObjectStorage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ObjectStorage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ObjectStorage) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *ObjectStorage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ObjectStorageRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ObjectStorageRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Source           string                 `protobuf:"bytes,178,opt,name=source,proto3" json:"source,omitempty"`
	CodeRegion       *CodeRegion            `protobuf:"bytes,18257,opt,name=code_region,json=codeRegion,proto3" json:"code_region,omitempty"`
	ObjectStorageIds []string               `protobuf:"bytes,2364,rep,name=object_storage_ids,json=objectStorageIds,proto3" json:"object_storage_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ObjectStorageRequest) Reset() {
	*x = ObjectStorageRequest{}
	mi := &file_api_ontology_ontology_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorageRequest) ProtoMessage() {}

func (x *ObjectStorageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorageRequest.ProtoReflect.Descriptor instead.
func (*ObjectStorageRequest) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{105}
}

func (x *ObjectStorageRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ObjectStorageRequest) GetCodeRegion() *CodeRegion {
	if x != nil {
		return x.CodeRegion
	}
	return nil
}

func (x *ObjectStorageRequest) GetObjectStorageIds() []string {
	if x != nil {
		return x.ObjectStorageIds
	}
	return nil
}

// ObjectStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An object storage service represents the network service that is used to access a list of object storage containers. The storage itself is modelled as a ObjectStorage. The service has an http endpoint.
type ObjectStorageService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,11795,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11196,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18683,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16284,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,17168,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17764,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1365,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,8166,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,16651,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6852,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,4562,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,18831,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,6388,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,11741,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,1174,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,9311,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,8237,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,7390,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,14005,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ObjectStorageService) Reset() {
	*x = ObjectStorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectStorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStorageService) ProtoMessage() {}

func (x *ObjectStorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStorageService.ProtoReflect.Descriptor instead.
func (*ObjectStorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{106}
}

func (x *ObjectStorageService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ObjectStorageService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectStorageService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectStorageService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ObjectStorageService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *ObjectStorageService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectStorageService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectStorageService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ObjectStorageService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ObjectStorageService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *ObjectStorageService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *ObjectStorageService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ObjectStorageService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *ObjectStorageService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ObjectStorageService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ObjectStorageService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *ObjectStorageService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *ObjectStorageService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *ObjectStorageService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Operation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Operation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Operation_Decryption
	//	*Operation_Encryption
	//	*Operation_CryptographicHash
	//	*Operation_DatabaseConnect
	//	*Operation_DatabaseQuery
	//	*Operation_HttpRequest
	//	*Operation_LogOperation
	//	*Operation_ObjectStorageRequest
	Type          isOperation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Operation) Reset() {
	*x = Operation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{107}
}

func (x *Operation) GetType() isOperation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Operation) GetDecryption() *Decryption {
	if x != nil {
		if x, ok := x.Type.(*Operation_Decryption); ok {
			return x.Decryption
		}
	}
	return nil
}

func (x *Operation) GetEncryption() *Encryption {
	if x != nil {
		if x, ok := x.Type.(*Operation_Encryption); ok {
			return x.Encryption
		}
	}
	return nil
}

func (x *Operation) GetCryptographicHash() *CryptographicHash {
	if x != nil {
		if x, ok := x.Type.(*Operation_CryptographicHash); ok {
			return x.CryptographicHash
		}
	}
	return nil
}

func (x *Operation) GetDatabaseConnect() *DatabaseConnect {
	if x != nil {
		if x, ok := x.Type.(*Operation_DatabaseConnect); ok {
			return x.DatabaseConnect
		}
	}
	return nil
}

func (x *Operation) GetDatabaseQuery() *DatabaseQuery {
	if x != nil {
		if x, ok := x.Type.(*Operation_DatabaseQuery); ok {
			return x.DatabaseQuery
		}
	}
	return nil
}

func (x *Operation) GetHttpRequest() *HttpRequest {
	if x != nil {
		if x, ok := x.Type.(*Operation_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *Operation) GetLogOperation() *LogOperation {
	if x != nil {
		if x, ok := x.Type.(*Operation_LogOperation); ok {
			return x.LogOperation
		}
	}
	return nil
}

func (x *Operation) GetObjectStorageRequest() *ObjectStorageRequest {
	if x != nil {
		if x, ok := x.Type.(*Operation_ObjectStorageRequest); ok {
			return x.ObjectStorageRequest
		}
	}
	return nil
}

type isOperation_Type interface {
	isOperation_Type()
}

type Operation_Decryption struct {
	Decryption *Decryption `protobuf:"bytes,11278,opt,name=decryption,proto3,oneof"`
}

type Operation_Encryption struct {
	Encryption *Encryption `protobuf:"bytes,2715,opt,name=encryption,proto3,oneof"`
}

type Operation_CryptographicHash struct {
	CryptographicHash *CryptographicHash `protobuf:"bytes,7725,opt,name=cryptographic_hash,json=cryptographicHash,proto3,oneof"`
}

type Operation_DatabaseConnect struct {
	DatabaseConnect *DatabaseConnect `protobuf:"bytes,10798,opt,name=database_connect,json=databaseConnect,proto3,oneof"`
}

type Operation_DatabaseQuery struct {
	DatabaseQuery *DatabaseQuery `protobuf:"bytes,7698,opt,name=database_query,json=databaseQuery,proto3,oneof"`
}

type Operation_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,2901,opt,name=http_request,json=httpRequest,proto3,oneof"`
}

type Operation_LogOperation struct {
	LogOperation *LogOperation `protobuf:"bytes,14250,opt,name=log_operation,json=logOperation,proto3,oneof"`
}

type Operation_ObjectStorageRequest struct {
	ObjectStorageRequest *ObjectStorageRequest `protobuf:"bytes,16887,opt,name=object_storage_request,json=objectStorageRequest,proto3,oneof"`
}

func (*Operation_Decryption) isOperation_Type() {}

func (*Operation_Encryption) isOperation_Type() {}

func (*Operation_CryptographicHash) isOperation_Type() {}

func (*Operation_DatabaseConnect) isOperation_Type() {}

func (*Operation_DatabaseQuery) isOperation_Type() {}

func (*Operation_HttpRequest) isOperation_Type() {}

func (*Operation_LogOperation) isOperation_Type() {}

func (*Operation_ObjectStorageRequest) isOperation_Type() {}

// PasswordBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type PasswordBasedAuthentication struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Activated        bool                   `protobuf:"varint,11798,opt,name=activated,proto3" json:"activated,omitempty"`
	ContextIsChecked bool                   `protobuf:"varint,1362,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PasswordBasedAuthentication) Reset() {
	*x = PasswordBasedAuthentication{}
	mi := &file_api_ontology_ontology_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordBasedAuthentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordBasedAuthentication) ProtoMessage() {}

func (x *PasswordBasedAuthentication) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordBasedAuthentication.ProtoReflect.Descriptor instead.
func (*PasswordBasedAuthentication) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{108}
}

func (x *PasswordBasedAuthentication) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *PasswordBasedAuthentication) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

// PasswordPolicy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type PasswordPolicy struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,1562,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,16661,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,2029,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14885,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,716,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,8966,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10264,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,4406,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,3325,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2509,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,14852,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PasswordPolicy) Reset() {
	*x = PasswordPolicy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordPolicy) ProtoMessage() {}

func (x *PasswordPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordPolicy.ProtoReflect.Descriptor instead.
func (*PasswordPolicy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{109}
}

func (x *PasswordPolicy) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *PasswordPolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PasswordPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PasswordPolicy) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *PasswordPolicy) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PasswordPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PasswordPolicy) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *PasswordPolicy) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *PasswordPolicy) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *PasswordPolicy) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *PasswordPolicy) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// RBAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RBAC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
	BroadAssignments float32 `protobuf:"fixed32,5678,opt,name=broad_assignments,json=broadAssignments,proto3" json:"broad_assignments,omitempty"`
	// see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
	MixedDuties   float32 `protobuf:"fixed32,14446,opt,name=mixed_duties,json=mixedDuties,proto3" json:"mixed_duties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RBAC) Reset() {
	*x = RBAC{}
	mi := &file_api_ontology_ontology_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RBAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RBAC) ProtoMessage() {}

func (x *RBAC) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RBAC.ProtoReflect.Descriptor instead.
func (*RBAC) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{110}
}

func (x *RBAC) GetBroadAssignments() float32 {
	if x != nil {
		return x.BroadAssignments
	}
	return 0
}

func (x *RBAC) GetMixedDuties() float32 {
	if x != nil {
		return x.MixedDuties
	}
	return 0
}

// Redundancy is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Redundancy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Redundancy_GeoRedundancy
	//	*Redundancy_LocalRedundancy
	//	*Redundancy_ZoneRedundancy
	Type          isRedundancy_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Redundancy) Reset() {
	*x = Redundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Redundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redundancy) ProtoMessage() {}

func (x *Redundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redundancy.ProtoReflect.Descriptor instead.
func (*Redundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{111}
}

func (x *Redundancy) GetType() isRedundancy_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Redundancy) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *Redundancy) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *Redundancy) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*Redundancy_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

type isRedundancy_Type interface {
	isRedundancy_Type()
}

type Redundancy_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type Redundancy_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type Redundancy_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

func (*Redundancy_GeoRedundancy) isRedundancy_Type() {}

func (*Redundancy_LocalRedundancy) isRedundancy_Type() {}

func (*Redundancy_ZoneRedundancy) isRedundancy_Type() {}

// RelationalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RelationalDatabaseService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,10783,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12776,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,13147,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,12634,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,13907,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,5189,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,10710,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,285,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string               `protobuf:"bytes,308,opt,name=raw,proto3" json:"raw,omitempty"`
	AnomalyDetections         []*AnomalyDetection  `protobuf:"bytes,13020,rep,name=anomaly_detections,json=anomalyDetections,proto3" json:"anomaly_detections,omitempty"`
	Authenticity              *Authenticity        `protobuf:"bytes,6,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string              `protobuf:"bytes,18729,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation         `protobuf:"bytes,2744,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	HttpEndpoint              *HttpEndpoint        `protobuf:"bytes,5892,opt,name=http_endpoint,json=httpEndpoint,proto3" json:"http_endpoint,omitempty"`
	MalwareProtection         *MalwareProtection   `protobuf:"bytes,12233,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	Redundancies              []*Redundancy        `protobuf:"bytes,15094,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string              `protobuf:"bytes,4594,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ServiceMetadataDocumentId *string              `protobuf:"bytes,8061,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	StorageIds                []string             `protobuf:"bytes,4243,rep,name=storage_ids,json=storageIds,proto3" json:"storage_ids,omitempty"`
	TransportEncryption       *TransportEncryption `protobuf:"bytes,11409,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics     `protobuf:"bytes,9703,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *RelationalDatabaseService) Reset() {
	*x = RelationalDatabaseService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationalDatabaseService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationalDatabaseService) ProtoMessage() {}

func (x *RelationalDatabaseService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationalDatabaseService.ProtoReflect.Descriptor instead.
func (*RelationalDatabaseService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{112}
}

func (x *RelationalDatabaseService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RelationalDatabaseService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RelationalDatabaseService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RelationalDatabaseService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *RelationalDatabaseService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *RelationalDatabaseService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RelationalDatabaseService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationalDatabaseService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *RelationalDatabaseService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *RelationalDatabaseService) GetAnomalyDetections() []*AnomalyDetection {
	if x != nil {
		return x.AnomalyDetections
	}
	return nil
}

func (x *RelationalDatabaseService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RelationalDatabaseService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *RelationalDatabaseService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *RelationalDatabaseService) GetHttpEndpoint() *HttpEndpoint {
	if x != nil {
		return x.HttpEndpoint
	}
	return nil
}

func (x *RelationalDatabaseService) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *RelationalDatabaseService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *RelationalDatabaseService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *RelationalDatabaseService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *RelationalDatabaseService) GetStorageIds() []string {
	if x != nil {
		return x.StorageIds
	}
	return nil
}

func (x *RelationalDatabaseService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *RelationalDatabaseService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// RemoteAttestation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RemoteAttestation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreationTime  *timestamppb.Timestamp `protobuf:"bytes,7501,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Enabled       bool                   `protobuf:"varint,1238,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Status        bool                   `protobuf:"varint,9341,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteAttestation) Reset() {
	*x = RemoteAttestation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteAttestation) ProtoMessage() {}

func (x *RemoteAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteAttestation.ProtoReflect.Descriptor instead.
func (*RemoteAttestation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{113}
}

func (x *RemoteAttestation) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RemoteAttestation) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RemoteAttestation) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

// RemoteDocumentLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RemoteDocumentLocation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Path                string                 `protobuf:"bytes,1220,opt,name=path,proto3" json:"path,omitempty"`
	Authenticity        *Authenticity          `protobuf:"bytes,8682,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	TransportEncryption *TransportEncryption   `protobuf:"bytes,17914,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RemoteDocumentLocation) Reset() {
	*x = RemoteDocumentLocation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteDocumentLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDocumentLocation) ProtoMessage() {}

func (x *RemoteDocumentLocation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDocumentLocation.ProtoReflect.Descriptor instead.
func (*RemoteDocumentLocation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{114}
}

func (x *RemoteDocumentLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemoteDocumentLocation) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RemoteDocumentLocation) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

// ResourceGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ResourceGroup struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,16852,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,12107,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,11216,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14821,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17517,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,18950,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,16903,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,773,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,1522,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,14157,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2564,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ResourceGroup) Reset() {
	*x = ResourceGroup{}
	mi := &file_api_ontology_ontology_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroup) ProtoMessage() {}

func (x *ResourceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroup.ProtoReflect.Descriptor instead.
func (*ResourceGroup) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{115}
}

func (x *ResourceGroup) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ResourceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResourceGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceGroup) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *ResourceGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceGroup) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ResourceGroup) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *ResourceGroup) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *ResourceGroup) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ResourceGroup) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ResourceLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ResourceLogging struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Enabled                  bool                   `protobuf:"varint,1509,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MonitoringLogDataEnabled bool                   `protobuf:"varint,6804,opt,name=monitoring_log_data_enabled,json=monitoringLogDataEnabled,proto3" json:"monitoring_log_data_enabled,omitempty"`
	RetentionPeriod          *durationpb.Duration   `protobuf:"bytes,6776,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	SecurityAlertsEnabled    bool                   `protobuf:"varint,6099,opt,name=security_alerts_enabled,json=securityAlertsEnabled,proto3" json:"security_alerts_enabled,omitempty"`
	LoggingServiceIds        []string               `protobuf:"bytes,15310,rep,name=logging_service_ids,json=loggingServiceIds,proto3" json:"logging_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ResourceLogging) Reset() {
	*x = ResourceLogging{}
	mi := &file_api_ontology_ontology_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLogging) ProtoMessage() {}

func (x *ResourceLogging) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLogging.ProtoReflect.Descriptor instead.
func (*ResourceLogging) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{116}
}

func (x *ResourceLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ResourceLogging) GetMonitoringLogDataEnabled() bool {
	if x != nil {
		return x.MonitoringLogDataEnabled
	}
	return false
}

func (x *ResourceLogging) GetRetentionPeriod() *durationpb.Duration {
	if x != nil {
		return x.RetentionPeriod
	}
	return nil
}

func (x *ResourceLogging) GetSecurityAlertsEnabled() bool {
	if x != nil {
		return x.SecurityAlertsEnabled
	}
	return false
}

func (x *ResourceLogging) GetLoggingServiceIds() []string {
	if x != nil {
		return x.LoggingServiceIds
	}
	return nil
}

// RoleAssignment is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type RoleAssignment struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Activated                  bool                   `protobuf:"varint,11248,opt,name=activated,proto3" json:"activated,omitempty"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,13977,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,8960,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6310,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,16789,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18346,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2963,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,10862,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity    *Authenticity    `protobuf:"bytes,11180,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	Authorization   *Authorization   `protobuf:"bytes,13796,opt,name=authorization,proto3" json:"authorization,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,12302,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,13392,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2313,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2808,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RoleAssignment) Reset() {
	*x = RoleAssignment{}
	mi := &file_api_ontology_ontology_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignment) ProtoMessage() {}

func (x *RoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignment.ProtoReflect.Descriptor instead.
func (*RoleAssignment) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{117}
}

func (x *RoleAssignment) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *RoleAssignment) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *RoleAssignment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RoleAssignment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RoleAssignment) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *RoleAssignment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RoleAssignment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoleAssignment) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *RoleAssignment) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *RoleAssignment) GetAuthorization() *Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *RoleAssignment) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *RoleAssignment) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *RoleAssignment) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *RoleAssignment) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SchemaValidation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SchemaValidation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        string                 `protobuf:"bytes,1670,opt,name=format,proto3" json:"format,omitempty"`
	SchemaUrl     string                 `protobuf:"bytes,13358,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	Errors        []*Error               `protobuf:"bytes,8879,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaValidation) Reset() {
	*x = SchemaValidation{}
	mi := &file_api_ontology_ontology_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaValidation) ProtoMessage() {}

func (x *SchemaValidation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaValidation.ProtoReflect.Descriptor instead.
func (*SchemaValidation) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{118}
}

func (x *SchemaValidation) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *SchemaValidation) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *SchemaValidation) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Secret is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Secret struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,17509,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,11419,opt,name=description,proto3" json:"description,omitempty"`
	Enabled                    bool                   `protobuf:"varint,5437,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpirationDate             *timestamppb.Timestamp `protobuf:"bytes,2358,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	Id                         string                 `protobuf:"bytes,13519,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2994,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	IsManaged                  bool                   `protobuf:"varint,3899,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,1676,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,964,opt,name=name,proto3" json:"name,omitempty"`
	NotBeforeDate              *timestamppb.Timestamp `protobuf:"bytes,13335,opt,name=not_before_date,json=notBeforeDate,proto3" json:"not_before_date,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string           `protobuf:"bytes,5998,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation      *GeoLocation     `protobuf:"bytes,2663,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	InfrastructureId *string          `protobuf:"bytes,962,opt,name=infrastructure_id,json=infrastructureId,proto3,oneof" json:"infrastructure_id,omitempty"`
	Redundancies     []*Redundancy    `protobuf:"bytes,14309,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string          `protobuf:"bytes,13447,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics  *UsageStatistics `protobuf:"bytes,10517,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_api_ontology_ontology_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{119}
}

func (x *Secret) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Secret) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Secret) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Secret) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Secret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Secret) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Secret) GetIsManaged() bool {
	if x != nil {
		return x.IsManaged
	}
	return false
}

func (x *Secret) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetNotBeforeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBeforeDate
	}
	return nil
}

func (x *Secret) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Secret) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Secret) GetInfrastructureId() string {
	if x != nil && x.InfrastructureId != nil {
		return *x.InfrastructureId
	}
	return ""
}

func (x *Secret) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Secret) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Secret) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SecurityAdvisoryDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SecurityAdvisoryDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,12215,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,18614,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,13221,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,10862,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,8011,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,953,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,1803,opt,name=raw,proto3" json:"raw,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,14645,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentLocation   *DocumentLocation    `protobuf:"bytes,11674,opt,name=document_location,json=documentLocation,proto3" json:"document_location,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,15164,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,17394,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,2392,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,11115,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	Vulnerabilities    []*Vulnerability     `protobuf:"bytes,11700,rep,name=vulnerabilities,proto3" json:"vulnerabilities,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SecurityAdvisoryDocument) Reset() {
	*x = SecurityAdvisoryDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryDocument) ProtoMessage() {}

func (x *SecurityAdvisoryDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryDocument.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{120}
}

func (x *SecurityAdvisoryDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDocumentLocation() *DocumentLocation {
	if x != nil {
		return x.DocumentLocation
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *SecurityAdvisoryDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

func (x *SecurityAdvisoryDocument) GetVulnerabilities() []*Vulnerability {
	if x != nil {
		return x.Vulnerabilities
	}
	return nil
}

// SecurityAdvisoryFeed is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SecurityAdvisoryFeed struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	SecurityAdvisoryDocumentIds []string               `protobuf:"bytes,1213,rep,name=security_advisory_document_ids,json=securityAdvisoryDocumentIds,proto3" json:"security_advisory_document_ids,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *SecurityAdvisoryFeed) Reset() {
	*x = SecurityAdvisoryFeed{}
	mi := &file_api_ontology_ontology_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryFeed) ProtoMessage() {}

func (x *SecurityAdvisoryFeed) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryFeed.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryFeed) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{121}
}

func (x *SecurityAdvisoryFeed) GetSecurityAdvisoryDocumentIds() []string {
	if x != nil {
		return x.SecurityAdvisoryDocumentIds
	}
	return nil
}

// SecurityAdvisoryService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This service discloses security advisories, e.g. according to the CSAF standard. It has one or more feeds that contain the actual advisories as well as multiple (public) keys that are used to sign the advisory documents.
type SecurityAdvisoryService struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,3025,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2320,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,18683,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,4910,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Ips                        []string               `protobuf:"bytes,2661,rep,name=ips,proto3" json:"ips,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,837,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,2102,opt,name=name,proto3" json:"name,omitempty"`
	Ports                      []uint32               `protobuf:"varint,4555,rep,packed,name=ports,proto3" json:"ports,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                       string                  `protobuf:"bytes,10467,opt,name=raw,proto3" json:"raw,omitempty"`
	Authenticity              *Authenticity           `protobuf:"bytes,13452,opt,name=authenticity,proto3" json:"authenticity,omitempty"`
	ComputeId                 *string                 `protobuf:"bytes,7662,opt,name=compute_id,json=computeId,proto3,oneof" json:"compute_id,omitempty"`
	GeoLocation               *GeoLocation            `protobuf:"bytes,16008,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	KeyIds                    []string                `protobuf:"bytes,16432,rep,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	Redundancies              []*Redundancy           `protobuf:"bytes,18001,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId                  *string                 `protobuf:"bytes,592,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SecurityAdvisoryFeeds     []*SecurityAdvisoryFeed `protobuf:"bytes,12072,rep,name=security_advisory_feeds,json=securityAdvisoryFeeds,proto3" json:"security_advisory_feeds,omitempty"`
	ServiceMetadataDocumentId *string                 `protobuf:"bytes,9438,opt,name=service_metadata_document_id,json=serviceMetadataDocumentId,proto3,oneof" json:"service_metadata_document_id,omitempty"`
	TransportEncryption       *TransportEncryption    `protobuf:"bytes,11117,opt,name=transport_encryption,json=transportEncryption,proto3" json:"transport_encryption,omitempty"`
	UsageStatistics           *UsageStatistics        `protobuf:"bytes,3613,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SecurityAdvisoryService) Reset() {
	*x = SecurityAdvisoryService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityAdvisoryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityAdvisoryService) ProtoMessage() {}

func (x *SecurityAdvisoryService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityAdvisoryService.ProtoReflect.Descriptor instead.
func (*SecurityAdvisoryService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{122}
}

func (x *SecurityAdvisoryService) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *SecurityAdvisoryService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityAdvisoryService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SecurityAdvisoryService) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *SecurityAdvisoryService) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *SecurityAdvisoryService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SecurityAdvisoryService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecurityAdvisoryService) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *SecurityAdvisoryService) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *SecurityAdvisoryService) GetAuthenticity() *Authenticity {
	if x != nil {
		return x.Authenticity
	}
	return nil
}

func (x *SecurityAdvisoryService) GetComputeId() string {
	if x != nil && x.ComputeId != nil {
		return *x.ComputeId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *SecurityAdvisoryService) GetKeyIds() []string {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *SecurityAdvisoryService) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *SecurityAdvisoryService) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetSecurityAdvisoryFeeds() []*SecurityAdvisoryFeed {
	if x != nil {
		return x.SecurityAdvisoryFeeds
	}
	return nil
}

func (x *SecurityAdvisoryService) GetServiceMetadataDocumentId() string {
	if x != nil && x.ServiceMetadataDocumentId != nil {
		return *x.ServiceMetadataDocumentId
	}
	return ""
}

func (x *SecurityAdvisoryService) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		return x.TransportEncryption
	}
	return nil
}

func (x *SecurityAdvisoryService) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// SecurityFeature is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type SecurityFeature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*SecurityFeature_AnomalyDetection
	//	*SecurityFeature_ActivityLogging
	//	*SecurityFeature_ApplicationLogging
	//	*SecurityFeature_BootLogging
	//	*SecurityFeature_OsLogging
	//	*SecurityFeature_ResourceLogging
	//	*SecurityFeature_MalwareProtection
	//	*SecurityFeature_UsageStatistics
	//	*SecurityFeature_CertificateBasedAuthentication
	//	*SecurityFeature_TokenBasedAuthentication
	//	*SecurityFeature_MultiFactorAuthentiation
	//	*SecurityFeature_NoAuthentication
	//	*SecurityFeature_OtpBasedAuthentication
	//	*SecurityFeature_PasswordBasedAuthentication
	//	*SecurityFeature_SingleSignOn
	//	*SecurityFeature_Abac
	//	*SecurityFeature_L3Firewall
	//	*SecurityFeature_WebApplicationFirewall
	//	*SecurityFeature_Rbac
	//	*SecurityFeature_Backup
	//	*SecurityFeature_DDoSProtection
	//	*SecurityFeature_GeoLocation
	//	*SecurityFeature_GeoRedundancy
	//	*SecurityFeature_LocalRedundancy
	//	*SecurityFeature_ZoneRedundancy
	//	*SecurityFeature_CustomerKeyEncryption
	//	*SecurityFeature_ManagedKeyEncryption
	//	*SecurityFeature_EncryptionInUse
	//	*SecurityFeature_TransportEncryption
	//	*SecurityFeature_LocalAttestation
	//	*SecurityFeature_RemoteAttestation
	//	*SecurityFeature_AutomaticUpdates
	//	*SecurityFeature_DocumentChecksum
	//	*SecurityFeature_Immutability
	//	*SecurityFeature_DocumentSignature
	Type          isSecurityFeature_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityFeature) Reset() {
	*x = SecurityFeature{}
	mi := &file_api_ontology_ontology_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityFeature) ProtoMessage() {}

func (x *SecurityFeature) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityFeature.ProtoReflect.Descriptor instead.
func (*SecurityFeature) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{123}
}

func (x *SecurityFeature) GetType() isSecurityFeature_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SecurityFeature) GetAnomalyDetection() *AnomalyDetection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_AnomalyDetection); ok {
			return x.AnomalyDetection
		}
	}
	return nil
}

func (x *SecurityFeature) GetActivityLogging() *ActivityLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ActivityLogging); ok {
			return x.ActivityLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetApplicationLogging() *ApplicationLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ApplicationLogging); ok {
			return x.ApplicationLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetBootLogging() *BootLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_BootLogging); ok {
			return x.BootLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetOsLogging() *OSLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_OsLogging); ok {
			return x.OsLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetResourceLogging() *ResourceLogging {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ResourceLogging); ok {
			return x.ResourceLogging
		}
	}
	return nil
}

func (x *SecurityFeature) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_MalwareProtection); ok {
			return x.MalwareProtection
		}
	}
	return nil
}

func (x *SecurityFeature) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_UsageStatistics); ok {
			return x.UsageStatistics
		}
	}
	return nil
}

func (x *SecurityFeature) GetCertificateBasedAuthentication() *CertificateBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_CertificateBasedAuthentication); ok {
			return x.CertificateBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetTokenBasedAuthentication() *TokenBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_TokenBasedAuthentication); ok {
			return x.TokenBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetMultiFactorAuthentiation() *MultiFactorAuthentiation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_MultiFactorAuthentiation); ok {
			return x.MultiFactorAuthentiation
		}
	}
	return nil
}

func (x *SecurityFeature) GetNoAuthentication() *NoAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_NoAuthentication); ok {
			return x.NoAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetOtpBasedAuthentication() *OTPBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_OtpBasedAuthentication); ok {
			return x.OtpBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetPasswordBasedAuthentication() *PasswordBasedAuthentication {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_PasswordBasedAuthentication); ok {
			return x.PasswordBasedAuthentication
		}
	}
	return nil
}

func (x *SecurityFeature) GetSingleSignOn() *SingleSignOn {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_SingleSignOn); ok {
			return x.SingleSignOn
		}
	}
	return nil
}

func (x *SecurityFeature) GetAbac() *ABAC {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Abac); ok {
			return x.Abac
		}
	}
	return nil
}

func (x *SecurityFeature) GetL3Firewall() *L3Firewall {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_L3Firewall); ok {
			return x.L3Firewall
		}
	}
	return nil
}

func (x *SecurityFeature) GetWebApplicationFirewall() *WebApplicationFirewall {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_WebApplicationFirewall); ok {
			return x.WebApplicationFirewall
		}
	}
	return nil
}

func (x *SecurityFeature) GetRbac() *RBAC {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Rbac); ok {
			return x.Rbac
		}
	}
	return nil
}

func (x *SecurityFeature) GetBackup() *Backup {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Backup); ok {
			return x.Backup
		}
	}
	return nil
}

func (x *SecurityFeature) GetDDoSProtection() *DDoSProtection {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DDoSProtection); ok {
			return x.DDoSProtection
		}
	}
	return nil
}

func (x *SecurityFeature) GetGeoLocation() *GeoLocation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_GeoLocation); ok {
			return x.GeoLocation
		}
	}
	return nil
}

func (x *SecurityFeature) GetGeoRedundancy() *GeoRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_GeoRedundancy); ok {
			return x.GeoRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetLocalRedundancy() *LocalRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_LocalRedundancy); ok {
			return x.LocalRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetZoneRedundancy() *ZoneRedundancy {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ZoneRedundancy); ok {
			return x.ZoneRedundancy
		}
	}
	return nil
}

func (x *SecurityFeature) GetCustomerKeyEncryption() *CustomerKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_CustomerKeyEncryption); ok {
			return x.CustomerKeyEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetManagedKeyEncryption() *ManagedKeyEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_ManagedKeyEncryption); ok {
			return x.ManagedKeyEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_EncryptionInUse); ok {
			return x.EncryptionInUse
		}
	}
	return nil
}

func (x *SecurityFeature) GetTransportEncryption() *TransportEncryption {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_TransportEncryption); ok {
			return x.TransportEncryption
		}
	}
	return nil
}

func (x *SecurityFeature) GetLocalAttestation() *LocalAttestation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_LocalAttestation); ok {
			return x.LocalAttestation
		}
	}
	return nil
}

func (x *SecurityFeature) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_RemoteAttestation); ok {
			return x.RemoteAttestation
		}
	}
	return nil
}

func (x *SecurityFeature) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_AutomaticUpdates); ok {
			return x.AutomaticUpdates
		}
	}
	return nil
}

func (x *SecurityFeature) GetDocumentChecksum() *DocumentChecksum {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DocumentChecksum); ok {
			return x.DocumentChecksum
		}
	}
	return nil
}

func (x *SecurityFeature) GetImmutability() *Immutability {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_Immutability); ok {
			return x.Immutability
		}
	}
	return nil
}

func (x *SecurityFeature) GetDocumentSignature() *DocumentSignature {
	if x != nil {
		if x, ok := x.Type.(*SecurityFeature_DocumentSignature); ok {
			return x.DocumentSignature
		}
	}
	return nil
}

type isSecurityFeature_Type interface {
	isSecurityFeature_Type()
}

type SecurityFeature_AnomalyDetection struct {
	AnomalyDetection *AnomalyDetection `protobuf:"bytes,4728,opt,name=anomaly_detection,json=anomalyDetection,proto3,oneof"`
}

type SecurityFeature_ActivityLogging struct {
	ActivityLogging *ActivityLogging `protobuf:"bytes,2956,opt,name=activity_logging,json=activityLogging,proto3,oneof"`
}

type SecurityFeature_ApplicationLogging struct {
	ApplicationLogging *ApplicationLogging `protobuf:"bytes,12791,opt,name=application_logging,json=applicationLogging,proto3,oneof"`
}

type SecurityFeature_BootLogging struct {
	BootLogging *BootLogging `protobuf:"bytes,18439,opt,name=boot_logging,json=bootLogging,proto3,oneof"`
}

type SecurityFeature_OsLogging struct {
	OsLogging *OSLogging `protobuf:"bytes,2926,opt,name=os_logging,json=osLogging,proto3,oneof"`
}

type SecurityFeature_ResourceLogging struct {
	ResourceLogging *ResourceLogging `protobuf:"bytes,17563,opt,name=resource_logging,json=resourceLogging,proto3,oneof"`
}

type SecurityFeature_MalwareProtection struct {
	MalwareProtection *MalwareProtection `protobuf:"bytes,7265,opt,name=malware_protection,json=malwareProtection,proto3,oneof"`
}

type SecurityFeature_UsageStatistics struct {
	UsageStatistics *UsageStatistics `protobuf:"bytes,15242,opt,name=usage_statistics,json=usageStatistics,proto3,oneof"`
}

type SecurityFeature_CertificateBasedAuthentication struct {
	CertificateBasedAuthentication *CertificateBasedAuthentication `protobuf:"bytes,560,opt,name=certificate_based_authentication,json=certificateBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_TokenBasedAuthentication struct {
	TokenBasedAuthentication *TokenBasedAuthentication `protobuf:"bytes,3684,opt,name=token_based_authentication,json=tokenBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_MultiFactorAuthentiation struct {
	MultiFactorAuthentiation *MultiFactorAuthentiation `protobuf:"bytes,13104,opt,name=multi_factor_authentiation,json=multiFactorAuthentiation,proto3,oneof"`
}

type SecurityFeature_NoAuthentication struct {
	NoAuthentication *NoAuthentication `protobuf:"bytes,17718,opt,name=no_authentication,json=noAuthentication,proto3,oneof"`
}

type SecurityFeature_OtpBasedAuthentication struct {
	OtpBasedAuthentication *OTPBasedAuthentication `protobuf:"bytes,18743,opt,name=otp_based_authentication,json=otpBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_PasswordBasedAuthentication struct {
	PasswordBasedAuthentication *PasswordBasedAuthentication `protobuf:"bytes,16941,opt,name=password_based_authentication,json=passwordBasedAuthentication,proto3,oneof"`
}

type SecurityFeature_SingleSignOn struct {
	SingleSignOn *SingleSignOn `protobuf:"bytes,9281,opt,name=single_sign_on,json=singleSignOn,proto3,oneof"`
}

type SecurityFeature_Abac struct {
	Abac *ABAC `protobuf:"bytes,14694,opt,name=abac,proto3,oneof"`
}

type SecurityFeature_L3Firewall struct {
	L3Firewall *L3Firewall `protobuf:"bytes,9125,opt,name=l3_firewall,json=l3Firewall,proto3,oneof"`
}

type SecurityFeature_WebApplicationFirewall struct {
	WebApplicationFirewall *WebApplicationFirewall `protobuf:"bytes,5789,opt,name=web_application_firewall,json=webApplicationFirewall,proto3,oneof"`
}

type SecurityFeature_Rbac struct {
	Rbac *RBAC `protobuf:"bytes,18783,opt,name=rbac,proto3,oneof"`
}

type SecurityFeature_Backup struct {
	Backup *Backup `protobuf:"bytes,16413,opt,name=backup,proto3,oneof"`
}

type SecurityFeature_DDoSProtection struct {
	DDoSProtection *DDoSProtection `protobuf:"bytes,16707,opt,name=d_do_s_protection,json=dDoSProtection,proto3,oneof"`
}

type SecurityFeature_GeoLocation struct {
	GeoLocation *GeoLocation `protobuf:"bytes,10970,opt,name=geo_location,json=geoLocation,proto3,oneof"`
}

type SecurityFeature_GeoRedundancy struct {
	GeoRedundancy *GeoRedundancy `protobuf:"bytes,2436,opt,name=geo_redundancy,json=geoRedundancy,proto3,oneof"`
}

type SecurityFeature_LocalRedundancy struct {
	LocalRedundancy *LocalRedundancy `protobuf:"bytes,2537,opt,name=local_redundancy,json=localRedundancy,proto3,oneof"`
}

type SecurityFeature_ZoneRedundancy struct {
	ZoneRedundancy *ZoneRedundancy `protobuf:"bytes,11145,opt,name=zone_redundancy,json=zoneRedundancy,proto3,oneof"`
}

type SecurityFeature_CustomerKeyEncryption struct {
	CustomerKeyEncryption *CustomerKeyEncryption `protobuf:"bytes,5547,opt,name=customer_key_encryption,json=customerKeyEncryption,proto3,oneof"`
}

type SecurityFeature_ManagedKeyEncryption struct {
	ManagedKeyEncryption *ManagedKeyEncryption `protobuf:"bytes,9197,opt,name=managed_key_encryption,json=managedKeyEncryption,proto3,oneof"`
}

type SecurityFeature_EncryptionInUse struct {
	EncryptionInUse *EncryptionInUse `protobuf:"bytes,15775,opt,name=encryption_in_use,json=encryptionInUse,proto3,oneof"`
}

type SecurityFeature_TransportEncryption struct {
	TransportEncryption *TransportEncryption `protobuf:"bytes,15929,opt,name=transport_encryption,json=transportEncryption,proto3,oneof"`
}

type SecurityFeature_LocalAttestation struct {
	LocalAttestation *LocalAttestation `protobuf:"bytes,4296,opt,name=local_attestation,json=localAttestation,proto3,oneof"`
}

type SecurityFeature_RemoteAttestation struct {
	RemoteAttestation *RemoteAttestation `protobuf:"bytes,13640,opt,name=remote_attestation,json=remoteAttestation,proto3,oneof"`
}

type SecurityFeature_AutomaticUpdates struct {
	AutomaticUpdates *AutomaticUpdates `protobuf:"bytes,9990,opt,name=automatic_updates,json=automaticUpdates,proto3,oneof"`
}

type SecurityFeature_DocumentChecksum struct {
	DocumentChecksum *DocumentChecksum `protobuf:"bytes,16099,opt,name=document_checksum,json=documentChecksum,proto3,oneof"`
}

type SecurityFeature_Immutability struct {
	Immutability *Immutability `protobuf:"bytes,2008,opt,name=immutability,proto3,oneof"`
}

type SecurityFeature_DocumentSignature struct {
	DocumentSignature *DocumentSignature `protobuf:"bytes,7943,opt,name=document_signature,json=documentSignature,proto3,oneof"`
}

func (*SecurityFeature_AnomalyDetection) isSecurityFeature_Type() {}

func (*SecurityFeature_ActivityLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_ApplicationLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_BootLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_OsLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_ResourceLogging) isSecurityFeature_Type() {}

func (*SecurityFeature_MalwareProtection) isSecurityFeature_Type() {}

func (*SecurityFeature_UsageStatistics) isSecurityFeature_Type() {}

func (*SecurityFeature_CertificateBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_TokenBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_MultiFactorAuthentiation) isSecurityFeature_Type() {}

func (*SecurityFeature_NoAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_OtpBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_PasswordBasedAuthentication) isSecurityFeature_Type() {}

func (*SecurityFeature_SingleSignOn) isSecurityFeature_Type() {}

func (*SecurityFeature_Abac) isSecurityFeature_Type() {}

func (*SecurityFeature_L3Firewall) isSecurityFeature_Type() {}

func (*SecurityFeature_WebApplicationFirewall) isSecurityFeature_Type() {}

func (*SecurityFeature_Rbac) isSecurityFeature_Type() {}

func (*SecurityFeature_Backup) isSecurityFeature_Type() {}

func (*SecurityFeature_DDoSProtection) isSecurityFeature_Type() {}

func (*SecurityFeature_GeoLocation) isSecurityFeature_Type() {}

func (*SecurityFeature_GeoRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_LocalRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_ZoneRedundancy) isSecurityFeature_Type() {}

func (*SecurityFeature_CustomerKeyEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_ManagedKeyEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_EncryptionInUse) isSecurityFeature_Type() {}

func (*SecurityFeature_TransportEncryption) isSecurityFeature_Type() {}

func (*SecurityFeature_LocalAttestation) isSecurityFeature_Type() {}

func (*SecurityFeature_RemoteAttestation) isSecurityFeature_Type() {}

func (*SecurityFeature_AutomaticUpdates) isSecurityFeature_Type() {}

func (*SecurityFeature_DocumentChecksum) isSecurityFeature_Type() {}

func (*SecurityFeature_Immutability) isSecurityFeature_Type() {}

func (*SecurityFeature_DocumentSignature) isSecurityFeature_Type() {}

// ServiceMetadataDocument is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ServiceMetadataDocument struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,7335,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description  string                 `protobuf:"bytes,9395,opt,name=description,proto3" json:"description,omitempty"`
	Filetype     string                 `protobuf:"bytes,16847,opt,name=filetype,proto3" json:"filetype,omitempty"`
	Id           string                 `protobuf:"bytes,8568,opt,name=id,proto3" json:"id,omitempty"`
	Labels       map[string]string      `protobuf:"bytes,555,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name         string                 `protobuf:"bytes,13605,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                string               `protobuf:"bytes,11658,opt,name=raw,proto3" json:"raw,omitempty"`
	DocumentChecksums  []*DocumentChecksum  `protobuf:"bytes,11937,rep,name=document_checksums,json=documentChecksums,proto3" json:"document_checksums,omitempty"`
	DocumentLocation   *DocumentLocation    `protobuf:"bytes,3639,opt,name=document_location,json=documentLocation,proto3" json:"document_location,omitempty"`
	DocumentSignatures []*DocumentSignature `protobuf:"bytes,1315,rep,name=document_signatures,json=documentSignatures,proto3" json:"document_signatures,omitempty"`
	ParentId           *string              `protobuf:"bytes,10323,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	SchemaValidation   *SchemaValidation    `protobuf:"bytes,6622,opt,name=schema_validation,json=schemaValidation,proto3" json:"schema_validation,omitempty"`
	SecurityFeatures   []*SecurityFeature   `protobuf:"bytes,18737,rep,name=security_features,json=securityFeatures,proto3" json:"security_features,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceMetadataDocument) Reset() {
	*x = ServiceMetadataDocument{}
	mi := &file_api_ontology_ontology_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceMetadataDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMetadataDocument) ProtoMessage() {}

func (x *ServiceMetadataDocument) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMetadataDocument.ProtoReflect.Descriptor instead.
func (*ServiceMetadataDocument) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{124}
}

func (x *ServiceMetadataDocument) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceMetadataDocument) GetFiletype() string {
	if x != nil {
		return x.Filetype
	}
	return ""
}

func (x *ServiceMetadataDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceMetadataDocument) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceMetadataDocument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceMetadataDocument) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *ServiceMetadataDocument) GetDocumentChecksums() []*DocumentChecksum {
	if x != nil {
		return x.DocumentChecksums
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDocumentLocation() *DocumentLocation {
	if x != nil {
		return x.DocumentLocation
	}
	return nil
}

func (x *ServiceMetadataDocument) GetDocumentSignatures() []*DocumentSignature {
	if x != nil {
		return x.DocumentSignatures
	}
	return nil
}

func (x *ServiceMetadataDocument) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *ServiceMetadataDocument) GetSchemaValidation() *SchemaValidation {
	if x != nil {
		return x.SchemaValidation
	}
	return nil
}

func (x *ServiceMetadataDocument) GetSecurityFeatures() []*SecurityFeature {
	if x != nil {
		return x.SecurityFeatures
	}
	return nil
}

// DocumentSignature is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type DocumentSignature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     string                 `protobuf:"bytes,4031,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Errors        []*Error               `protobuf:"bytes,12856,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentSignature) Reset() {
	*x = DocumentSignature{}
	mi := &file_api_ontology_ontology_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSignature) ProtoMessage() {}

func (x *DocumentSignature) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSignature.ProtoReflect.Descriptor instead.
func (*DocumentSignature) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{125}
}

func (x *DocumentSignature) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *DocumentSignature) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

// SingleSignOn is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type SingleSignOn struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ContextIsChecked bool                   `protobuf:"varint,14488,opt,name=context_is_checked,json=contextIsChecked,proto3" json:"context_is_checked,omitempty"`
	Enabled          bool                   `protobuf:"varint,10569,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SingleSignOn) Reset() {
	*x = SingleSignOn{}
	mi := &file_api_ontology_ontology_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleSignOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleSignOn) ProtoMessage() {}

func (x *SingleSignOn) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleSignOn.ProtoReflect.Descriptor instead.
func (*SingleSignOn) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{126}
}

func (x *SingleSignOn) GetContextIsChecked() bool {
	if x != nil {
		return x.ContextIsChecked
	}
	return false
}

func (x *SingleSignOn) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Storage is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
type Storage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Storage_BlockStorage
	//	*Storage_DatabaseStorage
	//	*Storage_FileStorage
	//	*Storage_ObjectStorage
	Type          isStorage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{127}
}

func (x *Storage) GetType() isStorage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Storage) GetBlockStorage() *BlockStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_BlockStorage); ok {
			return x.BlockStorage
		}
	}
	return nil
}

func (x *Storage) GetDatabaseStorage() *DatabaseStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_DatabaseStorage); ok {
			return x.DatabaseStorage
		}
	}
	return nil
}

func (x *Storage) GetFileStorage() *FileStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_FileStorage); ok {
			return x.FileStorage
		}
	}
	return nil
}

func (x *Storage) GetObjectStorage() *ObjectStorage {
	if x != nil {
		if x, ok := x.Type.(*Storage_ObjectStorage); ok {
			return x.ObjectStorage
		}
	}
	return nil
}

type isStorage_Type interface {
	isStorage_Type()
}

type Storage_BlockStorage struct {
	BlockStorage *BlockStorage `protobuf:"bytes,10253,opt,name=block_storage,json=blockStorage,proto3,oneof"`
}

type Storage_DatabaseStorage struct {
	DatabaseStorage *DatabaseStorage `protobuf:"bytes,12299,opt,name=database_storage,json=databaseStorage,proto3,oneof"`
}

type Storage_FileStorage struct {
	FileStorage *FileStorage `protobuf:"bytes,2736,opt,name=file_storage,json=fileStorage,proto3,oneof"`
}

type Storage_ObjectStorage struct {
	ObjectStorage *ObjectStorage `protobuf:"bytes,10870,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

func (*Storage_BlockStorage) isStorage_Type() {}

func (*Storage_DatabaseStorage) isStorage_Type() {}

func (*Storage_FileStorage) isStorage_Type() {}

func (*Storage_ObjectStorage) isStorage_Type() {}

// StorageService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This entity represents a network-based service that can be used to access a particular storage backend. It has multiple subclasses, e.g., for databases or object stores. It has a list of storage resources associated to it.
type StorageService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*StorageService_DocumentDatabaseService
	//	*StorageService_KeyValueDatabaseService
	//	*StorageService_MultiModalDatabaseService
	//	*StorageService_RelationalDatabaseService
	//	*StorageService_FileStorageService
	//	*StorageService_ObjectStorageService
	Type          isStorageService_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorageService) Reset() {
	*x = StorageService{}
	mi := &file_api_ontology_ontology_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageService) ProtoMessage() {}

func (x *StorageService) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageService.ProtoReflect.Descriptor instead.
func (*StorageService) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{128}
}

func (x *StorageService) GetType() isStorageService_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StorageService) GetDocumentDatabaseService() *DocumentDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_DocumentDatabaseService); ok {
			return x.DocumentDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetKeyValueDatabaseService() *KeyValueDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_KeyValueDatabaseService); ok {
			return x.KeyValueDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetMultiModalDatabaseService() *MultiModalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_MultiModalDatabaseService); ok {
			return x.MultiModalDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetRelationalDatabaseService() *RelationalDatabaseService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_RelationalDatabaseService); ok {
			return x.RelationalDatabaseService
		}
	}
	return nil
}

func (x *StorageService) GetFileStorageService() *FileStorageService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_FileStorageService); ok {
			return x.FileStorageService
		}
	}
	return nil
}

func (x *StorageService) GetObjectStorageService() *ObjectStorageService {
	if x != nil {
		if x, ok := x.Type.(*StorageService_ObjectStorageService); ok {
			return x.ObjectStorageService
		}
	}
	return nil
}

type isStorageService_Type interface {
	isStorageService_Type()
}

type StorageService_DocumentDatabaseService struct {
	DocumentDatabaseService *DocumentDatabaseService `protobuf:"bytes,17950,opt,name=document_database_service,json=documentDatabaseService,proto3,oneof"`
}

type StorageService_KeyValueDatabaseService struct {
	KeyValueDatabaseService *KeyValueDatabaseService `protobuf:"bytes,1004,opt,name=key_value_database_service,json=keyValueDatabaseService,proto3,oneof"`
}

type StorageService_MultiModalDatabaseService struct {
	MultiModalDatabaseService *MultiModalDatabaseService `protobuf:"bytes,2657,opt,name=multi_modal_database_service,json=multiModalDatabaseService,proto3,oneof"`
}

type StorageService_RelationalDatabaseService struct {
	RelationalDatabaseService *RelationalDatabaseService `protobuf:"bytes,12485,opt,name=relational_database_service,json=relationalDatabaseService,proto3,oneof"`
}

type StorageService_FileStorageService struct {
	FileStorageService *FileStorageService `protobuf:"bytes,16814,opt,name=file_storage_service,json=fileStorageService,proto3,oneof"`
}

type StorageService_ObjectStorageService struct {
	ObjectStorageService *ObjectStorageService `protobuf:"bytes,6459,opt,name=object_storage_service,json=objectStorageService,proto3,oneof"`
}

func (*StorageService_DocumentDatabaseService) isStorageService_Type() {}

func (*StorageService_KeyValueDatabaseService) isStorageService_Type() {}

func (*StorageService_MultiModalDatabaseService) isStorageService_Type() {}

func (*StorageService_RelationalDatabaseService) isStorageService_Type() {}

func (*StorageService_FileStorageService) isStorageService_Type() {}

func (*StorageService_ObjectStorageService) isStorageService_Type() {}

// TransportEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// enabled means the resource _can_ be reached via https, while enforced means it _can only_ be reached via https (or http traffic is redirected)
type TransportEncryption struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Enabled         bool                   `protobuf:"varint,2648,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Enforced        bool                   `protobuf:"varint,8230,opt,name=enforced,proto3" json:"enforced,omitempty"`
	Protocol        string                 `protobuf:"bytes,14651,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolVersion float32                `protobuf:"fixed32,2365,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	CipherSuites    []*CipherSuite         `protobuf:"bytes,17881,rep,name=cipher_suites,json=cipherSuites,proto3" json:"cipher_suites,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransportEncryption) Reset() {
	*x = TransportEncryption{}
	mi := &file_api_ontology_ontology_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransportEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportEncryption) ProtoMessage() {}

func (x *TransportEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportEncryption.ProtoReflect.Descriptor instead.
func (*TransportEncryption) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{129}
}

func (x *TransportEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TransportEncryption) GetEnforced() bool {
	if x != nil {
		return x.Enforced
	}
	return false
}

func (x *TransportEncryption) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *TransportEncryption) GetProtocolVersion() float32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *TransportEncryption) GetCipherSuites() []*CipherSuite {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

// UsageStatistics is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type UsageStatistics struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ApiHitsPerMonth int32                  `protobuf:"varint,7625,opt,name=api_hits_per_month,json=apiHitsPerMonth,proto3" json:"api_hits_per_month,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UsageStatistics) Reset() {
	*x = UsageStatistics{}
	mi := &file_api_ontology_ontology_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageStatistics) ProtoMessage() {}

func (x *UsageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageStatistics.ProtoReflect.Descriptor instead.
func (*UsageStatistics) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{130}
}

func (x *UsageStatistics) GetApiHitsPerMonth() int32 {
	if x != nil {
		return x.ApiHitsPerMonth
	}
	return 0
}

// VMImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VMImage struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,8279,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,4760,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,17867,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14985,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,17229,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,6244,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,3459,opt,name=raw,proto3" json:"raw,omitempty"`
	ApplicationId   *string          `protobuf:"bytes,15711,opt,name=application_id,json=applicationId,proto3,oneof" json:"application_id,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,4609,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,18349,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,13735,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,2369,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VMImage) Reset() {
	*x = VMImage{}
	mi := &file_api_ontology_ontology_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMImage) ProtoMessage() {}

func (x *VMImage) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMImage.ProtoReflect.Descriptor instead.
func (*VMImage) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{131}
}

func (x *VMImage) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VMImage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VMImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VMImage) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VMImage) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VMImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VMImage) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VMImage) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *VMImage) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VMImage) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VMImage) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VMImage) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualMachine is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualMachine struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,6633,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14513,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,8104,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,2070,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,2416,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,11617,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw                 string             `protobuf:"bytes,14073,opt,name=raw,proto3" json:"raw,omitempty"`
	ActivityLogging     *ActivityLogging   `protobuf:"bytes,8134,opt,name=activity_logging,json=activityLogging,proto3" json:"activity_logging,omitempty"`
	AutomaticUpdates    *AutomaticUpdates  `protobuf:"bytes,7114,opt,name=automatic_updates,json=automaticUpdates,proto3" json:"automatic_updates,omitempty"`
	BlockStorageIds     []string           `protobuf:"bytes,2182,rep,name=block_storage_ids,json=blockStorageIds,proto3" json:"block_storage_ids,omitempty"`
	BootLogging         *BootLogging       `protobuf:"bytes,15845,opt,name=boot_logging,json=bootLogging,proto3" json:"boot_logging,omitempty"`
	EncryptionInUse     *EncryptionInUse   `protobuf:"bytes,10596,opt,name=encryption_in_use,json=encryptionInUse,proto3" json:"encryption_in_use,omitempty"`
	GeoLocation         *GeoLocation       `protobuf:"bytes,7308,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	MalwareProtection   *MalwareProtection `protobuf:"bytes,16535,opt,name=malware_protection,json=malwareProtection,proto3" json:"malware_protection,omitempty"`
	NetworkInterfaceIds []string           `protobuf:"bytes,741,rep,name=network_interface_ids,json=networkInterfaceIds,proto3" json:"network_interface_ids,omitempty"`
	OsLogging           *OSLogging         `protobuf:"bytes,8084,opt,name=os_logging,json=osLogging,proto3" json:"os_logging,omitempty"`
	Redundancies        []*Redundancy      `protobuf:"bytes,14823,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	RemoteAttestation   *RemoteAttestation `protobuf:"bytes,17180,opt,name=remote_attestation,json=remoteAttestation,proto3" json:"remote_attestation,omitempty"`
	ParentId            *string            `protobuf:"bytes,10949,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging     *ResourceLogging   `protobuf:"bytes,15452,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	UsageStatistics     *UsageStatistics   `protobuf:"bytes,14541,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VirtualMachine) Reset() {
	*x = VirtualMachine{}
	mi := &file_api_ontology_ontology_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachine) ProtoMessage() {}

func (x *VirtualMachine) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachine.ProtoReflect.Descriptor instead.
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{132}
}

func (x *VirtualMachine) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualMachine) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualMachine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualMachine) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualMachine) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualMachine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachine) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualMachine) GetActivityLogging() *ActivityLogging {
	if x != nil {
		return x.ActivityLogging
	}
	return nil
}

func (x *VirtualMachine) GetAutomaticUpdates() *AutomaticUpdates {
	if x != nil {
		return x.AutomaticUpdates
	}
	return nil
}

func (x *VirtualMachine) GetBlockStorageIds() []string {
	if x != nil {
		return x.BlockStorageIds
	}
	return nil
}

func (x *VirtualMachine) GetBootLogging() *BootLogging {
	if x != nil {
		return x.BootLogging
	}
	return nil
}

func (x *VirtualMachine) GetEncryptionInUse() *EncryptionInUse {
	if x != nil {
		return x.EncryptionInUse
	}
	return nil
}

func (x *VirtualMachine) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualMachine) GetMalwareProtection() *MalwareProtection {
	if x != nil {
		return x.MalwareProtection
	}
	return nil
}

func (x *VirtualMachine) GetNetworkInterfaceIds() []string {
	if x != nil {
		return x.NetworkInterfaceIds
	}
	return nil
}

func (x *VirtualMachine) GetOsLogging() *OSLogging {
	if x != nil {
		return x.OsLogging
	}
	return nil
}

func (x *VirtualMachine) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualMachine) GetRemoteAttestation() *RemoteAttestation {
	if x != nil {
		return x.RemoteAttestation
	}
	return nil
}

func (x *VirtualMachine) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualMachine) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *VirtualMachine) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualNetwork struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,1885,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,9930,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,4087,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,7871,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,6818,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,818,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,14216,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,7268,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,3591,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,2814,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,7205,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VirtualNetwork) Reset() {
	*x = VirtualNetwork{}
	mi := &file_api_ontology_ontology_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualNetwork) ProtoMessage() {}

func (x *VirtualNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualNetwork.ProtoReflect.Descriptor instead.
func (*VirtualNetwork) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{133}
}

func (x *VirtualNetwork) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualNetwork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualNetwork) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualNetwork) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualNetwork) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualNetwork) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualNetwork) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualNetwork) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualNetwork) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualNetwork) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// VirtualSubNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type VirtualSubNetwork struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,317,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,14512,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,10226,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,14405,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,4188,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,1563,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,15165,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,18482,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,14386,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,12551,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,6155,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VirtualSubNetwork) Reset() {
	*x = VirtualSubNetwork{}
	mi := &file_api_ontology_ontology_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualSubNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualSubNetwork) ProtoMessage() {}

func (x *VirtualSubNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualSubNetwork.ProtoReflect.Descriptor instead.
func (*VirtualSubNetwork) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{134}
}

func (x *VirtualSubNetwork) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *VirtualSubNetwork) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VirtualSubNetwork) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirtualSubNetwork) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *VirtualSubNetwork) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *VirtualSubNetwork) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualSubNetwork) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *VirtualSubNetwork) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *VirtualSubNetwork) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *VirtualSubNetwork) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *VirtualSubNetwork) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// Vulnerability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// cve: Common Vulnerabilities and Exposures
// cwe: Common Weakness Enumeration
type Vulnerability struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cve           string                 `protobuf:"bytes,205,opt,name=cve,proto3" json:"cve,omitempty"`
	Cwe           []string               `protobuf:"bytes,18325,rep,name=cwe,proto3" json:"cwe,omitempty"`
	Description   string                 `protobuf:"bytes,10690,opt,name=description,proto3" json:"description,omitempty"`
	Name          string                 `protobuf:"bytes,13528,opt,name=name,proto3" json:"name,omitempty"`
	Url           string                 `protobuf:"bytes,11925,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vulnerability) Reset() {
	*x = Vulnerability{}
	mi := &file_api_ontology_ontology_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vulnerability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vulnerability) ProtoMessage() {}

func (x *Vulnerability) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vulnerability.ProtoReflect.Descriptor instead.
func (*Vulnerability) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{135}
}

func (x *Vulnerability) GetCve() string {
	if x != nil {
		return x.Cve
	}
	return ""
}

func (x *Vulnerability) GetCwe() []string {
	if x != nil {
		return x.Cwe
	}
	return nil
}

func (x *Vulnerability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vulnerability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vulnerability) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// WebApplicationFirewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A WAF is a L7 firewall that includes L3 capabilities
type WebApplicationFirewall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,8961,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebApplicationFirewall) Reset() {
	*x = WebApplicationFirewall{}
	mi := &file_api_ontology_ontology_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebApplicationFirewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebApplicationFirewall) ProtoMessage() {}

func (x *WebApplicationFirewall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebApplicationFirewall.ProtoReflect.Descriptor instead.
func (*WebApplicationFirewall) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{136}
}

func (x *WebApplicationFirewall) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// Workflow is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type Workflow struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,5596,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,2895,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,6168,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,5072,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,9318,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,12414,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw             string           `protobuf:"bytes,9416,opt,name=raw,proto3" json:"raw,omitempty"`
	GeoLocation     *GeoLocation     `protobuf:"bytes,14478,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies    []*Redundancy    `protobuf:"bytes,15255,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId        *string          `protobuf:"bytes,3002,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	UsageStatistics *UsageStatistics `protobuf:"bytes,15450,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_api_ontology_ontology_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{137}
}

func (x *Workflow) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Workflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Workflow) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *Workflow) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Workflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Workflow) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *Workflow) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *Workflow) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *Workflow) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Workflow) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// MLWorkspace is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type MLWorkspace struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreationTime               *timestamppb.Timestamp `protobuf:"bytes,8432,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Description                string                 `protobuf:"bytes,17583,opt,name=description,proto3" json:"description,omitempty"`
	Id                         string                 `protobuf:"bytes,1199,opt,name=id,proto3" json:"id,omitempty"`
	InternetAccessibleEndpoint bool                   `protobuf:"varint,8784,opt,name=internet_accessible_endpoint,json=internetAccessibleEndpoint,proto3" json:"internet_accessible_endpoint,omitempty"`
	Labels                     map[string]string      `protobuf:"bytes,18904,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                       string                 `protobuf:"bytes,9265,opt,name=name,proto3" json:"name,omitempty"`
	// The raw field contains the raw information that is used to fill in the fields of the ontology.
	Raw              string            `protobuf:"bytes,13297,opt,name=raw,proto3" json:"raw,omitempty"`
	AtRestEncryption *AtRestEncryption `protobuf:"bytes,12398,opt,name=at_rest_encryption,json=atRestEncryption,proto3" json:"at_rest_encryption,omitempty"`
	GeoLocation      *GeoLocation      `protobuf:"bytes,8174,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	Redundancies     []*Redundancy     `protobuf:"bytes,16100,rep,name=redundancies,proto3" json:"redundancies,omitempty"`
	ParentId         *string           `protobuf:"bytes,672,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	ResourceLogging  *ResourceLogging  `protobuf:"bytes,15549,opt,name=resource_logging,json=resourceLogging,proto3" json:"resource_logging,omitempty"`
	StorageId        *string           `protobuf:"bytes,2357,opt,name=storage_id,json=storageId,proto3,oneof" json:"storage_id,omitempty"`
	UsageStatistics  *UsageStatistics  `protobuf:"bytes,13057,opt,name=usage_statistics,json=usageStatistics,proto3" json:"usage_statistics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MLWorkspace) Reset() {
	*x = MLWorkspace{}
	mi := &file_api_ontology_ontology_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MLWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLWorkspace) ProtoMessage() {}

func (x *MLWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLWorkspace.ProtoReflect.Descriptor instead.
func (*MLWorkspace) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{138}
}

func (x *MLWorkspace) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *MLWorkspace) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MLWorkspace) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MLWorkspace) GetInternetAccessibleEndpoint() bool {
	if x != nil {
		return x.InternetAccessibleEndpoint
	}
	return false
}

func (x *MLWorkspace) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MLWorkspace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MLWorkspace) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *MLWorkspace) GetAtRestEncryption() *AtRestEncryption {
	if x != nil {
		return x.AtRestEncryption
	}
	return nil
}

func (x *MLWorkspace) GetGeoLocation() *GeoLocation {
	if x != nil {
		return x.GeoLocation
	}
	return nil
}

func (x *MLWorkspace) GetRedundancies() []*Redundancy {
	if x != nil {
		return x.Redundancies
	}
	return nil
}

func (x *MLWorkspace) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MLWorkspace) GetResourceLogging() *ResourceLogging {
	if x != nil {
		return x.ResourceLogging
	}
	return nil
}

func (x *MLWorkspace) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

func (x *MLWorkspace) GetUsageStatistics() *UsageStatistics {
	if x != nil {
		return x.UsageStatistics
	}
	return nil
}

// ZoneRedundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
type ZoneRedundancy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GeoLocations  []*GeoLocation         `protobuf:"bytes,11767,rep,name=geo_locations,json=geoLocations,proto3" json:"geo_locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZoneRedundancy) Reset() {
	*x = ZoneRedundancy{}
	mi := &file_api_ontology_ontology_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZoneRedundancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneRedundancy) ProtoMessage() {}

func (x *ZoneRedundancy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ontology_ontology_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneRedundancy.ProtoReflect.Descriptor instead.
func (*ZoneRedundancy) Descriptor() ([]byte, []int) {
	return file_api_ontology_ontology_proto_rawDescGZIP(), []int{139}
}

func (x *ZoneRedundancy) GetGeoLocations() []*GeoLocation {
	if x != nil {
		return x.GeoLocations
	}
	return nil
}

var file_api_ontology_ontology_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: ([]string)(nil),
		Field:         60000,
		Name:          "clouditor.ontology.v1.resource_type_names",
		Tag:           "bytes,60000,rep,name=resource_type_names",
		Filename:      "api/ontology/ontology.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// repeated string resource_type_names = 60000;
	E_ResourceTypeNames = &file_api_ontology_ontology_proto_extTypes[0]
)

var File_api_ontology_ontology_proto protoreflect.FileDescriptor

var file_api_ontology_ontology_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x04, 0x41, 0x42, 0x41, 0x43, 0x3a, 0x2c, 0x82, 0xa6,
	0x1d, 0x04, 0x41, 0x42, 0x41, 0x43, 0x82, 0xa6, 0x1d, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x33, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18,
	0xa5, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x33, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x18, 0x77, 0x65, 0x62, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x18, 0x9d, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x77, 0x65, 0x62,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbb, 0x05, 0x0a, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc6, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xf3, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x98, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xd5, 0x32, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x94, 0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0x88, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc6,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xf7, 0x7c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xc6, 0x5e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xe8, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x29, 0x82, 0xa6, 0x1d, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x82, 0xa6, 0x1d,
	0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xde, 0x02, 0x0a, 0x0f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd5, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xba, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xa4, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x90, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0xcd, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x3d, 0x82, 0xa6, 0x1d,
	0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x82, 0xa6, 0x1d, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x08, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x10, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x94, 0x45, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0xa2, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xfc, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x33,
	0x82, 0xa6, 0x1d, 0x10, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xa9, 0x07, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xd1, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xeb, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xd3,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xd8, 0x63, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x81, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x81, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xce, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0xfc, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xe9, 0x49, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x55, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0xa1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x9a, 0x76, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x32, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xd9, 0x62, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0xa0, 0x40, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xd5, 0x38, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xdf, 0x73, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xdc, 0x67, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x30, 0x82, 0xa6, 0x1d, 0x0b, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xe3, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x83, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xed, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xaf, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xce, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xd1, 0x1d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x3a, 0x40, 0x82, 0xa6, 0x1d, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x07, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xed, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xc8, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8,
	0x05, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x61,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xf8, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x8c, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0xf7, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x87, 0x90, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x18, 0xee, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6f,
	0x73, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x9b, 0x89, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x5a, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe1, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x8a, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x90, 0x06, 0x0a, 0x0c, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xb0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x1e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x70, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x70, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xb0, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11, 0x6e, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb6, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a,
	0x18, 0x6f, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb7, 0x92, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x54, 0x50, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x6f, 0x74, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1d, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xad, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0xc1, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x02, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x04, 0x61, 0x62, 0x61, 0x63, 0x18, 0xe6, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x42, 0x41, 0x43, 0x48, 0x00, 0x52, 0x04, 0x61, 0x62,
	0x61, 0x63, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x33, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x18, 0xa5, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c,
	0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x18, 0x77, 0x65, 0x62,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18, 0x9d, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x77,
	0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x62, 0x61, 0x63, 0x18, 0xdf, 0x92,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x42,
	0x41, 0x43, 0x48, 0x00, 0x52, 0x04, 0x72, 0x62, 0x61, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xeb, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x85,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x8a, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x3a, 0x34, 0x82, 0xa6, 0x1d, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x82, 0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x18, 0x9d, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x5f, 0x64, 0x6f, 0x5f, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc3, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x44, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x44, 0x6f, 0x53, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xda, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x18, 0x84, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x89, 0x57, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x7a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xe5, 0x02, 0x0a, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x19,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xff, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x92, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x8b, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x95, 0x37, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x81, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x2d, 0x82,
	0xa6, 0x1d, 0x06, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x8d, 0x1f, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xc0, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x9f, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48,
	0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0xaa, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xe7, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0xfb, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdf, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18,
	0xb8, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x69, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8b, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72,
	0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x86, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xde, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x82, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0xff, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xe5, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xb9,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0xc8, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xa1,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x73, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xe4, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x93, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x48, 0x75, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x48, 0x75, 0x62, 0x12, 0x40, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0xc3, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0xa1, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x83, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0xe7, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x54,
	0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xc1, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xe6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0xe9,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xb3, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe1, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xc5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xae, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xbb, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0xff, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48,
	0x00, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x5b, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xb2, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51,
	0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0xca, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0xee, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x8d, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x8b, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0xb0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e,
	0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0xf6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x90,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x18, 0xb9, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x8a, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xc6, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xc1, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x87, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x85, 0x08, 0x0a, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9f, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf3, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xdb, 0x36, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x9f, 0x75, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xa8, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xad, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xb1, 0x56, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdc, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0xb5, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc2, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0xf4, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x69,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x82, 0x71, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x94, 0x42, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xe8, 0x60, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x10, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x8e,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x39, 0x82, 0xa6, 0x1d, 0x0c,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x07,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa9,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xaf,
	0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0xa2, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xbd, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xae, 0x7b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x3a, 0x39, 0x82, 0xa6, 0x1d, 0x0b, 0x42, 0x6f, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x82, 0xa6, 0x1d, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x08,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x0b,
	0x43, 0x49, 0x43, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x9f, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0xaa, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x48, 0x00, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xe6, 0x07, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xec, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x9c, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x81, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xb1, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x9d, 0x77, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x99, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xd9, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa5, 0x94, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xfa, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x9f, 0x38, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf2, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0xa5, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x88, 0x39, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xbd, 0x53, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a,
	0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0xed, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3b, 0x82, 0xa6,
	0x1d, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x82, 0xa6, 0x1d,
	0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x82, 0xa6, 0x1d, 0x0e, 0x49,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xb1, 0x01,
	0x0a, 0x1e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xee, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xcf, 0x5d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x45, 0x82, 0xa6, 0x1d, 0x1e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6,
	0x1d, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x82, 0xa6,
	0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0xd3, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x35, 0x0a,
	0x16, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xc8, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xa8, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0xee, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x3a, 0x20, 0x82, 0xa6, 0x1d, 0x0b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x8e, 0x1b, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xc0, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x9f, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x00,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0xaa, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xe7, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0xfb, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdf, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0xb8,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x69, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8b, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x18, 0x86, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0xde, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x82, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0xff, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xe5, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xb9, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0xc8, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xa1, 0x80,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x73, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xe4, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x93, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48,
	0x75, 0x62, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48,
	0x75, 0x62, 0x12, 0x40, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0xc3, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0xa1, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x6d, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x83, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0xe7, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x54, 0x0a,
	0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xc1, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe6,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0xe9, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xb3, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x19,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a, 0x6b,
	0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe1, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xc5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xae,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xbb, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0xff, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x5b, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xb2, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x75,
	0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0xca, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0xee, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x8d, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a,
	0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x8b, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0xb0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0xf6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x44,
	0x4b, 0x3a, 0x19, 0x82, 0xa6, 0x1d, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x44, 0x4b, 0x82,
	0xa6, 0x1d, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xdc, 0x01, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0xb9, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0b,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x8a, 0x55, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x87, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0xa2, 0x94,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd8, 0x3a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x0a, 0x04,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0xec, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x93, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0xf1, 0x5c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x3a, 0x1f, 0x82, 0xa6, 0x1d, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xcf, 0x05, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x89, 0x70, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xce, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xaa, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0xa7, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xde,
	0x63, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xb0, 0x7a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xad,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0xeb, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x85, 0x72,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x30, 0x82, 0xa6, 0x1d, 0x0e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x82, 0xa6, 0x1d, 0x0e,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6,
	0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0xb9, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0xfb,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xdf, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0xb8, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xa1, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xab, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xed, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x9f, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xb9, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xb2, 0x08, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xd5, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xe5, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x87, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x80, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x9e, 0x67,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0xe0, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xbf,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x53, 0x0a, 0x11, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x18, 0xf3, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52,
	0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xab, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0xe1, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0xfa, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xf7,
	0x7a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0x76, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xff, 0x7f,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xbf, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xc3, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x36, 0x82, 0xa6, 0x1d, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x82, 0xa6, 0x1d, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x06, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x54,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xf0, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x82, 0x67, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xe3, 0x8c, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x85, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xaf,
	0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x97, 0x4c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc6, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x98, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0xd5, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x8c,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x39, 0x82, 0xa6, 0x1d, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d,
	0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8b, 0x07, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x84, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xff, 0x62, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xbb,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xbe, 0x77, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8b, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0xbf, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xbd, 0x63, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaa, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xd8, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xb5, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xce, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0xaf, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x38, 0x82, 0xa6, 0x1d,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xdc, 0x05, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe5, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xb1, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xb1, 0x63, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x95, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xf3, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0xa6, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0xb7, 0x94, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xe9, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0xc8, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x33, 0x82, 0xa6, 0x1d, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0xde, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x82, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0xff, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x01,
	0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0xaf, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xb9, 0x88, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x3a, 0x34, 0x82, 0xa6, 0x1d, 0x10, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x82,
	0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x88, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0xad, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61,
	0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0xa4, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xcf,
	0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x8d, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6b, 0x65, 0x79, 0x55, 0x72, 0x6c, 0x3a, 0x53, 0x82, 0xa6, 0x1d, 0x15, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x10, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x47, 0x0a,
	0x0e, 0x44, 0x44, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x35, 0x82, 0xa6, 0x1d, 0x0e, 0x44, 0x44, 0x6f, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x18, 0xfa, 0x64, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0xdf, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xf5,
	0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0xda, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a,
	0x46, 0x82, 0xa6, 0x1d, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x82, 0xa6, 0x1d, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0xc1, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0xae, 0x54, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x92, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0xdf,
	0x3b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0xb1, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x96, 0x70, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0xd8, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x3a, 0x44, 0x82, 0xa6, 0x1d, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x82, 0xa6, 0x1d, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe1, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1b,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xc5, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x08, 0x0a, 0x0f, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x91,
	0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf9,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x9e, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x93, 0x4f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x82, 0x78, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xf0, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18,
	0x92, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x61,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xf2, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0xc8,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x47, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfc, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xea, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0xd9, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xd8, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0xb6, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x9b, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3c,
	0x82, 0xa6, 0x1d, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6,
	0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xae, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xda, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x46, 0x82,
	0xa6, 0x1d, 0x0a, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d,
	0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfa, 0x05, 0x0a, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xd2, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0xa3, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0xb5, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0xae, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x83, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0xf9, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfd,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xcf, 0x63, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xfd, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xaf, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x42, 0x82, 0xa6, 0x1d, 0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82,
	0xa6, 0x1d, 0x03, 0x49, 0x6f, 0x54, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0xc9, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x54, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xc6, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0xc1, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x87, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc0,
	0x0b, 0x0a, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xee, 0x5b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xce, 0x6b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x84, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xff, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69,
	0x70, 0x73, 0x18, 0x8b, 0x37, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x53,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xe9, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb6, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xf1, 0x4f, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x95,
	0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x12, 0x61, 0x6e,
	0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xeb, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x18, 0xb1, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xb5, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x88, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xee, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0xb9, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0xa0, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xd8, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0xec, 0x36, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb7, 0x50, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xda, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x7e, 0x82, 0xa6, 0x1d, 0x17, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x82, 0xa6, 0x1d, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xf0, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x6a, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd1, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x67, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xde, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x3a, 0x39, 0x82, 0xa6, 0x1d, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x82, 0xa6, 0x1d, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb8, 0x01, 0x0a,
	0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x92, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0x48, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a,
	0x46, 0x82, 0xa6, 0x1d, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82,
	0xa6, 0x1d, 0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x3e, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa9, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x1a, 0x82, 0xa6, 0x1d,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x08, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xca, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8a, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xd9, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xfe, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xe3, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x7e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0xab, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x9b, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x95, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0xb0, 0x89, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65,
	0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0xd9, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xfe, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0xd1, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xaf, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x9b, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x38, 0x82, 0xa6, 0x1d,
	0x0b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x07,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xee, 0x09, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb7, 0x91, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd4, 0x4d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x8f, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xa4, 0x7d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a,
	0x03, 0x69, 0x70, 0x73, 0x18, 0x8f, 0x33, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73,
	0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x83, 0x49, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xcd, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xdd, 0x61, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xfc, 0x6c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xae, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0xd0, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0xfa, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x91, 0x23, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0xf0, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xe7, 0x52, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xf7, 0x2a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5f,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0xf3, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x66,
	0x82, 0xa6, 0x1d, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x33, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x18, 0xa5, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x33,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x18, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x18, 0x9d, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x77, 0x65,
	0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb3, 0x02, 0x0a,
	0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x88, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x44, 0x4b, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x64, 0x6b, 0x12, 0x5b, 0x0a, 0x13, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x18, 0xb3, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x8a, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0xca, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xd9, 0x08, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xe2, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x9b, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xc9, 0x59, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd8,
	0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xb6, 0x75, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xf5, 0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xfb, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x88, 0x37, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75,
	0x73, 0x65, 0x18, 0xf6, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xf6, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x80, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0xa8, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xfb, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x94, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xa8, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xd0,
	0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x35, 0x82, 0xa6, 0x1d, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8b,
	0x09, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xb0, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xcf, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa1,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0xfa, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0xca, 0x39, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x99, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf3, 0x7a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xb1, 0x8a, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0xbd, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x49, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xf4, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xb5, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xba, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xb4, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xfb, 0x8a, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0xd1, 0x59, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcf, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0xbd, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x51, 0x82, 0xa6, 0x1d,
	0x0f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xfb, 0x0b, 0x0a,
	0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48,
	0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0xfc,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xe0, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x67, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd1, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x90, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0d, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xaa, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0xeb, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0xad, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x18, 0xae, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x92, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd5, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xaa, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x6c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf7, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcb, 0x7f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x18, 0xcf, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41,
	0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0xe7, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfc, 0x06, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0xaf, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x97, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18,
	0xad, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa1, 0x58, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0xb5, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xad,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xe9, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0xa5, 0x71, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x11, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x12,
	0x55, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x99, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0xcb, 0x84,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x8f, 0x54, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x96, 0x77, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0xb2, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x2b,
	0x82, 0xa6, 0x1d, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf6, 0x08, 0x0a, 0x15, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0xde, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xf0, 0x63, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0xb8, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x92, 0x5a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x98, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x9b, 0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x94, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xdc, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x81, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xde, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xc7, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xbb, 0x7d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x9f,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0xb1, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x87, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x10, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x95, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x57, 0x82, 0xa6, 0x1d,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0x5a, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x32, 0x82, 0xa6, 0x1d, 0x0b,
	0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9d,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd6, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x42, 0x82, 0xa6, 0x1d, 0x0d,
	0x47, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d,
	0x0a, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe4,
	0x01, 0x0a, 0x11, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x9f, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0xda, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x73, 0x53, 0x61, 0x6c,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0xb6, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x3a, 0x4d, 0x82, 0xa6, 0x1d, 0x11, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x82, 0xa6, 0x1d,
	0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x37, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x3a, 0x22, 0x82, 0xa6, 0x1d, 0x11,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x82, 0xa6, 0x1d, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xb8,
	0x02, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0xa2, 0x4d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xfd, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0xef, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x49, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x88, 0x91, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf5,
	0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x21, 0x82, 0xa6, 0x1d, 0x0c, 0x48, 0x74, 0x74, 0x70,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xff, 0x01, 0x0a, 0x0b, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0xb7, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0xc8, 0x71, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x8c, 0x40, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x68,
	0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x2d, 0x82, 0xa6,
	0x1d, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x82, 0xa6, 0x1d,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xdf, 0x01, 0x0a, 0x12,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xeb, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xbe, 0x4d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0xea, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x3a, 0x27, 0x82, 0xa6, 0x1d, 0x12, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x14,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x18, 0xfb, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x3a, 0x1b, 0x82, 0xa6, 0x1d,
	0x0a, 0x48, 0x74, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x82, 0xa6, 0x1d, 0x09, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xe5, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xb9, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f,
	0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x08, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x84,
	0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x97, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x82, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0xd0, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x66, 0x61, 0x18, 0x99, 0x6b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x66, 0x61,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xe6, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd4, 0x78, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xcc, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x9f, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc8,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x92, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0xfd, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x97, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xc0, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcd, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc9, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xd4, 0x7b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0xa4, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xe6, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3a, 0x82, 0xa6, 0x1d, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0xa2, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x8b,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3d,
	0x0a, 0x08, 0x76, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0xa1, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xc3, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x3a, 0x30, 0x82, 0xa6, 0x1d, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x82, 0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x82,
	0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x57, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xc8, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x86, 0x4e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0xe3, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xd8, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x87, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x03, 0x49, 0x6f, 0x54, 0x12,
	0x73, 0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe4,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x93, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x75,
	0x62, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x75,
	0x62, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbf, 0x05, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x84, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xbd, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xbc, 0x73, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x9b, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xb1, 0x8c, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc2, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x90, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf5, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xc9, 0x60,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xea, 0x77, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xf1, 0x57, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x34, 0x82, 0xa6, 0x1d, 0x03, 0x4a, 0x6f, 0x62,
	0x82, 0xa6, 0x1d, 0x0b, 0x43, 0x49, 0x43, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82,
	0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x18,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xd0,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xe8, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x18, 0x96,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x3a,
	0x3f, 0x82, 0xa6, 0x1d, 0x18, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d,
	0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d,
	0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x89, 0x08, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x85, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xba, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfe, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd3, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xfa, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xbe, 0x77, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xb2, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0xca, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x87, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0xb1, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x91, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6e, 0x6f,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0xc6, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc2,
	0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x76, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xaf, 0x62, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xbe,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x99, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x33, 0x82, 0xa6, 0x1d, 0x03, 0x4b, 0x65, 0x79, 0x82, 0xa6, 0x1d, 0x0a,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x0b, 0x0a,
	0x17, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x90, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0xd3, 0x72, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xf4, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73,
	0x18, 0xe7, 0x54, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xa7, 0x6a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc7, 0x57, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xb6, 0x34, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xad, 0x71, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x58, 0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6d,
	0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8f,
	0x94, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x18, 0xcb, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe3, 0x57, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xf2, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xfb, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe5, 0x4f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x99,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x81, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xa3, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xfe, 0x73, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf7, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xc1, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x7e, 0x82, 0xa6, 0x1d, 0x17, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82,
	0xa6, 0x1d, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0xe7, 0x05, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbc,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbf,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xa1, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd8, 0x79, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xd1, 0x5c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc9, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xc7, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x80, 0x8b, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xec, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xb9, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xb7, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x2a, 0x82, 0xa6, 0x1d, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x82, 0xa6,
	0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x4c,
	0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x84, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0xad, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x3a, 0x53, 0x82, 0xa6, 0x1d,
	0x0a, 0x4c, 0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x82, 0xa6, 0x1d, 0x08, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x82, 0xa6, 0x1d, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d,
	0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xcf, 0x05, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd3, 0x5d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc3, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xae, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0xfa, 0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa9, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0x84, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0xf7, 0x4b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0xa7, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0xdd, 0x52, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xbc, 0x46,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xf0, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xbb, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x2c, 0x82, 0xa6, 0x1d, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x82, 0xa6, 0x1d, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0xc8, 0x0a, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x94, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x86, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xd9,
	0x40, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0xe9, 0x81, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0xc9, 0x61, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xe1, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa4, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x8c, 0x27, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xfb,
	0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x11, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0xb3, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x58, 0x0a,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xff, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x86, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0xcd, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd2, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0xa8, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x68,
	0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0xc9, 0x71, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xc1, 0x53,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xee, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x81, 0x44, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8d, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0xa9, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x4e, 0x82, 0xa6, 0x1d, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x72, 0x0a,
	0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xfe, 0x62, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x43, 0x82, 0xa6,
	0x1d, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x82, 0xa6,
	0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x9c, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x55, 0x0a, 0x12, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3e, 0x82, 0xa6, 0x1d, 0x15, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e, 0x27, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x44, 0x82, 0xa6, 0x1d, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0a, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x92, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x15, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xfd, 0x3a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xe9, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x2e, 0x82, 0xa6, 0x1d, 0x0c, 0x4c, 0x6f,
	0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x21, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x3a, 0x17, 0x82, 0xa6, 0x1d, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x82, 0xa6,
	0x1d, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xac, 0x03, 0x0a, 0x07,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x8c, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a,
	0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0xf7, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x87, 0x90, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xee, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x09, 0x6f, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x9b, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x09, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x96,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe4,
	0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x88, 0x55, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x95, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11,
	0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0xa6, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70,
	0x73, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x81, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0xf5, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xf7, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x18, 0xca, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xad, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x8e, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e,
	0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x82, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8d, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x84, 0x37, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x5f, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x50, 0x82, 0xa6, 0x1d, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x63, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0xa1, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x4c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x15, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0xc2, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd4, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0xc5, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x5b, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xf5, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x34, 0x82, 0xa6,
	0x1d, 0x11, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x82,
	0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x83, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1a, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd8, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x8a, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x55, 0x72, 0x6c,
	0x3a, 0x52, 0x82, 0xa6, 0x1d, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x10, 0x41, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6,
	0x1d, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xd1, 0x05, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x48, 0x75, 0x62, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0xff, 0x36, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x8d, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0xaa, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x75, 0x62, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa3, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a,
	0x03, 0x72, 0x61, 0x77, 0x18, 0xc1, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77,
	0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xce, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xae, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xb0,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xa1, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x35, 0x82, 0xa6, 0x1d, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x48, 0x75, 0x62, 0x82, 0xa6, 0x1d, 0x03, 0x49, 0x6f, 0x54, 0x82, 0xa6, 0x1d, 0x0e,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6,
	0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xdb, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb4, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb3, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x99, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x80, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc1, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0xc7, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x9b, 0x87, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x80, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0xd8, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x9f, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x22, 0x82,
	0xa6, 0x1d, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x82, 0xa6, 0x1d,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xb7, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xc3, 0x74, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x3a, 0x3f, 0x82, 0xa6, 0x1d, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82,
	0xa6, 0x1d, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x82,
	0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xc7, 0x0b, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xe1, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x8f, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xbf, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x9c,
	0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0xd8, 0x40, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x70, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xc4,
	0x3a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xdd, 0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xa9, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x57, 0x0a, 0x12, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa8, 0x38, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xa9, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0xbf, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfd, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0xca, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xbc, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xb8, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0xb9, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x92, 0x3d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0xca, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x80, 0x01, 0x82, 0xa6,
	0x1d, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0f, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6,
	0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8a, 0x07, 0x0a,
	0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xf9, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x85, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xbd, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0xa2, 0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xf1, 0x24,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xf4, 0x60, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xb8, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x58, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfe, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0x41, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xde, 0x84, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xc4, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8c, 0x58,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xdf, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x40, 0x82, 0xa6, 0x1d, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xef, 0x05, 0x0a, 0x14, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0xc8, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xc4, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xf3, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0xc5, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x91, 0x2e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb0, 0x59,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xa2, 0x57, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8b, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xd0, 0x6a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xa3, 0x71, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xfc, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x44, 0x82, 0xa6, 0x1d, 0x14, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82,
	0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf8, 0x08, 0x0a, 0x0e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54,
	0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xc1, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xe6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0xe9,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xb3, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a,
	0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe1, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xc5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0xae, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xbb, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe3, 0x0b, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x83, 0x4d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0xe7, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x14,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xc1, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe6, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x18, 0xe9, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0xb3, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0xe1, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xc5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a,
	0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xae, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64,
	0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xbb, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xff, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0xb2,
	0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48,
	0x00, 0x52, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x10,
	0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf7, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x3a,
	0x37, 0x82, 0xa6, 0x1d, 0x10, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x09, 0x4f, 0x53, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x92, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xde, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x9d, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xe2, 0x54, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x3a, 0x37, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x82, 0xa6, 0x1d, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x08,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x16,
	0x4f, 0x54, 0x50, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x18, 0xa0, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xe1, 0x93, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x3a, 0x3d, 0x82, 0xa6, 0x1d, 0x16, 0x4f, 0x54, 0x50, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xae, 0x08, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbd, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xdc, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0xbb, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0xa5, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xd4, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd1, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x8d, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xe8, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xf2, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x61, 0x74, 0x52, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x86, 0x4f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x83, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0xa8, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0c, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xed, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xff, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xa3, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0xf2, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3a, 0x82, 0xa6, 0x1d,
	0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6,
	0x1d, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0xd1, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0xbc, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x36, 0x82, 0xa6,
	0x1d, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x82, 0xa6, 0x1d, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0xf5, 0x09, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x93,
	0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xbc,
	0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xfb, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x9c, 0x7f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x90, 0x86, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xe4, 0x8a,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd5,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xe6, 0x3f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x8b, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x48,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xc4,
	0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xd2, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xf4, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0xdd, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x96, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xdf, 0x48, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0xad, 0x40, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xde, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xb5, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x68, 0x82, 0xa6, 0x1d, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6,
	0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x9f, 0x05, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0xad, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0xae, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x92, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xd5, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xaa, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x65, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xf7, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x1b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x96, 0x5c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0xd2, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x3a, 0x42, 0x82, 0xa6,
	0x1d, 0x1b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d,
	0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d,
	0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xd0, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x9a, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x95, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0xed, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0xa5, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0xcc, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x98, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xb6, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xfd, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xcd,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x84, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x3a, 0x30, 0x82, 0xa6, 0x1d, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0x2c, 0x0a, 0x11,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0xae, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x74, 0x69, 0x65, 0x73, 0x18, 0xee, 0x70, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x74, 0x69, 0x65, 0x73, 0x3a, 0x2c,
	0x82, 0xa6, 0x1d, 0x04, 0x52, 0x42, 0x41, 0x43, 0x82, 0xa6, 0x1d, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8d, 0x02, 0x0a,
	0x0a, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x0e, 0x67,
	0x65, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x84, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65,
	0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18,
	0xe9, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x79, 0x12, 0x51, 0x0a, 0x0f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x18, 0x89, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x0b, 0x0a,
	0x19, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x9f, 0x54, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe8, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xdb, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xda, 0x62, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69,
	0x70, 0x73, 0x18, 0xd3, 0x6c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x55,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xc5, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd6, 0x53,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x9d, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x12,
	0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xdc, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb8, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x84, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc9, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0xf6, 0x75, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xf2, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xfd, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x93, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x59,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xe7, 0x4b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x80, 0x01, 0x82, 0xa6, 0x1d, 0x19, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0a, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xcd, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd6, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0xfd, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x3a, 0x44, 0x82, 0xa6, 0x1d, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0b, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xc4, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xea, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x5f, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x3f, 0x82, 0xa6, 0x1d, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6,
	0x1d, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x22, 0xd0, 0x05, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd4, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcb, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0xd0, 0x57, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0xe5, 0x73, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0xed, 0x88, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x87, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x85, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xf2, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xcd, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x84, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x2f, 0x82, 0xa6, 0x1d, 0x0d, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe5, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x94, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xf8, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x17,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd3, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xce, 0x77, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x3a, 0x3d, 0x82, 0xa6, 0x1d, 0x0f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x07, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x97, 0x07, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0xf0, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x99, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x80, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0xa6, 0x31, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x95, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0xaa, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x93,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xee, 0x54, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0xac, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xe4, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x60,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xd0, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0xf8, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x40, 0x82, 0xa6, 0x1d, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xa9, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x86,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xae, 0x68, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xaf, 0x45, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x3a, 0x25, 0x82, 0xa6, 0x1d, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xd5, 0x07, 0x0a, 0x06,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe5, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x59, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xbd, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0xb6, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0xcf, 0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xb2, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0xbb, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x8c, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xc4, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x6f,
	0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x97, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xee, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xe7, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67,
	0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0xc2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xe5, 0x6f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x87, 0x69, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x95, 0x52, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x36, 0x82, 0xa6, 0x1d, 0x06, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x82, 0xa6, 0x1d, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xe9, 0x07, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xb7, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xb6, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xa5, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xee, 0x54, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xcb, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb9, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x8b, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18, 0xb5, 0x72, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x9a, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0xbc, 0x76, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xf2, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd8, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0xeb,
	0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0xb4, 0x5b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0f, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x34, 0x82, 0xa6, 0x1d,
	0x18, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x08, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xbd, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1b, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x3a, 0x29,
	0x82, 0xa6, 0x1d, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfd, 0x09, 0x0a, 0x17, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd1, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0xfb, 0x91, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0xae, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0xe5,
	0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0xc5, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb6, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xcb, 0x23, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xe3, 0x51, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x8c, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xee,
	0x3b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x88, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xb0, 0x80, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xd1, 0x8c, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xd0,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x73, 0x18,
	0xa8, 0x5e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xde, 0x49, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x5e, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xed, 0x56, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x9d, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x59, 0x82, 0xa6, 0x1d, 0x17, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x41, 0x64,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d,
	0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82,
	0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d,
	0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc0, 0x18, 0x0a, 0x0f, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x57, 0x0a,
	0x11, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xf8, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x8c, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x13,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0xf7, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x87, 0x90, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0xee, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x09, 0x6f, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x9b,
	0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x12, 0x5a, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe1, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x8a, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x48, 0x00, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1a, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb0, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x11,
	0x6e, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xb6, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x18, 0x6f, 0x74, 0x70, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xb7, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x54, 0x50, 0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x74, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xad, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1b, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6f,
	0x6e, 0x18, 0xc1, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x61, 0x62, 0x61, 0x63, 0x18, 0xe6, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x42, 0x41, 0x43, 0x48, 0x00, 0x52, 0x04, 0x61, 0x62, 0x61,
	0x63, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x33, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x18, 0xa5, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x33, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x33,
	0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x6a, 0x0a, 0x18, 0x77, 0x65, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x18, 0x9d, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x16, 0x77, 0x65,
	0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x62, 0x61, 0x63, 0x18, 0xdf, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x42, 0x41,
	0x43, 0x48, 0x00, 0x52, 0x04, 0x72, 0x62, 0x61, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x9d, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x5f, 0x64, 0x6f, 0x5f, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc3, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x44, 0x6f, 0x53, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x44, 0x6f, 0x53,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x67, 0x65,
	0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xda, 0x55, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x84, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0xe9, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x89, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x7a,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x67, 0x0a,
	0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xab, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xed, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x18, 0x9f, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb9, 0x7c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x86, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0xe3, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x0c,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xd8, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e,
	0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x87,
	0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x95, 0x07, 0x0a,
	0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xa7, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb3, 0x49, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0xcf, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0xf8, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xab,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xa5, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x8a, 0x5b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x73, 0x18,
	0xa1, 0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52,
	0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb7, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0xa3, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xd3, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xde, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0xb1, 0x92, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x33, 0x82, 0xa6, 0x1d, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xa6,
	0x1d, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0xbf, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0xb8, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x3a, 0x35, 0x82, 0xa6, 0x1d, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x98,
	0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xc9, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x3a, 0x33, 0x82, 0xa6, 0x1d, 0x0c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x4f, 0x6e, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x8d, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x54, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x8b, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0xb0, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0xf6, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x9e, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x1a, 0x6b,
	0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xe1, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x73, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0xc5, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xae,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xbb, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xd8, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x65, 0x6e, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x64, 0x18, 0xa6, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0xbb, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xbd, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0d, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18,
	0xd9, 0x8b, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x3a, 0x3d, 0x82, 0xa6, 0x1d, 0x13, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x73, 0x0a, 0x0f, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61,
	0x70, 0x69, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0xc9, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x48, 0x69, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x3a, 0x32, 0x82, 0xa6, 0x1d, 0x0f, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x82, 0xa6,
	0x1d, 0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86, 0x06,
	0x0a, 0x07, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd7, 0x40, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x98, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xcb, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x89, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xcd, 0x86, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe4, 0x30, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11,
	0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x83, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61,
	0x77, 0x12, 0x2b, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0xdf, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x81,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xad, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xa7, 0x6b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xc1, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x32, 0x82, 0xa6, 0x1d, 0x07, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xa6,
	0x1d, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xd0, 0x0b, 0x0a, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe9, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xb1, 0x71, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0xa8, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x96, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0xf0, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe1,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xf9, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xc6, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x11, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0xca, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x86, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0xe5,
	0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x53, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0xe4, 0x52, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x67,
	0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x12, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x97, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xe5, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x94, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x53, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6f, 0x73, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xe7, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a,
	0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xc5, 0x55, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0xdc, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0xcd, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3b,
	0x82, 0xa6, 0x1d, 0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x82, 0xa6, 0x1d, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x82, 0xa6, 0x1d,
	0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xdd, 0x05, 0x0a, 0x0e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x40, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xdd, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xca, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xf7, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xbf, 0x3d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xa2, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xb2, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x88, 0x6f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x6f,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x87, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xfe, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0xa5, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x3e, 0x82, 0xa6, 0x1d,
	0x0e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x82,
	0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d,
	0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xe7, 0x05, 0x0a, 0x11, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0xb0, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xf2, 0x4f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc5, 0x70,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xdc, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9b, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0xbd, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12,
	0x47, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xb2, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xb2, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x63, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x87, 0x62,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x8b, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x3a, 0x41, 0x82, 0xa6, 0x1d, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x82, 0xa6, 0x1d, 0x0a, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x11, 0x0a, 0x03, 0x63, 0x76, 0x65, 0x18, 0xcd, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x63, 0x77, 0x65, 0x18,
	0x95, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc2, 0x53, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd8, 0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x95, 0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x3a,
	0x22, 0x82, 0xa6, 0x1d, 0x0d, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x19,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x81, 0x46, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x5f, 0x82, 0xa6, 0x1d, 0x16, 0x57,
	0x65, 0x62, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x82, 0xa6, 0x1d, 0x08, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x82, 0xa6, 0x1d, 0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xcc, 0x05, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xdc, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xcf, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x98, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd0, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xe6, 0x48, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xfe, 0x60, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72,
	0x61, 0x77, 0x18, 0xc8, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x46,
	0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8e,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64,
	0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x97, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xba, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xda, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x39, 0x82, 0xa6, 0x1d, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x82, 0xa6,
	0x1d, 0x0b, 0x43, 0x49, 0x43, 0x44, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x82, 0xa6, 0x1d,
	0x0e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82,
	0xa6, 0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xbb, 0x07, 0x0a, 0x0b, 0x4d, 0x4c,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf0, 0x41, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaf, 0x89, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0xaf, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xd0, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xd8, 0x93, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x4c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb1, 0x48,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0xf1, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x56, 0x0a, 0x12, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xee, 0x60, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x52, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xee, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xe4, 0x7d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xa0, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x52, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x18, 0xbd, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xb5, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x81, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x40, 0x82, 0xa6, 0x1d, 0x0b, 0x4d, 0x4c,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x82, 0xa6, 0x1d, 0x0f, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x82, 0xa6, 0x1d, 0x0e,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x82, 0xa6,
	0x1d, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65,
	0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf7, 0x5b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x6f,
	0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x43, 0x82, 0xa6, 0x1d, 0x0e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0a, 0x52, 0x65, 0x64, 0x75,
	0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x82, 0xa6, 0x1d, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x82, 0xa6, 0x1d, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x28, 0x5a, 0x26,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x6e,
	0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_ontology_ontology_proto_rawDescOnce sync.Once
	file_api_ontology_ontology_proto_rawDescData = file_api_ontology_ontology_proto_rawDesc
)

func file_api_ontology_ontology_proto_rawDescGZIP() []byte {
	file_api_ontology_ontology_proto_rawDescOnce.Do(func() {
		file_api_ontology_ontology_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_ontology_ontology_proto_rawDescData)
	})
	return file_api_ontology_ontology_proto_rawDescData
}

var file_api_ontology_ontology_proto_msgTypes = make([]protoimpl.MessageInfo, 187)
var file_api_ontology_ontology_proto_goTypes = []any{
	(*ABAC)(nil),                           // 0: clouditor.ontology.v1.ABAC
	(*AccessRestriction)(nil),              // 1: clouditor.ontology.v1.AccessRestriction
	(*Account)(nil),                        // 2: clouditor.ontology.v1.Account
	(*ActivityLogging)(nil),                // 3: clouditor.ontology.v1.ActivityLogging
	(*AnomalyDetection)(nil),               // 4: clouditor.ontology.v1.AnomalyDetection
	(*Application)(nil),                    // 5: clouditor.ontology.v1.Application
	(*ApplicationLogging)(nil),             // 6: clouditor.ontology.v1.ApplicationLogging
	(*AtRestEncryption)(nil),               // 7: clouditor.ontology.v1.AtRestEncryption
	(*Attestation)(nil),                    // 8: clouditor.ontology.v1.Attestation
	(*Auditing)(nil),                       // 9: clouditor.ontology.v1.Auditing
	(*Authenticity)(nil),                   // 10: clouditor.ontology.v1.Authenticity
	(*Authorization)(nil),                  // 11: clouditor.ontology.v1.Authorization
	(*AutomaticUpdates)(nil),               // 12: clouditor.ontology.v1.AutomaticUpdates
	(*Availability)(nil),                   // 13: clouditor.ontology.v1.Availability
	(*Backup)(nil),                         // 14: clouditor.ontology.v1.Backup
	(*Resource)(nil),                       // 15: clouditor.ontology.v1.Resource
	(*BlockStorage)(nil),                   // 16: clouditor.ontology.v1.BlockStorage
	(*BootLogging)(nil),                    // 17: clouditor.ontology.v1.BootLogging
	(*CICDService)(nil),                    // 18: clouditor.ontology.v1.CICDService
	(*Certificate)(nil),                    // 19: clouditor.ontology.v1.Certificate
	(*CertificateBasedAuthentication)(nil), // 20: clouditor.ontology.v1.CertificateBasedAuthentication
	(*CipherSuite)(nil),                    // 21: clouditor.ontology.v1.CipherSuite
	(*Infrastructure)(nil),                 // 22: clouditor.ontology.v1.Infrastructure
	(*CloudSDK)(nil),                       // 23: clouditor.ontology.v1.CloudSDK
	(*Code)(nil),                           // 24: clouditor.ontology.v1.Code
	(*CodeRegion)(nil),                     // 25: clouditor.ontology.v1.CodeRegion
	(*CodeRepository)(nil),                 // 26: clouditor.ontology.v1.CodeRepository
	(*Component)(nil),                      // 27: clouditor.ontology.v1.Component
	(*Compute)(nil),                        // 28: clouditor.ontology.v1.Compute
	(*Confidentiality)(nil),                // 29: clouditor.ontology.v1.Confidentiality
	(*Container)(nil),                      // 30: clouditor.ontology.v1.Container
	(*ContainerImage)(nil),                 // 31: clouditor.ontology.v1.ContainerImage
	(*ContainerOrchestration)(nil),         // 32: clouditor.ontology.v1.ContainerOrchestration
	(*ContainerRegistry)(nil),              // 33: clouditor.ontology.v1.ContainerRegistry
	(*Credential)(nil),                     // 34: clouditor.ontology.v1.Credential
	(*DocumentChecksum)(nil),               // 35: clouditor.ontology.v1.DocumentChecksum
	(*CryptographicOperation)(nil),         // 36: clouditor.ontology.v1.CryptographicOperation
	(*CustomerKeyEncryption)(nil),          // 37: clouditor.ontology.v1.CustomerKeyEncryption
	(*DDoSProtection)(nil),                 // 38: clouditor.ontology.v1.DDoSProtection
	(*DatabaseConnect)(nil),                // 39: clouditor.ontology.v1.DatabaseConnect
	(*DatabaseOperation)(nil),              // 40: clouditor.ontology.v1.DatabaseOperation
	(*DatabaseQuery)(nil),                  // 41: clouditor.ontology.v1.DatabaseQuery
	(*DatabaseService)(nil),                // 42: clouditor.ontology.v1.DatabaseService
	(*DatabaseStorage)(nil),                // 43: clouditor.ontology.v1.DatabaseStorage
	(*Decryption)(nil),                     // 44: clouditor.ontology.v1.Decryption
	(*DeviceProvisioningService)(nil),      // 45: clouditor.ontology.v1.DeviceProvisioningService
	(*Document)(nil),                       // 46: clouditor.ontology.v1.Document
	(*DocumentDatabaseService)(nil),        // 47: clouditor.ontology.v1.DocumentDatabaseService
	(*DocumentLocation)(nil),               // 48: clouditor.ontology.v1.DocumentLocation
	(*EncryptionInUse)(nil),                // 49: clouditor.ontology.v1.EncryptionInUse
	(*Encryption)(nil),                     // 50: clouditor.ontology.v1.Encryption
	(*Error)(nil),                          // 51: clouditor.ontology.v1.Error
	(*FileStorage)(nil),                    // 52: clouditor.ontology.v1.FileStorage
	(*FileStorageService)(nil),             // 53: clouditor.ontology.v1.FileStorageService
	(*Firewall)(nil),                       // 54: clouditor.ontology.v1.Firewall
	(*Framework)(nil),                      // 55: clouditor.ontology.v1.Framework
	(*Function)(nil),                       // 56: clouditor.ontology.v1.Function
	(*FunctionService)(nil),                // 57: clouditor.ontology.v1.FunctionService
	(*Functionality)(nil),                  // 58: clouditor.ontology.v1.Functionality
	(*GenericDocument)(nil),                // 59: clouditor.ontology.v1.GenericDocument
	(*GenericNetworkService)(nil),          // 60: clouditor.ontology.v1.GenericNetworkService
	(*GeoLocation)(nil),                    // 61: clouditor.ontology.v1.GeoLocation
	(*GeoRedundancy)(nil),                  // 62: clouditor.ontology.v1.GeoRedundancy
	(*CryptographicHash)(nil),              // 63: clouditor.ontology.v1.CryptographicHash
	(*HttpClientLibrary)(nil),              // 64: clouditor.ontology.v1.HttpClientLibrary
	(*HttpEndpoint)(nil),                   // 65: clouditor.ontology.v1.HttpEndpoint
	(*HttpRequest)(nil),                    // 66: clouditor.ontology.v1.HttpRequest
	(*HttpRequestHandler)(nil),             // 67: clouditor.ontology.v1.HttpRequestHandler
	(*HttpServer)(nil),                     // 68: clouditor.ontology.v1.HttpServer
	(*Identifiable)(nil),                   // 69: clouditor.ontology.v1.Identifiable
	(*Identity)(nil),                       // 70: clouditor.ontology.v1.Identity
	(*Image)(nil),                          // 71: clouditor.ontology.v1.Image
	(*Immutability)(nil),                   // 72: clouditor.ontology.v1.Immutability
	(*Integrity)(nil),                      // 73: clouditor.ontology.v1.Integrity
	(*IoT)(nil),                            // 74: clouditor.ontology.v1.IoT
	(*Job)(nil),                            // 75: clouditor.ontology.v1.Job
	(*TokenBasedAuthentication)(nil),       // 76: clouditor.ontology.v1.TokenBasedAuthentication
	(*Key)(nil),                            // 77: clouditor.ontology.v1.Key
	(*KeyValueDatabaseService)(nil),        // 78: clouditor.ontology.v1.KeyValueDatabaseService
	(*KeyVault)(nil),                       // 79: clouditor.ontology.v1.KeyVault
	(*L3Firewall)(nil),                     // 80: clouditor.ontology.v1.L3Firewall
	(*Library)(nil),                        // 81: clouditor.ontology.v1.Library
	(*LoadBalancer)(nil),                   // 82: clouditor.ontology.v1.LoadBalancer
	(*LocalAttestation)(nil),               // 83: clouditor.ontology.v1.LocalAttestation
	(*LocalDocumentLocation)(nil),          // 84: clouditor.ontology.v1.LocalDocumentLocation
	(*LocalRedundancy)(nil),                // 85: clouditor.ontology.v1.LocalRedundancy
	(*LogOperation)(nil),                   // 86: clouditor.ontology.v1.LogOperation
	(*Logger)(nil),                         // 87: clouditor.ontology.v1.Logger
	(*Logging)(nil),                        // 88: clouditor.ontology.v1.Logging
	(*LoggingService)(nil),                 // 89: clouditor.ontology.v1.LoggingService
	(*MachineLearning)(nil),                // 90: clouditor.ontology.v1.MachineLearning
	(*MalwareProtection)(nil),              // 91: clouditor.ontology.v1.MalwareProtection
	(*ManagedKeyEncryption)(nil),           // 92: clouditor.ontology.v1.ManagedKeyEncryption
	(*MessagingHub)(nil),                   // 93: clouditor.ontology.v1.MessagingHub
	(*CodeModule)(nil),                     // 94: clouditor.ontology.v1.CodeModule
	(*MultiFactorAuthentiation)(nil),       // 95: clouditor.ontology.v1.MultiFactorAuthentiation
	(*MultiModalDatabaseService)(nil),      // 96: clouditor.ontology.v1.MultiModalDatabaseService
	(*NetworkInterface)(nil),               // 97: clouditor.ontology.v1.NetworkInterface
	(*NetworkSecurityGroup)(nil),           // 98: clouditor.ontology.v1.NetworkSecurityGroup
	(*NetworkService)(nil),                 // 99: clouditor.ontology.v1.NetworkService
	(*Networking)(nil),                     // 100: clouditor.ontology.v1.Networking
	(*NoAuthentication)(nil),               // 101: clouditor.ontology.v1.NoAuthentication
	(*OSLogging)(nil),                      // 102: clouditor.ontology.v1.OSLogging
	(*OTPBasedAuthentication)(nil),         // 103: clouditor.ontology.v1.OTPBasedAuthentication
	(*ObjectStorage)(nil),                  // 104: clouditor.ontology.v1.ObjectStorage
	(*ObjectStorageRequest)(nil),           // 105: clouditor.ontology.v1.ObjectStorageRequest
	(*ObjectStorageService)(nil),           // 106: clouditor.ontology.v1.ObjectStorageService
	(*Operation)(nil),                      // 107: clouditor.ontology.v1.Operation
	(*PasswordBasedAuthentication)(nil),    // 108: clouditor.ontology.v1.PasswordBasedAuthentication
	(*PasswordPolicy)(nil),                 // 109: clouditor.ontology.v1.PasswordPolicy
	(*RBAC)(nil),                           // 110: clouditor.ontology.v1.RBAC
	(*Redundancy)(nil),                     // 111: clouditor.ontology.v1.Redundancy
	(*RelationalDatabaseService)(nil),      // 112: clouditor.ontology.v1.RelationalDatabaseService
	(*RemoteAttestation)(nil),              // 113: clouditor.ontology.v1.RemoteAttestation
	(*RemoteDocumentLocation)(nil),         // 114: clouditor.ontology.v1.RemoteDocumentLocation
	(*ResourceGroup)(nil),                  // 115: clouditor.ontology.v1.ResourceGroup
	(*ResourceLogging)(nil),                // 116: clouditor.ontology.v1.ResourceLogging
	(*RoleAssignment)(nil),                 // 117: clouditor.ontology.v1.RoleAssignment
	(*SchemaValidation)(nil),               // 118: clouditor.ontology.v1.SchemaValidation
	(*Secret)(nil),                         // 119: clouditor.ontology.v1.Secret
	(*SecurityAdvisoryDocument)(nil),       // 120: clouditor.ontology.v1.SecurityAdvisoryDocument
	(*SecurityAdvisoryFeed)(nil),           // 121: clouditor.ontology.v1.SecurityAdvisoryFeed
	(*SecurityAdvisoryService)(nil),        // 122: clouditor.ontology.v1.SecurityAdvisoryService
	(*SecurityFeature)(nil),                // 123: clouditor.ontology.v1.SecurityFeature
	(*ServiceMetadataDocument)(nil),        // 124: clouditor.ontology.v1.ServiceMetadataDocument
	(*DocumentSignature)(nil),              // 125: clouditor.ontology.v1.DocumentSignature
	(*SingleSignOn)(nil),                   // 126: clouditor.ontology.v1.SingleSignOn
	(*Storage)(nil),                        // 127: clouditor.ontology.v1.Storage
	(*StorageService)(nil),                 // 128: clouditor.ontology.v1.StorageService
	(*TransportEncryption)(nil),            // 129: clouditor.ontology.v1.TransportEncryption
	(*UsageStatistics)(nil),                // 130: clouditor.ontology.v1.UsageStatistics
	(*VMImage)(nil),                        // 131: clouditor.ontology.v1.VMImage
	(*VirtualMachine)(nil),                 // 132: clouditor.ontology.v1.VirtualMachine
	(*VirtualNetwork)(nil),                 // 133: clouditor.ontology.v1.VirtualNetwork
	(*VirtualSubNetwork)(nil),              // 134: clouditor.ontology.v1.VirtualSubNetwork
	(*Vulnerability)(nil),                  // 135: clouditor.ontology.v1.Vulnerability
	(*WebApplicationFirewall)(nil),         // 136: clouditor.ontology.v1.WebApplicationFirewall
	(*Workflow)(nil),                       // 137: clouditor.ontology.v1.Workflow
	(*MLWorkspace)(nil),                    // 138: clouditor.ontology.v1.MLWorkspace
	(*ZoneRedundancy)(nil),                 // 139: clouditor.ontology.v1.ZoneRedundancy
	nil,                                    // 140: clouditor.ontology.v1.Account.LabelsEntry
	nil,                                    // 141: clouditor.ontology.v1.Application.LabelsEntry
	nil,                                    // 142: clouditor.ontology.v1.BlockStorage.LabelsEntry
	nil,                                    // 143: clouditor.ontology.v1.Certificate.LabelsEntry
	nil,                                    // 144: clouditor.ontology.v1.CodeRepository.LabelsEntry
	nil,                                    // 145: clouditor.ontology.v1.Container.LabelsEntry
	nil,                                    // 146: clouditor.ontology.v1.ContainerImage.LabelsEntry
	nil,                                    // 147: clouditor.ontology.v1.ContainerOrchestration.LabelsEntry
	nil,                                    // 148: clouditor.ontology.v1.ContainerRegistry.LabelsEntry
	nil,                                    // 149: clouditor.ontology.v1.DatabaseStorage.LabelsEntry
	nil,                                    // 150: clouditor.ontology.v1.DeviceProvisioningService.LabelsEntry
	nil,                                    // 151: clouditor.ontology.v1.DocumentDatabaseService.LabelsEntry
	nil,                                    // 152: clouditor.ontology.v1.FileStorage.LabelsEntry
	nil,                                    // 153: clouditor.ontology.v1.FileStorageService.LabelsEntry
	nil,                                    // 154: clouditor.ontology.v1.Function.LabelsEntry
	nil,                                    // 155: clouditor.ontology.v1.FunctionService.LabelsEntry
	nil,                                    // 156: clouditor.ontology.v1.GenericDocument.LabelsEntry
	nil,                                    // 157: clouditor.ontology.v1.GenericNetworkService.LabelsEntry
	nil,                                    // 158: clouditor.ontology.v1.Identity.LabelsEntry
	nil,                                    // 159: clouditor.ontology.v1.Job.LabelsEntry
	nil,                                    // 160: clouditor.ontology.v1.Key.LabelsEntry
	nil,                                    // 161: clouditor.ontology.v1.KeyValueDatabaseService.LabelsEntry
	nil,                                    // 162: clouditor.ontology.v1.KeyVault.LabelsEntry
	nil,                                    // 163: clouditor.ontology.v1.Library.LabelsEntry
	nil,                                    // 164: clouditor.ontology.v1.LoadBalancer.LabelsEntry
	nil,                                    // 165: clouditor.ontology.v1.LoggingService.LabelsEntry
	nil,                                    // 166: clouditor.ontology.v1.MessagingHub.LabelsEntry
	nil,                                    // 167: clouditor.ontology.v1.CodeModule.LabelsEntry
	nil,                                    // 168: clouditor.ontology.v1.MultiModalDatabaseService.LabelsEntry
	nil,                                    // 169: clouditor.ontology.v1.NetworkInterface.LabelsEntry
	nil,                                    // 170: clouditor.ontology.v1.NetworkSecurityGroup.LabelsEntry
	nil,                                    // 171: clouditor.ontology.v1.ObjectStorage.LabelsEntry
	nil,                                    // 172: clouditor.ontology.v1.ObjectStorageService.LabelsEntry
	nil,                                    // 173: clouditor.ontology.v1.PasswordPolicy.LabelsEntry
	nil,                                    // 174: clouditor.ontology.v1.RelationalDatabaseService.LabelsEntry
	nil,                                    // 175: clouditor.ontology.v1.ResourceGroup.LabelsEntry
	nil,                                    // 176: clouditor.ontology.v1.RoleAssignment.LabelsEntry
	nil,                                    // 177: clouditor.ontology.v1.Secret.LabelsEntry
	nil,                                    // 178: clouditor.ontology.v1.SecurityAdvisoryDocument.LabelsEntry
	nil,                                    // 179: clouditor.ontology.v1.SecurityAdvisoryService.LabelsEntry
	nil,                                    // 180: clouditor.ontology.v1.ServiceMetadataDocument.LabelsEntry
	nil,                                    // 181: clouditor.ontology.v1.VMImage.LabelsEntry
	nil,                                    // 182: clouditor.ontology.v1.VirtualMachine.LabelsEntry
	nil,                                    // 183: clouditor.ontology.v1.VirtualNetwork.LabelsEntry
	nil,                                    // 184: clouditor.ontology.v1.VirtualSubNetwork.LabelsEntry
	nil,                                    // 185: clouditor.ontology.v1.Workflow.LabelsEntry
	nil,                                    // 186: clouditor.ontology.v1.MLWorkspace.LabelsEntry
	(*timestamppb.Timestamp)(nil),          // 187: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),            // 188: google.protobuf.Duration
	(*descriptorpb.MessageOptions)(nil),    // 189: google.protobuf.MessageOptions
}
var file_api_ontology_ontology_proto_depIdxs = []int32{
	80,  // 0: clouditor.ontology.v1.AccessRestriction.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	136, // 1: clouditor.ontology.v1.AccessRestriction.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	187, // 2: clouditor.ontology.v1.Account.creation_time:type_name -> google.protobuf.Timestamp
	140, // 3: clouditor.ontology.v1.Account.labels:type_name -> clouditor.ontology.v1.Account.LabelsEntry
	61,  // 4: clouditor.ontology.v1.Account.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 5: clouditor.ontology.v1.Account.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 6: clouditor.ontology.v1.Account.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	188, // 7: clouditor.ontology.v1.ActivityLogging.retention_period:type_name -> google.protobuf.Duration
	6,   // 8: clouditor.ontology.v1.AnomalyDetection.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	187, // 9: clouditor.ontology.v1.Application.creation_time:type_name -> google.protobuf.Timestamp
	141, // 10: clouditor.ontology.v1.Application.labels:type_name -> clouditor.ontology.v1.Application.LabelsEntry
	12,  // 11: clouditor.ontology.v1.Application.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	58,  // 12: clouditor.ontology.v1.Application.functionalities:type_name -> clouditor.ontology.v1.Functionality
	188, // 13: clouditor.ontology.v1.ApplicationLogging.retention_period:type_name -> google.protobuf.Duration
	37,  // 14: clouditor.ontology.v1.AtRestEncryption.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	92,  // 15: clouditor.ontology.v1.AtRestEncryption.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	83,  // 16: clouditor.ontology.v1.Attestation.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	113, // 17: clouditor.ontology.v1.Attestation.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	4,   // 18: clouditor.ontology.v1.Auditing.anomaly_detection:type_name -> clouditor.ontology.v1.AnomalyDetection
	3,   // 19: clouditor.ontology.v1.Auditing.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 20: clouditor.ontology.v1.Auditing.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 21: clouditor.ontology.v1.Auditing.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	102, // 22: clouditor.ontology.v1.Auditing.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	116, // 23: clouditor.ontology.v1.Auditing.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	91,  // 24: clouditor.ontology.v1.Auditing.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	130, // 25: clouditor.ontology.v1.Auditing.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	20,  // 26: clouditor.ontology.v1.Authenticity.certificate_based_authentication:type_name -> clouditor.ontology.v1.CertificateBasedAuthentication
	76,  // 27: clouditor.ontology.v1.Authenticity.token_based_authentication:type_name -> clouditor.ontology.v1.TokenBasedAuthentication
	95,  // 28: clouditor.ontology.v1.Authenticity.multi_factor_authentiation:type_name -> clouditor.ontology.v1.MultiFactorAuthentiation
	101, // 29: clouditor.ontology.v1.Authenticity.no_authentication:type_name -> clouditor.ontology.v1.NoAuthentication
	103, // 30: clouditor.ontology.v1.Authenticity.otp_based_authentication:type_name -> clouditor.ontology.v1.OTPBasedAuthentication
	108, // 31: clouditor.ontology.v1.Authenticity.password_based_authentication:type_name -> clouditor.ontology.v1.PasswordBasedAuthentication
	126, // 32: clouditor.ontology.v1.Authenticity.single_sign_on:type_name -> clouditor.ontology.v1.SingleSignOn
	0,   // 33: clouditor.ontology.v1.Authorization.abac:type_name -> clouditor.ontology.v1.ABAC
	80,  // 34: clouditor.ontology.v1.Authorization.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	136, // 35: clouditor.ontology.v1.Authorization.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	110, // 36: clouditor.ontology.v1.Authorization.rbac:type_name -> clouditor.ontology.v1.RBAC
	188, // 37: clouditor.ontology.v1.AutomaticUpdates.interval:type_name -> google.protobuf.Duration
	14,  // 38: clouditor.ontology.v1.Availability.backup:type_name -> clouditor.ontology.v1.Backup
	38,  // 39: clouditor.ontology.v1.Availability.d_do_s_protection:type_name -> clouditor.ontology.v1.DDoSProtection
	61,  // 40: clouditor.ontology.v1.Availability.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	62,  // 41: clouditor.ontology.v1.Availability.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	85,  // 42: clouditor.ontology.v1.Availability.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	139, // 43: clouditor.ontology.v1.Availability.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	188, // 44: clouditor.ontology.v1.Backup.interval:type_name -> google.protobuf.Duration
	188, // 45: clouditor.ontology.v1.Backup.retention_period:type_name -> google.protobuf.Duration
	129, // 46: clouditor.ontology.v1.Backup.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	2,   // 47: clouditor.ontology.v1.Resource.account:type_name -> clouditor.ontology.v1.Account
	75,  // 48: clouditor.ontology.v1.Resource.job:type_name -> clouditor.ontology.v1.Job
	137, // 49: clouditor.ontology.v1.Resource.workflow:type_name -> clouditor.ontology.v1.Workflow
	26,  // 50: clouditor.ontology.v1.Resource.code_repository:type_name -> clouditor.ontology.v1.CodeRepository
	30,  // 51: clouditor.ontology.v1.Resource.container:type_name -> clouditor.ontology.v1.Container
	56,  // 52: clouditor.ontology.v1.Resource.function:type_name -> clouditor.ontology.v1.Function
	132, // 53: clouditor.ontology.v1.Resource.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	32,  // 54: clouditor.ontology.v1.Resource.container_orchestration:type_name -> clouditor.ontology.v1.ContainerOrchestration
	33,  // 55: clouditor.ontology.v1.Resource.container_registry:type_name -> clouditor.ontology.v1.ContainerRegistry
	19,  // 56: clouditor.ontology.v1.Resource.certificate:type_name -> clouditor.ontology.v1.Certificate
	77,  // 57: clouditor.ontology.v1.Resource.key:type_name -> clouditor.ontology.v1.Key
	119, // 58: clouditor.ontology.v1.Resource.secret:type_name -> clouditor.ontology.v1.Secret
	70,  // 59: clouditor.ontology.v1.Resource.identity:type_name -> clouditor.ontology.v1.Identity
	117, // 60: clouditor.ontology.v1.Resource.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	31,  // 61: clouditor.ontology.v1.Resource.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	131, // 62: clouditor.ontology.v1.Resource.vm_image:type_name -> clouditor.ontology.v1.VMImage
	45,  // 63: clouditor.ontology.v1.Resource.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	93,  // 64: clouditor.ontology.v1.Resource.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	79,  // 65: clouditor.ontology.v1.Resource.key_vault:type_name -> clouditor.ontology.v1.KeyVault
	138, // 66: clouditor.ontology.v1.Resource.ml_workspace:type_name -> clouditor.ontology.v1.MLWorkspace
	97,  // 67: clouditor.ontology.v1.Resource.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	98,  // 68: clouditor.ontology.v1.Resource.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	57,  // 69: clouditor.ontology.v1.Resource.function_service:type_name -> clouditor.ontology.v1.FunctionService
	60,  // 70: clouditor.ontology.v1.Resource.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	82,  // 71: clouditor.ontology.v1.Resource.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	89,  // 72: clouditor.ontology.v1.Resource.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	122, // 73: clouditor.ontology.v1.Resource.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	47,  // 74: clouditor.ontology.v1.Resource.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 75: clouditor.ontology.v1.Resource.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 76: clouditor.ontology.v1.Resource.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 77: clouditor.ontology.v1.Resource.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	53,  // 78: clouditor.ontology.v1.Resource.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	106, // 79: clouditor.ontology.v1.Resource.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	133, // 80: clouditor.ontology.v1.Resource.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	134, // 81: clouditor.ontology.v1.Resource.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	109, // 82: clouditor.ontology.v1.Resource.password_policy:type_name -> clouditor.ontology.v1.PasswordPolicy
	115, // 83: clouditor.ontology.v1.Resource.resource_group:type_name -> clouditor.ontology.v1.ResourceGroup
	16,  // 84: clouditor.ontology.v1.Resource.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	43,  // 85: clouditor.ontology.v1.Resource.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	52,  // 86: clouditor.ontology.v1.Resource.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	104, // 87: clouditor.ontology.v1.Resource.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	5,   // 88: clouditor.ontology.v1.Resource.application:type_name -> clouditor.ontology.v1.Application
	81,  // 89: clouditor.ontology.v1.Resource.library:type_name -> clouditor.ontology.v1.Library
	94,  // 90: clouditor.ontology.v1.Resource.code_module:type_name -> clouditor.ontology.v1.CodeModule
	59,  // 91: clouditor.ontology.v1.Resource.generic_document:type_name -> clouditor.ontology.v1.GenericDocument
	120, // 92: clouditor.ontology.v1.Resource.security_advisory_document:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument
	124, // 93: clouditor.ontology.v1.Resource.service_metadata_document:type_name -> clouditor.ontology.v1.ServiceMetadataDocument
	187, // 94: clouditor.ontology.v1.BlockStorage.creation_time:type_name -> google.protobuf.Timestamp
	142, // 95: clouditor.ontology.v1.BlockStorage.labels:type_name -> clouditor.ontology.v1.BlockStorage.LabelsEntry
	7,   // 96: clouditor.ontology.v1.BlockStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	14,  // 97: clouditor.ontology.v1.BlockStorage.backups:type_name -> clouditor.ontology.v1.Backup
	61,  // 98: clouditor.ontology.v1.BlockStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	72,  // 99: clouditor.ontology.v1.BlockStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	111, // 100: clouditor.ontology.v1.BlockStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 101: clouditor.ontology.v1.BlockStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 102: clouditor.ontology.v1.BlockStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	188, // 103: clouditor.ontology.v1.BootLogging.retention_period:type_name -> google.protobuf.Duration
	75,  // 104: clouditor.ontology.v1.CICDService.job:type_name -> clouditor.ontology.v1.Job
	137, // 105: clouditor.ontology.v1.CICDService.workflow:type_name -> clouditor.ontology.v1.Workflow
	187, // 106: clouditor.ontology.v1.Certificate.creation_time:type_name -> google.protobuf.Timestamp
	187, // 107: clouditor.ontology.v1.Certificate.expiration_date:type_name -> google.protobuf.Timestamp
	143, // 108: clouditor.ontology.v1.Certificate.labels:type_name -> clouditor.ontology.v1.Certificate.LabelsEntry
	187, // 109: clouditor.ontology.v1.Certificate.not_before_date:type_name -> google.protobuf.Timestamp
	61,  // 110: clouditor.ontology.v1.Certificate.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 111: clouditor.ontology.v1.Certificate.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 112: clouditor.ontology.v1.Certificate.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	2,   // 113: clouditor.ontology.v1.Infrastructure.account:type_name -> clouditor.ontology.v1.Account
	75,  // 114: clouditor.ontology.v1.Infrastructure.job:type_name -> clouditor.ontology.v1.Job
	137, // 115: clouditor.ontology.v1.Infrastructure.workflow:type_name -> clouditor.ontology.v1.Workflow
	26,  // 116: clouditor.ontology.v1.Infrastructure.code_repository:type_name -> clouditor.ontology.v1.CodeRepository
	30,  // 117: clouditor.ontology.v1.Infrastructure.container:type_name -> clouditor.ontology.v1.Container
	56,  // 118: clouditor.ontology.v1.Infrastructure.function:type_name -> clouditor.ontology.v1.Function
	132, // 119: clouditor.ontology.v1.Infrastructure.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	32,  // 120: clouditor.ontology.v1.Infrastructure.container_orchestration:type_name -> clouditor.ontology.v1.ContainerOrchestration
	33,  // 121: clouditor.ontology.v1.Infrastructure.container_registry:type_name -> clouditor.ontology.v1.ContainerRegistry
	19,  // 122: clouditor.ontology.v1.Infrastructure.certificate:type_name -> clouditor.ontology.v1.Certificate
	77,  // 123: clouditor.ontology.v1.Infrastructure.key:type_name -> clouditor.ontology.v1.Key
	119, // 124: clouditor.ontology.v1.Infrastructure.secret:type_name -> clouditor.ontology.v1.Secret
	70,  // 125: clouditor.ontology.v1.Infrastructure.identity:type_name -> clouditor.ontology.v1.Identity
	117, // 126: clouditor.ontology.v1.Infrastructure.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	31,  // 127: clouditor.ontology.v1.Infrastructure.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	131, // 128: clouditor.ontology.v1.Infrastructure.vm_image:type_name -> clouditor.ontology.v1.VMImage
	45,  // 129: clouditor.ontology.v1.Infrastructure.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	93,  // 130: clouditor.ontology.v1.Infrastructure.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	79,  // 131: clouditor.ontology.v1.Infrastructure.key_vault:type_name -> clouditor.ontology.v1.KeyVault
	138, // 132: clouditor.ontology.v1.Infrastructure.ml_workspace:type_name -> clouditor.ontology.v1.MLWorkspace
	97,  // 133: clouditor.ontology.v1.Infrastructure.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	98,  // 134: clouditor.ontology.v1.Infrastructure.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	57,  // 135: clouditor.ontology.v1.Infrastructure.function_service:type_name -> clouditor.ontology.v1.FunctionService
	60,  // 136: clouditor.ontology.v1.Infrastructure.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	82,  // 137: clouditor.ontology.v1.Infrastructure.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	89,  // 138: clouditor.ontology.v1.Infrastructure.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	122, // 139: clouditor.ontology.v1.Infrastructure.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	47,  // 140: clouditor.ontology.v1.Infrastructure.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 141: clouditor.ontology.v1.Infrastructure.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 142: clouditor.ontology.v1.Infrastructure.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 143: clouditor.ontology.v1.Infrastructure.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	53,  // 144: clouditor.ontology.v1.Infrastructure.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	106, // 145: clouditor.ontology.v1.Infrastructure.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	133, // 146: clouditor.ontology.v1.Infrastructure.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	134, // 147: clouditor.ontology.v1.Infrastructure.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	109, // 148: clouditor.ontology.v1.Infrastructure.password_policy:type_name -> clouditor.ontology.v1.PasswordPolicy
	115, // 149: clouditor.ontology.v1.Infrastructure.resource_group:type_name -> clouditor.ontology.v1.ResourceGroup
	16,  // 150: clouditor.ontology.v1.Infrastructure.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	43,  // 151: clouditor.ontology.v1.Infrastructure.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	52,  // 152: clouditor.ontology.v1.Infrastructure.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	104, // 153: clouditor.ontology.v1.Infrastructure.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	5,   // 154: clouditor.ontology.v1.Code.application:type_name -> clouditor.ontology.v1.Application
	81,  // 155: clouditor.ontology.v1.Code.library:type_name -> clouditor.ontology.v1.Library
	94,  // 156: clouditor.ontology.v1.Code.code_module:type_name -> clouditor.ontology.v1.CodeModule
	187, // 157: clouditor.ontology.v1.CodeRepository.creation_time:type_name -> google.protobuf.Timestamp
	144, // 158: clouditor.ontology.v1.CodeRepository.labels:type_name -> clouditor.ontology.v1.CodeRepository.LabelsEntry
	61,  // 159: clouditor.ontology.v1.CodeRepository.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 160: clouditor.ontology.v1.CodeRepository.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 161: clouditor.ontology.v1.CodeRepository.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	5,   // 162: clouditor.ontology.v1.Component.application:type_name -> clouditor.ontology.v1.Application
	81,  // 163: clouditor.ontology.v1.Component.library:type_name -> clouditor.ontology.v1.Library
	30,  // 164: clouditor.ontology.v1.Compute.container:type_name -> clouditor.ontology.v1.Container
	56,  // 165: clouditor.ontology.v1.Compute.function:type_name -> clouditor.ontology.v1.Function
	132, // 166: clouditor.ontology.v1.Compute.virtual_machine:type_name -> clouditor.ontology.v1.VirtualMachine
	37,  // 167: clouditor.ontology.v1.Confidentiality.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	92,  // 168: clouditor.ontology.v1.Confidentiality.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	49,  // 169: clouditor.ontology.v1.Confidentiality.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	129, // 170: clouditor.ontology.v1.Confidentiality.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	187, // 171: clouditor.ontology.v1.Container.creation_time:type_name -> google.protobuf.Timestamp
	145, // 172: clouditor.ontology.v1.Container.labels:type_name -> clouditor.ontology.v1.Container.LabelsEntry
	49,  // 173: clouditor.ontology.v1.Container.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	61,  // 174: clouditor.ontology.v1.Container.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 175: clouditor.ontology.v1.Container.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	113, // 176: clouditor.ontology.v1.Container.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	116, // 177: clouditor.ontology.v1.Container.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 178: clouditor.ontology.v1.Container.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 179: clouditor.ontology.v1.ContainerImage.creation_time:type_name -> google.protobuf.Timestamp
	146, // 180: clouditor.ontology.v1.ContainerImage.labels:type_name -> clouditor.ontology.v1.ContainerImage.LabelsEntry
	61,  // 181: clouditor.ontology.v1.ContainerImage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 182: clouditor.ontology.v1.ContainerImage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 183: clouditor.ontology.v1.ContainerImage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 184: clouditor.ontology.v1.ContainerOrchestration.creation_time:type_name -> google.protobuf.Timestamp
	147, // 185: clouditor.ontology.v1.ContainerOrchestration.labels:type_name -> clouditor.ontology.v1.ContainerOrchestration.LabelsEntry
	61,  // 186: clouditor.ontology.v1.ContainerOrchestration.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 187: clouditor.ontology.v1.ContainerOrchestration.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 188: clouditor.ontology.v1.ContainerOrchestration.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 189: clouditor.ontology.v1.ContainerOrchestration.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 190: clouditor.ontology.v1.ContainerRegistry.creation_time:type_name -> google.protobuf.Timestamp
	148, // 191: clouditor.ontology.v1.ContainerRegistry.labels:type_name -> clouditor.ontology.v1.ContainerRegistry.LabelsEntry
	61,  // 192: clouditor.ontology.v1.ContainerRegistry.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 193: clouditor.ontology.v1.ContainerRegistry.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 194: clouditor.ontology.v1.ContainerRegistry.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	19,  // 195: clouditor.ontology.v1.Credential.certificate:type_name -> clouditor.ontology.v1.Certificate
	77,  // 196: clouditor.ontology.v1.Credential.key:type_name -> clouditor.ontology.v1.Key
	119, // 197: clouditor.ontology.v1.Credential.secret:type_name -> clouditor.ontology.v1.Secret
	51,  // 198: clouditor.ontology.v1.DocumentChecksum.errors:type_name -> clouditor.ontology.v1.Error
	44,  // 199: clouditor.ontology.v1.CryptographicOperation.decryption:type_name -> clouditor.ontology.v1.Decryption
	50,  // 200: clouditor.ontology.v1.CryptographicOperation.encryption:type_name -> clouditor.ontology.v1.Encryption
	63,  // 201: clouditor.ontology.v1.CryptographicOperation.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	25,  // 202: clouditor.ontology.v1.DatabaseConnect.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	39,  // 203: clouditor.ontology.v1.DatabaseOperation.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	41,  // 204: clouditor.ontology.v1.DatabaseOperation.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	25,  // 205: clouditor.ontology.v1.DatabaseQuery.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	47,  // 206: clouditor.ontology.v1.DatabaseService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 207: clouditor.ontology.v1.DatabaseService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 208: clouditor.ontology.v1.DatabaseService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 209: clouditor.ontology.v1.DatabaseService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	187, // 210: clouditor.ontology.v1.DatabaseStorage.creation_time:type_name -> google.protobuf.Timestamp
	149, // 211: clouditor.ontology.v1.DatabaseStorage.labels:type_name -> clouditor.ontology.v1.DatabaseStorage.LabelsEntry
	7,   // 212: clouditor.ontology.v1.DatabaseStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	14,  // 213: clouditor.ontology.v1.DatabaseStorage.backups:type_name -> clouditor.ontology.v1.Backup
	61,  // 214: clouditor.ontology.v1.DatabaseStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	72,  // 215: clouditor.ontology.v1.DatabaseStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	111, // 216: clouditor.ontology.v1.DatabaseStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 217: clouditor.ontology.v1.DatabaseStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 218: clouditor.ontology.v1.DatabaseStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	25,  // 219: clouditor.ontology.v1.Decryption.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	187, // 220: clouditor.ontology.v1.DeviceProvisioningService.creation_time:type_name -> google.protobuf.Timestamp
	150, // 221: clouditor.ontology.v1.DeviceProvisioningService.labels:type_name -> clouditor.ontology.v1.DeviceProvisioningService.LabelsEntry
	61,  // 222: clouditor.ontology.v1.DeviceProvisioningService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 223: clouditor.ontology.v1.DeviceProvisioningService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 224: clouditor.ontology.v1.DeviceProvisioningService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	59,  // 225: clouditor.ontology.v1.Document.generic_document:type_name -> clouditor.ontology.v1.GenericDocument
	120, // 226: clouditor.ontology.v1.Document.security_advisory_document:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument
	124, // 227: clouditor.ontology.v1.Document.service_metadata_document:type_name -> clouditor.ontology.v1.ServiceMetadataDocument
	187, // 228: clouditor.ontology.v1.DocumentDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	151, // 229: clouditor.ontology.v1.DocumentDatabaseService.labels:type_name -> clouditor.ontology.v1.DocumentDatabaseService.LabelsEntry
	4,   // 230: clouditor.ontology.v1.DocumentDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 231: clouditor.ontology.v1.DocumentDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 232: clouditor.ontology.v1.DocumentDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 233: clouditor.ontology.v1.DocumentDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	91,  // 234: clouditor.ontology.v1.DocumentDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	111, // 235: clouditor.ontology.v1.DocumentDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 236: clouditor.ontology.v1.DocumentDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 237: clouditor.ontology.v1.DocumentDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	84,  // 238: clouditor.ontology.v1.DocumentLocation.local_document_location:type_name -> clouditor.ontology.v1.LocalDocumentLocation
	114, // 239: clouditor.ontology.v1.DocumentLocation.remote_document_location:type_name -> clouditor.ontology.v1.RemoteDocumentLocation
	25,  // 240: clouditor.ontology.v1.Encryption.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	187, // 241: clouditor.ontology.v1.FileStorage.creation_time:type_name -> google.protobuf.Timestamp
	152, // 242: clouditor.ontology.v1.FileStorage.labels:type_name -> clouditor.ontology.v1.FileStorage.LabelsEntry
	7,   // 243: clouditor.ontology.v1.FileStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	14,  // 244: clouditor.ontology.v1.FileStorage.backups:type_name -> clouditor.ontology.v1.Backup
	61,  // 245: clouditor.ontology.v1.FileStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	72,  // 246: clouditor.ontology.v1.FileStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	111, // 247: clouditor.ontology.v1.FileStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 248: clouditor.ontology.v1.FileStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 249: clouditor.ontology.v1.FileStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 250: clouditor.ontology.v1.FileStorageService.creation_time:type_name -> google.protobuf.Timestamp
	153, // 251: clouditor.ontology.v1.FileStorageService.labels:type_name -> clouditor.ontology.v1.FileStorageService.LabelsEntry
	10,  // 252: clouditor.ontology.v1.FileStorageService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 253: clouditor.ontology.v1.FileStorageService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 254: clouditor.ontology.v1.FileStorageService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	111, // 255: clouditor.ontology.v1.FileStorageService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 256: clouditor.ontology.v1.FileStorageService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 257: clouditor.ontology.v1.FileStorageService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	80,  // 258: clouditor.ontology.v1.Firewall.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	136, // 259: clouditor.ontology.v1.Firewall.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	23,  // 260: clouditor.ontology.v1.Framework.cloud_sdk:type_name -> clouditor.ontology.v1.CloudSDK
	64,  // 261: clouditor.ontology.v1.Framework.http_client_library:type_name -> clouditor.ontology.v1.HttpClientLibrary
	68,  // 262: clouditor.ontology.v1.Framework.http_server:type_name -> clouditor.ontology.v1.HttpServer
	87,  // 263: clouditor.ontology.v1.Framework.logger:type_name -> clouditor.ontology.v1.Logger
	187, // 264: clouditor.ontology.v1.Function.creation_time:type_name -> google.protobuf.Timestamp
	154, // 265: clouditor.ontology.v1.Function.labels:type_name -> clouditor.ontology.v1.Function.LabelsEntry
	49,  // 266: clouditor.ontology.v1.Function.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	61,  // 267: clouditor.ontology.v1.Function.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 268: clouditor.ontology.v1.Function.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	113, // 269: clouditor.ontology.v1.Function.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	116, // 270: clouditor.ontology.v1.Function.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 271: clouditor.ontology.v1.Function.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 272: clouditor.ontology.v1.FunctionService.creation_time:type_name -> google.protobuf.Timestamp
	155, // 273: clouditor.ontology.v1.FunctionService.labels:type_name -> clouditor.ontology.v1.FunctionService.LabelsEntry
	10,  // 274: clouditor.ontology.v1.FunctionService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 275: clouditor.ontology.v1.FunctionService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 276: clouditor.ontology.v1.FunctionService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 277: clouditor.ontology.v1.FunctionService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 278: clouditor.ontology.v1.FunctionService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	21,  // 279: clouditor.ontology.v1.Functionality.cipher_suite:type_name -> clouditor.ontology.v1.CipherSuite
	25,  // 280: clouditor.ontology.v1.Functionality.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	84,  // 281: clouditor.ontology.v1.Functionality.local_document_location:type_name -> clouditor.ontology.v1.LocalDocumentLocation
	114, // 282: clouditor.ontology.v1.Functionality.remote_document_location:type_name -> clouditor.ontology.v1.RemoteDocumentLocation
	51,  // 283: clouditor.ontology.v1.Functionality.error:type_name -> clouditor.ontology.v1.Error
	65,  // 284: clouditor.ontology.v1.Functionality.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	67,  // 285: clouditor.ontology.v1.Functionality.http_request_handler:type_name -> clouditor.ontology.v1.HttpRequestHandler
	44,  // 286: clouditor.ontology.v1.Functionality.decryption:type_name -> clouditor.ontology.v1.Decryption
	50,  // 287: clouditor.ontology.v1.Functionality.encryption:type_name -> clouditor.ontology.v1.Encryption
	63,  // 288: clouditor.ontology.v1.Functionality.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	39,  // 289: clouditor.ontology.v1.Functionality.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	41,  // 290: clouditor.ontology.v1.Functionality.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	66,  // 291: clouditor.ontology.v1.Functionality.http_request:type_name -> clouditor.ontology.v1.HttpRequest
	86,  // 292: clouditor.ontology.v1.Functionality.log_operation:type_name -> clouditor.ontology.v1.LogOperation
	105, // 293: clouditor.ontology.v1.Functionality.object_storage_request:type_name -> clouditor.ontology.v1.ObjectStorageRequest
	118, // 294: clouditor.ontology.v1.Functionality.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	121, // 295: clouditor.ontology.v1.Functionality.security_advisory_feed:type_name -> clouditor.ontology.v1.SecurityAdvisoryFeed
	135, // 296: clouditor.ontology.v1.Functionality.vulnerability:type_name -> clouditor.ontology.v1.Vulnerability
	187, // 297: clouditor.ontology.v1.GenericDocument.creation_time:type_name -> google.protobuf.Timestamp
	156, // 298: clouditor.ontology.v1.GenericDocument.labels:type_name -> clouditor.ontology.v1.GenericDocument.LabelsEntry
	35,  // 299: clouditor.ontology.v1.GenericDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	48,  // 300: clouditor.ontology.v1.GenericDocument.document_location:type_name -> clouditor.ontology.v1.DocumentLocation
	125, // 301: clouditor.ontology.v1.GenericDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	118, // 302: clouditor.ontology.v1.GenericDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	123, // 303: clouditor.ontology.v1.GenericDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	187, // 304: clouditor.ontology.v1.GenericNetworkService.creation_time:type_name -> google.protobuf.Timestamp
	157, // 305: clouditor.ontology.v1.GenericNetworkService.labels:type_name -> clouditor.ontology.v1.GenericNetworkService.LabelsEntry
	10,  // 306: clouditor.ontology.v1.GenericNetworkService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 307: clouditor.ontology.v1.GenericNetworkService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 308: clouditor.ontology.v1.GenericNetworkService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 309: clouditor.ontology.v1.GenericNetworkService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 310: clouditor.ontology.v1.GenericNetworkService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	61,  // 311: clouditor.ontology.v1.GeoRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	25,  // 312: clouditor.ontology.v1.CryptographicHash.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	10,  // 313: clouditor.ontology.v1.HttpEndpoint.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	129, // 314: clouditor.ontology.v1.HttpEndpoint.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	25,  // 315: clouditor.ontology.v1.HttpRequest.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	65,  // 316: clouditor.ontology.v1.HttpRequest.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	65,  // 317: clouditor.ontology.v1.HttpRequestHandler.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	67,  // 318: clouditor.ontology.v1.HttpServer.http_request_handler:type_name -> clouditor.ontology.v1.HttpRequestHandler
	70,  // 319: clouditor.ontology.v1.Identifiable.identity:type_name -> clouditor.ontology.v1.Identity
	117, // 320: clouditor.ontology.v1.Identifiable.role_assignment:type_name -> clouditor.ontology.v1.RoleAssignment
	187, // 321: clouditor.ontology.v1.Identity.creation_time:type_name -> google.protobuf.Timestamp
	158, // 322: clouditor.ontology.v1.Identity.labels:type_name -> clouditor.ontology.v1.Identity.LabelsEntry
	187, // 323: clouditor.ontology.v1.Identity.last_activity:type_name -> google.protobuf.Timestamp
	10,  // 324: clouditor.ontology.v1.Identity.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	11,  // 325: clouditor.ontology.v1.Identity.authorization:type_name -> clouditor.ontology.v1.Authorization
	61,  // 326: clouditor.ontology.v1.Identity.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 327: clouditor.ontology.v1.Identity.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 328: clouditor.ontology.v1.Identity.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	31,  // 329: clouditor.ontology.v1.Image.container_image:type_name -> clouditor.ontology.v1.ContainerImage
	131, // 330: clouditor.ontology.v1.Image.vm_image:type_name -> clouditor.ontology.v1.VMImage
	83,  // 331: clouditor.ontology.v1.Integrity.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	113, // 332: clouditor.ontology.v1.Integrity.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	12,  // 333: clouditor.ontology.v1.Integrity.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	35,  // 334: clouditor.ontology.v1.Integrity.document_checksum:type_name -> clouditor.ontology.v1.DocumentChecksum
	72,  // 335: clouditor.ontology.v1.Integrity.immutability:type_name -> clouditor.ontology.v1.Immutability
	125, // 336: clouditor.ontology.v1.Integrity.document_signature:type_name -> clouditor.ontology.v1.DocumentSignature
	45,  // 337: clouditor.ontology.v1.IoT.device_provisioning_service:type_name -> clouditor.ontology.v1.DeviceProvisioningService
	93,  // 338: clouditor.ontology.v1.IoT.messaging_hub:type_name -> clouditor.ontology.v1.MessagingHub
	187, // 339: clouditor.ontology.v1.Job.creation_time:type_name -> google.protobuf.Timestamp
	159, // 340: clouditor.ontology.v1.Job.labels:type_name -> clouditor.ontology.v1.Job.LabelsEntry
	61,  // 341: clouditor.ontology.v1.Job.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 342: clouditor.ontology.v1.Job.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 343: clouditor.ontology.v1.Job.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 344: clouditor.ontology.v1.Key.creation_time:type_name -> google.protobuf.Timestamp
	187, // 345: clouditor.ontology.v1.Key.expiration_date:type_name -> google.protobuf.Timestamp
	160, // 346: clouditor.ontology.v1.Key.labels:type_name -> clouditor.ontology.v1.Key.LabelsEntry
	187, // 347: clouditor.ontology.v1.Key.not_before_date:type_name -> google.protobuf.Timestamp
	61,  // 348: clouditor.ontology.v1.Key.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 349: clouditor.ontology.v1.Key.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 350: clouditor.ontology.v1.Key.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 351: clouditor.ontology.v1.KeyValueDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	161, // 352: clouditor.ontology.v1.KeyValueDatabaseService.labels:type_name -> clouditor.ontology.v1.KeyValueDatabaseService.LabelsEntry
	4,   // 353: clouditor.ontology.v1.KeyValueDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 354: clouditor.ontology.v1.KeyValueDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 355: clouditor.ontology.v1.KeyValueDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 356: clouditor.ontology.v1.KeyValueDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	91,  // 357: clouditor.ontology.v1.KeyValueDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	111, // 358: clouditor.ontology.v1.KeyValueDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 359: clouditor.ontology.v1.KeyValueDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 360: clouditor.ontology.v1.KeyValueDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 361: clouditor.ontology.v1.KeyVault.creation_time:type_name -> google.protobuf.Timestamp
	162, // 362: clouditor.ontology.v1.KeyVault.labels:type_name -> clouditor.ontology.v1.KeyVault.LabelsEntry
	61,  // 363: clouditor.ontology.v1.KeyVault.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 364: clouditor.ontology.v1.KeyVault.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 365: clouditor.ontology.v1.KeyVault.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 366: clouditor.ontology.v1.Library.creation_time:type_name -> google.protobuf.Timestamp
	163, // 367: clouditor.ontology.v1.Library.labels:type_name -> clouditor.ontology.v1.Library.LabelsEntry
	58,  // 368: clouditor.ontology.v1.Library.functionalities:type_name -> clouditor.ontology.v1.Functionality
	135, // 369: clouditor.ontology.v1.Library.vulnerabilities:type_name -> clouditor.ontology.v1.Vulnerability
	187, // 370: clouditor.ontology.v1.LoadBalancer.creation_time:type_name -> google.protobuf.Timestamp
	164, // 371: clouditor.ontology.v1.LoadBalancer.labels:type_name -> clouditor.ontology.v1.LoadBalancer.LabelsEntry
	1,   // 372: clouditor.ontology.v1.LoadBalancer.access_restriction:type_name -> clouditor.ontology.v1.AccessRestriction
	10,  // 373: clouditor.ontology.v1.LoadBalancer.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 374: clouditor.ontology.v1.LoadBalancer.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 375: clouditor.ontology.v1.LoadBalancer.http_endpoints:type_name -> clouditor.ontology.v1.HttpEndpoint
	111, // 376: clouditor.ontology.v1.LoadBalancer.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 377: clouditor.ontology.v1.LoadBalancer.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 378: clouditor.ontology.v1.LoadBalancer.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	7,   // 379: clouditor.ontology.v1.LocalDocumentLocation.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	61,  // 380: clouditor.ontology.v1.LocalRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	25,  // 381: clouditor.ontology.v1.LogOperation.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	88,  // 382: clouditor.ontology.v1.LogOperation.logging:type_name -> clouditor.ontology.v1.Logging
	3,   // 383: clouditor.ontology.v1.Logging.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 384: clouditor.ontology.v1.Logging.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 385: clouditor.ontology.v1.Logging.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	102, // 386: clouditor.ontology.v1.Logging.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	116, // 387: clouditor.ontology.v1.Logging.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	187, // 388: clouditor.ontology.v1.LoggingService.creation_time:type_name -> google.protobuf.Timestamp
	165, // 389: clouditor.ontology.v1.LoggingService.labels:type_name -> clouditor.ontology.v1.LoggingService.LabelsEntry
	10,  // 390: clouditor.ontology.v1.LoggingService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 391: clouditor.ontology.v1.LoggingService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 392: clouditor.ontology.v1.LoggingService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 393: clouditor.ontology.v1.LoggingService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 394: clouditor.ontology.v1.LoggingService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	138, // 395: clouditor.ontology.v1.MachineLearning.ml_workspace:type_name -> clouditor.ontology.v1.MLWorkspace
	188, // 396: clouditor.ontology.v1.MalwareProtection.duration_since_active:type_name -> google.protobuf.Duration
	6,   // 397: clouditor.ontology.v1.MalwareProtection.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	187, // 398: clouditor.ontology.v1.MessagingHub.creation_time:type_name -> google.protobuf.Timestamp
	166, // 399: clouditor.ontology.v1.MessagingHub.labels:type_name -> clouditor.ontology.v1.MessagingHub.LabelsEntry
	61,  // 400: clouditor.ontology.v1.MessagingHub.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 401: clouditor.ontology.v1.MessagingHub.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 402: clouditor.ontology.v1.MessagingHub.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 403: clouditor.ontology.v1.CodeModule.creation_time:type_name -> google.protobuf.Timestamp
	167, // 404: clouditor.ontology.v1.CodeModule.labels:type_name -> clouditor.ontology.v1.CodeModule.LabelsEntry
	58,  // 405: clouditor.ontology.v1.CodeModule.functionalities:type_name -> clouditor.ontology.v1.Functionality
	10,  // 406: clouditor.ontology.v1.MultiFactorAuthentiation.authenticities:type_name -> clouditor.ontology.v1.Authenticity
	187, // 407: clouditor.ontology.v1.MultiModalDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	168, // 408: clouditor.ontology.v1.MultiModalDatabaseService.labels:type_name -> clouditor.ontology.v1.MultiModalDatabaseService.LabelsEntry
	4,   // 409: clouditor.ontology.v1.MultiModalDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 410: clouditor.ontology.v1.MultiModalDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 411: clouditor.ontology.v1.MultiModalDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 412: clouditor.ontology.v1.MultiModalDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	91,  // 413: clouditor.ontology.v1.MultiModalDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	111, // 414: clouditor.ontology.v1.MultiModalDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 415: clouditor.ontology.v1.MultiModalDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 416: clouditor.ontology.v1.MultiModalDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 417: clouditor.ontology.v1.NetworkInterface.creation_time:type_name -> google.protobuf.Timestamp
	169, // 418: clouditor.ontology.v1.NetworkInterface.labels:type_name -> clouditor.ontology.v1.NetworkInterface.LabelsEntry
	1,   // 419: clouditor.ontology.v1.NetworkInterface.access_restriction:type_name -> clouditor.ontology.v1.AccessRestriction
	61,  // 420: clouditor.ontology.v1.NetworkInterface.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 421: clouditor.ontology.v1.NetworkInterface.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 422: clouditor.ontology.v1.NetworkInterface.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 423: clouditor.ontology.v1.NetworkSecurityGroup.creation_time:type_name -> google.protobuf.Timestamp
	170, // 424: clouditor.ontology.v1.NetworkSecurityGroup.labels:type_name -> clouditor.ontology.v1.NetworkSecurityGroup.LabelsEntry
	61,  // 425: clouditor.ontology.v1.NetworkSecurityGroup.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 426: clouditor.ontology.v1.NetworkSecurityGroup.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 427: clouditor.ontology.v1.NetworkSecurityGroup.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	57,  // 428: clouditor.ontology.v1.NetworkService.function_service:type_name -> clouditor.ontology.v1.FunctionService
	60,  // 429: clouditor.ontology.v1.NetworkService.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	82,  // 430: clouditor.ontology.v1.NetworkService.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	89,  // 431: clouditor.ontology.v1.NetworkService.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	122, // 432: clouditor.ontology.v1.NetworkService.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	47,  // 433: clouditor.ontology.v1.NetworkService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 434: clouditor.ontology.v1.NetworkService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 435: clouditor.ontology.v1.NetworkService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 436: clouditor.ontology.v1.NetworkService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	53,  // 437: clouditor.ontology.v1.NetworkService.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	106, // 438: clouditor.ontology.v1.NetworkService.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	97,  // 439: clouditor.ontology.v1.Networking.network_interface:type_name -> clouditor.ontology.v1.NetworkInterface
	98,  // 440: clouditor.ontology.v1.Networking.network_security_group:type_name -> clouditor.ontology.v1.NetworkSecurityGroup
	57,  // 441: clouditor.ontology.v1.Networking.function_service:type_name -> clouditor.ontology.v1.FunctionService
	60,  // 442: clouditor.ontology.v1.Networking.generic_network_service:type_name -> clouditor.ontology.v1.GenericNetworkService
	82,  // 443: clouditor.ontology.v1.Networking.load_balancer:type_name -> clouditor.ontology.v1.LoadBalancer
	89,  // 444: clouditor.ontology.v1.Networking.logging_service:type_name -> clouditor.ontology.v1.LoggingService
	122, // 445: clouditor.ontology.v1.Networking.security_advisory_service:type_name -> clouditor.ontology.v1.SecurityAdvisoryService
	47,  // 446: clouditor.ontology.v1.Networking.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 447: clouditor.ontology.v1.Networking.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 448: clouditor.ontology.v1.Networking.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 449: clouditor.ontology.v1.Networking.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	53,  // 450: clouditor.ontology.v1.Networking.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	106, // 451: clouditor.ontology.v1.Networking.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	133, // 452: clouditor.ontology.v1.Networking.virtual_network:type_name -> clouditor.ontology.v1.VirtualNetwork
	134, // 453: clouditor.ontology.v1.Networking.virtual_sub_network:type_name -> clouditor.ontology.v1.VirtualSubNetwork
	188, // 454: clouditor.ontology.v1.OSLogging.retention_period:type_name -> google.protobuf.Duration
	187, // 455: clouditor.ontology.v1.ObjectStorage.creation_time:type_name -> google.protobuf.Timestamp
	171, // 456: clouditor.ontology.v1.ObjectStorage.labels:type_name -> clouditor.ontology.v1.ObjectStorage.LabelsEntry
	7,   // 457: clouditor.ontology.v1.ObjectStorage.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	14,  // 458: clouditor.ontology.v1.ObjectStorage.backups:type_name -> clouditor.ontology.v1.Backup
	61,  // 459: clouditor.ontology.v1.ObjectStorage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	72,  // 460: clouditor.ontology.v1.ObjectStorage.immutability:type_name -> clouditor.ontology.v1.Immutability
	111, // 461: clouditor.ontology.v1.ObjectStorage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 462: clouditor.ontology.v1.ObjectStorage.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 463: clouditor.ontology.v1.ObjectStorage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	25,  // 464: clouditor.ontology.v1.ObjectStorageRequest.code_region:type_name -> clouditor.ontology.v1.CodeRegion
	187, // 465: clouditor.ontology.v1.ObjectStorageService.creation_time:type_name -> google.protobuf.Timestamp
	172, // 466: clouditor.ontology.v1.ObjectStorageService.labels:type_name -> clouditor.ontology.v1.ObjectStorageService.LabelsEntry
	10,  // 467: clouditor.ontology.v1.ObjectStorageService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 468: clouditor.ontology.v1.ObjectStorageService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 469: clouditor.ontology.v1.ObjectStorageService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	111, // 470: clouditor.ontology.v1.ObjectStorageService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 471: clouditor.ontology.v1.ObjectStorageService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 472: clouditor.ontology.v1.ObjectStorageService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	44,  // 473: clouditor.ontology.v1.Operation.decryption:type_name -> clouditor.ontology.v1.Decryption
	50,  // 474: clouditor.ontology.v1.Operation.encryption:type_name -> clouditor.ontology.v1.Encryption
	63,  // 475: clouditor.ontology.v1.Operation.cryptographic_hash:type_name -> clouditor.ontology.v1.CryptographicHash
	39,  // 476: clouditor.ontology.v1.Operation.database_connect:type_name -> clouditor.ontology.v1.DatabaseConnect
	41,  // 477: clouditor.ontology.v1.Operation.database_query:type_name -> clouditor.ontology.v1.DatabaseQuery
	66,  // 478: clouditor.ontology.v1.Operation.http_request:type_name -> clouditor.ontology.v1.HttpRequest
	86,  // 479: clouditor.ontology.v1.Operation.log_operation:type_name -> clouditor.ontology.v1.LogOperation
	105, // 480: clouditor.ontology.v1.Operation.object_storage_request:type_name -> clouditor.ontology.v1.ObjectStorageRequest
	187, // 481: clouditor.ontology.v1.PasswordPolicy.creation_time:type_name -> google.protobuf.Timestamp
	173, // 482: clouditor.ontology.v1.PasswordPolicy.labels:type_name -> clouditor.ontology.v1.PasswordPolicy.LabelsEntry
	61,  // 483: clouditor.ontology.v1.PasswordPolicy.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 484: clouditor.ontology.v1.PasswordPolicy.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 485: clouditor.ontology.v1.PasswordPolicy.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	62,  // 486: clouditor.ontology.v1.Redundancy.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	85,  // 487: clouditor.ontology.v1.Redundancy.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	139, // 488: clouditor.ontology.v1.Redundancy.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	187, // 489: clouditor.ontology.v1.RelationalDatabaseService.creation_time:type_name -> google.protobuf.Timestamp
	174, // 490: clouditor.ontology.v1.RelationalDatabaseService.labels:type_name -> clouditor.ontology.v1.RelationalDatabaseService.LabelsEntry
	4,   // 491: clouditor.ontology.v1.RelationalDatabaseService.anomaly_detections:type_name -> clouditor.ontology.v1.AnomalyDetection
	10,  // 492: clouditor.ontology.v1.RelationalDatabaseService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 493: clouditor.ontology.v1.RelationalDatabaseService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	65,  // 494: clouditor.ontology.v1.RelationalDatabaseService.http_endpoint:type_name -> clouditor.ontology.v1.HttpEndpoint
	91,  // 495: clouditor.ontology.v1.RelationalDatabaseService.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	111, // 496: clouditor.ontology.v1.RelationalDatabaseService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	129, // 497: clouditor.ontology.v1.RelationalDatabaseService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 498: clouditor.ontology.v1.RelationalDatabaseService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 499: clouditor.ontology.v1.RemoteAttestation.creation_time:type_name -> google.protobuf.Timestamp
	10,  // 500: clouditor.ontology.v1.RemoteDocumentLocation.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	129, // 501: clouditor.ontology.v1.RemoteDocumentLocation.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	187, // 502: clouditor.ontology.v1.ResourceGroup.creation_time:type_name -> google.protobuf.Timestamp
	175, // 503: clouditor.ontology.v1.ResourceGroup.labels:type_name -> clouditor.ontology.v1.ResourceGroup.LabelsEntry
	61,  // 504: clouditor.ontology.v1.ResourceGroup.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 505: clouditor.ontology.v1.ResourceGroup.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 506: clouditor.ontology.v1.ResourceGroup.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	188, // 507: clouditor.ontology.v1.ResourceLogging.retention_period:type_name -> google.protobuf.Duration
	187, // 508: clouditor.ontology.v1.RoleAssignment.creation_time:type_name -> google.protobuf.Timestamp
	176, // 509: clouditor.ontology.v1.RoleAssignment.labels:type_name -> clouditor.ontology.v1.RoleAssignment.LabelsEntry
	10,  // 510: clouditor.ontology.v1.RoleAssignment.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	11,  // 511: clouditor.ontology.v1.RoleAssignment.authorization:type_name -> clouditor.ontology.v1.Authorization
	61,  // 512: clouditor.ontology.v1.RoleAssignment.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 513: clouditor.ontology.v1.RoleAssignment.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 514: clouditor.ontology.v1.RoleAssignment.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	51,  // 515: clouditor.ontology.v1.SchemaValidation.errors:type_name -> clouditor.ontology.v1.Error
	187, // 516: clouditor.ontology.v1.Secret.creation_time:type_name -> google.protobuf.Timestamp
	187, // 517: clouditor.ontology.v1.Secret.expiration_date:type_name -> google.protobuf.Timestamp
	177, // 518: clouditor.ontology.v1.Secret.labels:type_name -> clouditor.ontology.v1.Secret.LabelsEntry
	187, // 519: clouditor.ontology.v1.Secret.not_before_date:type_name -> google.protobuf.Timestamp
	61,  // 520: clouditor.ontology.v1.Secret.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 521: clouditor.ontology.v1.Secret.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 522: clouditor.ontology.v1.Secret.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 523: clouditor.ontology.v1.SecurityAdvisoryDocument.creation_time:type_name -> google.protobuf.Timestamp
	178, // 524: clouditor.ontology.v1.SecurityAdvisoryDocument.labels:type_name -> clouditor.ontology.v1.SecurityAdvisoryDocument.LabelsEntry
	35,  // 525: clouditor.ontology.v1.SecurityAdvisoryDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	48,  // 526: clouditor.ontology.v1.SecurityAdvisoryDocument.document_location:type_name -> clouditor.ontology.v1.DocumentLocation
	125, // 527: clouditor.ontology.v1.SecurityAdvisoryDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	118, // 528: clouditor.ontology.v1.SecurityAdvisoryDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	123, // 529: clouditor.ontology.v1.SecurityAdvisoryDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	135, // 530: clouditor.ontology.v1.SecurityAdvisoryDocument.vulnerabilities:type_name -> clouditor.ontology.v1.Vulnerability
	187, // 531: clouditor.ontology.v1.SecurityAdvisoryService.creation_time:type_name -> google.protobuf.Timestamp
	179, // 532: clouditor.ontology.v1.SecurityAdvisoryService.labels:type_name -> clouditor.ontology.v1.SecurityAdvisoryService.LabelsEntry
	10,  // 533: clouditor.ontology.v1.SecurityAdvisoryService.authenticity:type_name -> clouditor.ontology.v1.Authenticity
	61,  // 534: clouditor.ontology.v1.SecurityAdvisoryService.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 535: clouditor.ontology.v1.SecurityAdvisoryService.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	121, // 536: clouditor.ontology.v1.SecurityAdvisoryService.security_advisory_feeds:type_name -> clouditor.ontology.v1.SecurityAdvisoryFeed
	129, // 537: clouditor.ontology.v1.SecurityAdvisoryService.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	130, // 538: clouditor.ontology.v1.SecurityAdvisoryService.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	4,   // 539: clouditor.ontology.v1.SecurityFeature.anomaly_detection:type_name -> clouditor.ontology.v1.AnomalyDetection
	3,   // 540: clouditor.ontology.v1.SecurityFeature.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	6,   // 541: clouditor.ontology.v1.SecurityFeature.application_logging:type_name -> clouditor.ontology.v1.ApplicationLogging
	17,  // 542: clouditor.ontology.v1.SecurityFeature.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	102, // 543: clouditor.ontology.v1.SecurityFeature.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	116, // 544: clouditor.ontology.v1.SecurityFeature.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	91,  // 545: clouditor.ontology.v1.SecurityFeature.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	130, // 546: clouditor.ontology.v1.SecurityFeature.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	20,  // 547: clouditor.ontology.v1.SecurityFeature.certificate_based_authentication:type_name -> clouditor.ontology.v1.CertificateBasedAuthentication
	76,  // 548: clouditor.ontology.v1.SecurityFeature.token_based_authentication:type_name -> clouditor.ontology.v1.TokenBasedAuthentication
	95,  // 549: clouditor.ontology.v1.SecurityFeature.multi_factor_authentiation:type_name -> clouditor.ontology.v1.MultiFactorAuthentiation
	101, // 550: clouditor.ontology.v1.SecurityFeature.no_authentication:type_name -> clouditor.ontology.v1.NoAuthentication
	103, // 551: clouditor.ontology.v1.SecurityFeature.otp_based_authentication:type_name -> clouditor.ontology.v1.OTPBasedAuthentication
	108, // 552: clouditor.ontology.v1.SecurityFeature.password_based_authentication:type_name -> clouditor.ontology.v1.PasswordBasedAuthentication
	126, // 553: clouditor.ontology.v1.SecurityFeature.single_sign_on:type_name -> clouditor.ontology.v1.SingleSignOn
	0,   // 554: clouditor.ontology.v1.SecurityFeature.abac:type_name -> clouditor.ontology.v1.ABAC
	80,  // 555: clouditor.ontology.v1.SecurityFeature.l3_firewall:type_name -> clouditor.ontology.v1.L3Firewall
	136, // 556: clouditor.ontology.v1.SecurityFeature.web_application_firewall:type_name -> clouditor.ontology.v1.WebApplicationFirewall
	110, // 557: clouditor.ontology.v1.SecurityFeature.rbac:type_name -> clouditor.ontology.v1.RBAC
	14,  // 558: clouditor.ontology.v1.SecurityFeature.backup:type_name -> clouditor.ontology.v1.Backup
	38,  // 559: clouditor.ontology.v1.SecurityFeature.d_do_s_protection:type_name -> clouditor.ontology.v1.DDoSProtection
	61,  // 560: clouditor.ontology.v1.SecurityFeature.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	62,  // 561: clouditor.ontology.v1.SecurityFeature.geo_redundancy:type_name -> clouditor.ontology.v1.GeoRedundancy
	85,  // 562: clouditor.ontology.v1.SecurityFeature.local_redundancy:type_name -> clouditor.ontology.v1.LocalRedundancy
	139, // 563: clouditor.ontology.v1.SecurityFeature.zone_redundancy:type_name -> clouditor.ontology.v1.ZoneRedundancy
	37,  // 564: clouditor.ontology.v1.SecurityFeature.customer_key_encryption:type_name -> clouditor.ontology.v1.CustomerKeyEncryption
	92,  // 565: clouditor.ontology.v1.SecurityFeature.managed_key_encryption:type_name -> clouditor.ontology.v1.ManagedKeyEncryption
	49,  // 566: clouditor.ontology.v1.SecurityFeature.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	129, // 567: clouditor.ontology.v1.SecurityFeature.transport_encryption:type_name -> clouditor.ontology.v1.TransportEncryption
	83,  // 568: clouditor.ontology.v1.SecurityFeature.local_attestation:type_name -> clouditor.ontology.v1.LocalAttestation
	113, // 569: clouditor.ontology.v1.SecurityFeature.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	12,  // 570: clouditor.ontology.v1.SecurityFeature.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	35,  // 571: clouditor.ontology.v1.SecurityFeature.document_checksum:type_name -> clouditor.ontology.v1.DocumentChecksum
	72,  // 572: clouditor.ontology.v1.SecurityFeature.immutability:type_name -> clouditor.ontology.v1.Immutability
	125, // 573: clouditor.ontology.v1.SecurityFeature.document_signature:type_name -> clouditor.ontology.v1.DocumentSignature
	187, // 574: clouditor.ontology.v1.ServiceMetadataDocument.creation_time:type_name -> google.protobuf.Timestamp
	180, // 575: clouditor.ontology.v1.ServiceMetadataDocument.labels:type_name -> clouditor.ontology.v1.ServiceMetadataDocument.LabelsEntry
	35,  // 576: clouditor.ontology.v1.ServiceMetadataDocument.document_checksums:type_name -> clouditor.ontology.v1.DocumentChecksum
	48,  // 577: clouditor.ontology.v1.ServiceMetadataDocument.document_location:type_name -> clouditor.ontology.v1.DocumentLocation
	125, // 578: clouditor.ontology.v1.ServiceMetadataDocument.document_signatures:type_name -> clouditor.ontology.v1.DocumentSignature
	118, // 579: clouditor.ontology.v1.ServiceMetadataDocument.schema_validation:type_name -> clouditor.ontology.v1.SchemaValidation
	123, // 580: clouditor.ontology.v1.ServiceMetadataDocument.security_features:type_name -> clouditor.ontology.v1.SecurityFeature
	51,  // 581: clouditor.ontology.v1.DocumentSignature.errors:type_name -> clouditor.ontology.v1.Error
	16,  // 582: clouditor.ontology.v1.Storage.block_storage:type_name -> clouditor.ontology.v1.BlockStorage
	43,  // 583: clouditor.ontology.v1.Storage.database_storage:type_name -> clouditor.ontology.v1.DatabaseStorage
	52,  // 584: clouditor.ontology.v1.Storage.file_storage:type_name -> clouditor.ontology.v1.FileStorage
	104, // 585: clouditor.ontology.v1.Storage.object_storage:type_name -> clouditor.ontology.v1.ObjectStorage
	47,  // 586: clouditor.ontology.v1.StorageService.document_database_service:type_name -> clouditor.ontology.v1.DocumentDatabaseService
	78,  // 587: clouditor.ontology.v1.StorageService.key_value_database_service:type_name -> clouditor.ontology.v1.KeyValueDatabaseService
	96,  // 588: clouditor.ontology.v1.StorageService.multi_modal_database_service:type_name -> clouditor.ontology.v1.MultiModalDatabaseService
	112, // 589: clouditor.ontology.v1.StorageService.relational_database_service:type_name -> clouditor.ontology.v1.RelationalDatabaseService
	53,  // 590: clouditor.ontology.v1.StorageService.file_storage_service:type_name -> clouditor.ontology.v1.FileStorageService
	106, // 591: clouditor.ontology.v1.StorageService.object_storage_service:type_name -> clouditor.ontology.v1.ObjectStorageService
	21,  // 592: clouditor.ontology.v1.TransportEncryption.cipher_suites:type_name -> clouditor.ontology.v1.CipherSuite
	187, // 593: clouditor.ontology.v1.VMImage.creation_time:type_name -> google.protobuf.Timestamp
	181, // 594: clouditor.ontology.v1.VMImage.labels:type_name -> clouditor.ontology.v1.VMImage.LabelsEntry
	61,  // 595: clouditor.ontology.v1.VMImage.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 596: clouditor.ontology.v1.VMImage.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 597: clouditor.ontology.v1.VMImage.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 598: clouditor.ontology.v1.VirtualMachine.creation_time:type_name -> google.protobuf.Timestamp
	182, // 599: clouditor.ontology.v1.VirtualMachine.labels:type_name -> clouditor.ontology.v1.VirtualMachine.LabelsEntry
	3,   // 600: clouditor.ontology.v1.VirtualMachine.activity_logging:type_name -> clouditor.ontology.v1.ActivityLogging
	12,  // 601: clouditor.ontology.v1.VirtualMachine.automatic_updates:type_name -> clouditor.ontology.v1.AutomaticUpdates
	17,  // 602: clouditor.ontology.v1.VirtualMachine.boot_logging:type_name -> clouditor.ontology.v1.BootLogging
	49,  // 603: clouditor.ontology.v1.VirtualMachine.encryption_in_use:type_name -> clouditor.ontology.v1.EncryptionInUse
	61,  // 604: clouditor.ontology.v1.VirtualMachine.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	91,  // 605: clouditor.ontology.v1.VirtualMachine.malware_protection:type_name -> clouditor.ontology.v1.MalwareProtection
	102, // 606: clouditor.ontology.v1.VirtualMachine.os_logging:type_name -> clouditor.ontology.v1.OSLogging
	111, // 607: clouditor.ontology.v1.VirtualMachine.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	113, // 608: clouditor.ontology.v1.VirtualMachine.remote_attestation:type_name -> clouditor.ontology.v1.RemoteAttestation
	116, // 609: clouditor.ontology.v1.VirtualMachine.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 610: clouditor.ontology.v1.VirtualMachine.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 611: clouditor.ontology.v1.VirtualNetwork.creation_time:type_name -> google.protobuf.Timestamp
	183, // 612: clouditor.ontology.v1.VirtualNetwork.labels:type_name -> clouditor.ontology.v1.VirtualNetwork.LabelsEntry
	61,  // 613: clouditor.ontology.v1.VirtualNetwork.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 614: clouditor.ontology.v1.VirtualNetwork.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 615: clouditor.ontology.v1.VirtualNetwork.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 616: clouditor.ontology.v1.VirtualSubNetwork.creation_time:type_name -> google.protobuf.Timestamp
	184, // 617: clouditor.ontology.v1.VirtualSubNetwork.labels:type_name -> clouditor.ontology.v1.VirtualSubNetwork.LabelsEntry
	61,  // 618: clouditor.ontology.v1.VirtualSubNetwork.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 619: clouditor.ontology.v1.VirtualSubNetwork.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 620: clouditor.ontology.v1.VirtualSubNetwork.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 621: clouditor.ontology.v1.Workflow.creation_time:type_name -> google.protobuf.Timestamp
	185, // 622: clouditor.ontology.v1.Workflow.labels:type_name -> clouditor.ontology.v1.Workflow.LabelsEntry
	61,  // 623: clouditor.ontology.v1.Workflow.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 624: clouditor.ontology.v1.Workflow.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	130, // 625: clouditor.ontology.v1.Workflow.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	187, // 626: clouditor.ontology.v1.MLWorkspace.creation_time:type_name -> google.protobuf.Timestamp
	186, // 627: clouditor.ontology.v1.MLWorkspace.labels:type_name -> clouditor.ontology.v1.MLWorkspace.LabelsEntry
	7,   // 628: clouditor.ontology.v1.MLWorkspace.at_rest_encryption:type_name -> clouditor.ontology.v1.AtRestEncryption
	61,  // 629: clouditor.ontology.v1.MLWorkspace.geo_location:type_name -> clouditor.ontology.v1.GeoLocation
	111, // 630: clouditor.ontology.v1.MLWorkspace.redundancies:type_name -> clouditor.ontology.v1.Redundancy
	116, // 631: clouditor.ontology.v1.MLWorkspace.resource_logging:type_name -> clouditor.ontology.v1.ResourceLogging
	130, // 632: clouditor.ontology.v1.MLWorkspace.usage_statistics:type_name -> clouditor.ontology.v1.UsageStatistics
	61,  // 633: clouditor.ontology.v1.ZoneRedundancy.geo_locations:type_name -> clouditor.ontology.v1.GeoLocation
	189, // 634: clouditor.ontology.v1.resource_type_names:extendee -> google.protobuf.MessageOptions
	635, // [635:635] is the sub-list for method output_type
	635, // [635:635] is the sub-list for method input_type
	635, // [635:635] is the sub-list for extension type_name
	634, // [634:635] is the sub-list for extension extendee
	0,   // [0:634] is the sub-list for field type_name
}

func init() { file_api_ontology_ontology_proto_init() }
func file_api_ontology_ontology_proto_init() {
	if File_api_ontology_ontology_proto != nil {
		return
	}
	file_api_ontology_ontology_proto_msgTypes[1].OneofWrappers = []any{
		(*AccessRestriction_L3Firewall)(nil),
		(*AccessRestriction_WebApplicationFirewall)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[2].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[5].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[7].OneofWrappers = []any{
		(*AtRestEncryption_CustomerKeyEncryption)(nil),
		(*AtRestEncryption_ManagedKeyEncryption)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[8].OneofWrappers = []any{
		(*Attestation_LocalAttestation)(nil),
		(*Attestation_RemoteAttestation)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[9].OneofWrappers = []any{
		(*Auditing_AnomalyDetection)(nil),
		(*Auditing_ActivityLogging)(nil),
		(*Auditing_ApplicationLogging)(nil),
		(*Auditing_BootLogging)(nil),
		(*Auditing_OsLogging)(nil),
		(*Auditing_ResourceLogging)(nil),
		(*Auditing_MalwareProtection)(nil),
		(*Auditing_UsageStatistics)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[10].OneofWrappers = []any{
		(*Authenticity_CertificateBasedAuthentication)(nil),
		(*Authenticity_TokenBasedAuthentication)(nil),
		(*Authenticity_MultiFactorAuthentiation)(nil),
		(*Authenticity_NoAuthentication)(nil),
		(*Authenticity_OtpBasedAuthentication)(nil),
		(*Authenticity_PasswordBasedAuthentication)(nil),
		(*Authenticity_SingleSignOn)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[11].OneofWrappers = []any{
		(*Authorization_Abac)(nil),
		(*Authorization_L3Firewall)(nil),
		(*Authorization_WebApplicationFirewall)(nil),
		(*Authorization_Rbac)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[13].OneofWrappers = []any{
		(*Availability_Backup)(nil),
		(*Availability_DDoSProtection)(nil),
		(*Availability_GeoLocation)(nil),
		(*Availability_GeoRedundancy)(nil),
		(*Availability_LocalRedundancy)(nil),
		(*Availability_ZoneRedundancy)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[14].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[15].OneofWrappers = []any{
		(*Resource_Account)(nil),
		(*Resource_Job)(nil),
		(*Resource_Workflow)(nil),
		(*Resource_CodeRepository)(nil),
		(*Resource_Container)(nil),
		(*Resource_Function)(nil),
		(*Resource_VirtualMachine)(nil),
		(*Resource_ContainerOrchestration)(nil),
		(*Resource_ContainerRegistry)(nil),
		(*Resource_Certificate)(nil),
		(*Resource_Key)(nil),
		(*Resource_Secret)(nil),
		(*Resource_Identity)(nil),
		(*Resource_RoleAssignment)(nil),
		(*Resource_ContainerImage)(nil),
		(*Resource_VmImage)(nil),
		(*Resource_DeviceProvisioningService)(nil),
		(*Resource_MessagingHub)(nil),
		(*Resource_KeyVault)(nil),
		(*Resource_MlWorkspace)(nil),
		(*Resource_NetworkInterface)(nil),
		(*Resource_NetworkSecurityGroup)(nil),
		(*Resource_FunctionService)(nil),
		(*Resource_GenericNetworkService)(nil),
		(*Resource_LoadBalancer)(nil),
		(*Resource_LoggingService)(nil),
		(*Resource_SecurityAdvisoryService)(nil),
		(*Resource_DocumentDatabaseService)(nil),
		(*Resource_KeyValueDatabaseService)(nil),
		(*Resource_MultiModalDatabaseService)(nil),
		(*Resource_RelationalDatabaseService)(nil),
		(*Resource_FileStorageService)(nil),
		(*Resource_ObjectStorageService)(nil),
		(*Resource_VirtualNetwork)(nil),
		(*Resource_VirtualSubNetwork)(nil),
		(*Resource_PasswordPolicy)(nil),
		(*Resource_ResourceGroup)(nil),
		(*Resource_BlockStorage)(nil),
		(*Resource_DatabaseStorage)(nil),
		(*Resource_FileStorage)(nil),
		(*Resource_ObjectStorage)(nil),
		(*Resource_Application)(nil),
		(*Resource_Library)(nil),
		(*Resource_CodeModule)(nil),
		(*Resource_GenericDocument)(nil),
		(*Resource_SecurityAdvisoryDocument)(nil),
		(*Resource_ServiceMetadataDocument)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[16].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[18].OneofWrappers = []any{
		(*CICDService_Job)(nil),
		(*CICDService_Workflow)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[19].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[22].OneofWrappers = []any{
		(*Infrastructure_Account)(nil),
		(*Infrastructure_Job)(nil),
		(*Infrastructure_Workflow)(nil),
		(*Infrastructure_CodeRepository)(nil),
		(*Infrastructure_Container)(nil),
		(*Infrastructure_Function)(nil),
		(*Infrastructure_VirtualMachine)(nil),
		(*Infrastructure_ContainerOrchestration)(nil),
		(*Infrastructure_ContainerRegistry)(nil),
		(*Infrastructure_Certificate)(nil),
		(*Infrastructure_Key)(nil),
		(*Infrastructure_Secret)(nil),
		(*Infrastructure_Identity)(nil),
		(*Infrastructure_RoleAssignment)(nil),
		(*Infrastructure_ContainerImage)(nil),
		(*Infrastructure_VmImage)(nil),
		(*Infrastructure_DeviceProvisioningService)(nil),
		(*Infrastructure_MessagingHub)(nil),
		(*Infrastructure_KeyVault)(nil),
		(*Infrastructure_MlWorkspace)(nil),
		(*Infrastructure_NetworkInterface)(nil),
		(*Infrastructure_NetworkSecurityGroup)(nil),
		(*Infrastructure_FunctionService)(nil),
		(*Infrastructure_GenericNetworkService)(nil),
		(*Infrastructure_LoadBalancer)(nil),
		(*Infrastructure_LoggingService)(nil),
		(*Infrastructure_SecurityAdvisoryService)(nil),
		(*Infrastructure_DocumentDatabaseService)(nil),
		(*Infrastructure_KeyValueDatabaseService)(nil),
		(*Infrastructure_MultiModalDatabaseService)(nil),
		(*Infrastructure_RelationalDatabaseService)(nil),
		(*Infrastructure_FileStorageService)(nil),
		(*Infrastructure_ObjectStorageService)(nil),
		(*Infrastructure_VirtualNetwork)(nil),
		(*Infrastructure_VirtualSubNetwork)(nil),
		(*Infrastructure_PasswordPolicy)(nil),
		(*Infrastructure_ResourceGroup)(nil),
		(*Infrastructure_BlockStorage)(nil),
		(*Infrastructure_DatabaseStorage)(nil),
		(*Infrastructure_FileStorage)(nil),
		(*Infrastructure_ObjectStorage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[24].OneofWrappers = []any{
		(*Code_Application)(nil),
		(*Code_Library)(nil),
		(*Code_CodeModule)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[26].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[27].OneofWrappers = []any{
		(*Component_Application)(nil),
		(*Component_Library)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[28].OneofWrappers = []any{
		(*Compute_Container)(nil),
		(*Compute_Function)(nil),
		(*Compute_VirtualMachine)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[29].OneofWrappers = []any{
		(*Confidentiality_CustomerKeyEncryption)(nil),
		(*Confidentiality_ManagedKeyEncryption)(nil),
		(*Confidentiality_EncryptionInUse)(nil),
		(*Confidentiality_TransportEncryption)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[30].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[31].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[32].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[33].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[34].OneofWrappers = []any{
		(*Credential_Certificate)(nil),
		(*Credential_Key)(nil),
		(*Credential_Secret)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[36].OneofWrappers = []any{
		(*CryptographicOperation_Decryption)(nil),
		(*CryptographicOperation_Encryption)(nil),
		(*CryptographicOperation_CryptographicHash)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[39].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[40].OneofWrappers = []any{
		(*DatabaseOperation_DatabaseConnect)(nil),
		(*DatabaseOperation_DatabaseQuery)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[41].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[42].OneofWrappers = []any{
		(*DatabaseService_DocumentDatabaseService)(nil),
		(*DatabaseService_KeyValueDatabaseService)(nil),
		(*DatabaseService_MultiModalDatabaseService)(nil),
		(*DatabaseService_RelationalDatabaseService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[43].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[45].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[46].OneofWrappers = []any{
		(*Document_GenericDocument)(nil),
		(*Document_SecurityAdvisoryDocument)(nil),
		(*Document_ServiceMetadataDocument)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[47].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[48].OneofWrappers = []any{
		(*DocumentLocation_LocalDocumentLocation)(nil),
		(*DocumentLocation_RemoteDocumentLocation)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[52].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[53].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[54].OneofWrappers = []any{
		(*Firewall_L3Firewall)(nil),
		(*Firewall_WebApplicationFirewall)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[55].OneofWrappers = []any{
		(*Framework_CloudSdk)(nil),
		(*Framework_HttpClientLibrary)(nil),
		(*Framework_HttpServer)(nil),
		(*Framework_Logger)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[56].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[57].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[58].OneofWrappers = []any{
		(*Functionality_CipherSuite)(nil),
		(*Functionality_CodeRegion)(nil),
		(*Functionality_LocalDocumentLocation)(nil),
		(*Functionality_RemoteDocumentLocation)(nil),
		(*Functionality_Error)(nil),
		(*Functionality_HttpEndpoint)(nil),
		(*Functionality_HttpRequestHandler)(nil),
		(*Functionality_Decryption)(nil),
		(*Functionality_Encryption)(nil),
		(*Functionality_CryptographicHash)(nil),
		(*Functionality_DatabaseConnect)(nil),
		(*Functionality_DatabaseQuery)(nil),
		(*Functionality_HttpRequest)(nil),
		(*Functionality_LogOperation)(nil),
		(*Functionality_ObjectStorageRequest)(nil),
		(*Functionality_SchemaValidation)(nil),
		(*Functionality_SecurityAdvisoryFeed)(nil),
		(*Functionality_Vulnerability)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[59].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[60].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[67].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[69].OneofWrappers = []any{
		(*Identifiable_Identity)(nil),
		(*Identifiable_RoleAssignment)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[70].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[71].OneofWrappers = []any{
		(*Image_ContainerImage)(nil),
		(*Image_VmImage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[73].OneofWrappers = []any{
		(*Integrity_LocalAttestation)(nil),
		(*Integrity_RemoteAttestation)(nil),
		(*Integrity_AutomaticUpdates)(nil),
		(*Integrity_DocumentChecksum)(nil),
		(*Integrity_Immutability)(nil),
		(*Integrity_DocumentSignature)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[74].OneofWrappers = []any{
		(*IoT_DeviceProvisioningService)(nil),
		(*IoT_MessagingHub)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[75].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[77].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[78].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[79].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[81].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[82].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[88].OneofWrappers = []any{
		(*Logging_ActivityLogging)(nil),
		(*Logging_ApplicationLogging)(nil),
		(*Logging_BootLogging)(nil),
		(*Logging_OsLogging)(nil),
		(*Logging_ResourceLogging)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[89].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[90].OneofWrappers = []any{
		(*MachineLearning_MlWorkspace)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[93].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[94].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[96].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[97].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[98].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[99].OneofWrappers = []any{
		(*NetworkService_FunctionService)(nil),
		(*NetworkService_GenericNetworkService)(nil),
		(*NetworkService_LoadBalancer)(nil),
		(*NetworkService_LoggingService)(nil),
		(*NetworkService_SecurityAdvisoryService)(nil),
		(*NetworkService_DocumentDatabaseService)(nil),
		(*NetworkService_KeyValueDatabaseService)(nil),
		(*NetworkService_MultiModalDatabaseService)(nil),
		(*NetworkService_RelationalDatabaseService)(nil),
		(*NetworkService_FileStorageService)(nil),
		(*NetworkService_ObjectStorageService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[100].OneofWrappers = []any{
		(*Networking_NetworkInterface)(nil),
		(*Networking_NetworkSecurityGroup)(nil),
		(*Networking_FunctionService)(nil),
		(*Networking_GenericNetworkService)(nil),
		(*Networking_LoadBalancer)(nil),
		(*Networking_LoggingService)(nil),
		(*Networking_SecurityAdvisoryService)(nil),
		(*Networking_DocumentDatabaseService)(nil),
		(*Networking_KeyValueDatabaseService)(nil),
		(*Networking_MultiModalDatabaseService)(nil),
		(*Networking_RelationalDatabaseService)(nil),
		(*Networking_FileStorageService)(nil),
		(*Networking_ObjectStorageService)(nil),
		(*Networking_VirtualNetwork)(nil),
		(*Networking_VirtualSubNetwork)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[104].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[106].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[107].OneofWrappers = []any{
		(*Operation_Decryption)(nil),
		(*Operation_Encryption)(nil),
		(*Operation_CryptographicHash)(nil),
		(*Operation_DatabaseConnect)(nil),
		(*Operation_DatabaseQuery)(nil),
		(*Operation_HttpRequest)(nil),
		(*Operation_LogOperation)(nil),
		(*Operation_ObjectStorageRequest)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[109].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[111].OneofWrappers = []any{
		(*Redundancy_GeoRedundancy)(nil),
		(*Redundancy_LocalRedundancy)(nil),
		(*Redundancy_ZoneRedundancy)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[112].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[115].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[117].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[119].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[120].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[122].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[123].OneofWrappers = []any{
		(*SecurityFeature_AnomalyDetection)(nil),
		(*SecurityFeature_ActivityLogging)(nil),
		(*SecurityFeature_ApplicationLogging)(nil),
		(*SecurityFeature_BootLogging)(nil),
		(*SecurityFeature_OsLogging)(nil),
		(*SecurityFeature_ResourceLogging)(nil),
		(*SecurityFeature_MalwareProtection)(nil),
		(*SecurityFeature_UsageStatistics)(nil),
		(*SecurityFeature_CertificateBasedAuthentication)(nil),
		(*SecurityFeature_TokenBasedAuthentication)(nil),
		(*SecurityFeature_MultiFactorAuthentiation)(nil),
		(*SecurityFeature_NoAuthentication)(nil),
		(*SecurityFeature_OtpBasedAuthentication)(nil),
		(*SecurityFeature_PasswordBasedAuthentication)(nil),
		(*SecurityFeature_SingleSignOn)(nil),
		(*SecurityFeature_Abac)(nil),
		(*SecurityFeature_L3Firewall)(nil),
		(*SecurityFeature_WebApplicationFirewall)(nil),
		(*SecurityFeature_Rbac)(nil),
		(*SecurityFeature_Backup)(nil),
		(*SecurityFeature_DDoSProtection)(nil),
		(*SecurityFeature_GeoLocation)(nil),
		(*SecurityFeature_GeoRedundancy)(nil),
		(*SecurityFeature_LocalRedundancy)(nil),
		(*SecurityFeature_ZoneRedundancy)(nil),
		(*SecurityFeature_CustomerKeyEncryption)(nil),
		(*SecurityFeature_ManagedKeyEncryption)(nil),
		(*SecurityFeature_EncryptionInUse)(nil),
		(*SecurityFeature_TransportEncryption)(nil),
		(*SecurityFeature_LocalAttestation)(nil),
		(*SecurityFeature_RemoteAttestation)(nil),
		(*SecurityFeature_AutomaticUpdates)(nil),
		(*SecurityFeature_DocumentChecksum)(nil),
		(*SecurityFeature_Immutability)(nil),
		(*SecurityFeature_DocumentSignature)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[124].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[127].OneofWrappers = []any{
		(*Storage_BlockStorage)(nil),
		(*Storage_DatabaseStorage)(nil),
		(*Storage_FileStorage)(nil),
		(*Storage_ObjectStorage)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[128].OneofWrappers = []any{
		(*StorageService_DocumentDatabaseService)(nil),
		(*StorageService_KeyValueDatabaseService)(nil),
		(*StorageService_MultiModalDatabaseService)(nil),
		(*StorageService_RelationalDatabaseService)(nil),
		(*StorageService_FileStorageService)(nil),
		(*StorageService_ObjectStorageService)(nil),
	}
	file_api_ontology_ontology_proto_msgTypes[131].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[132].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[133].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[134].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[137].OneofWrappers = []any{}
	file_api_ontology_ontology_proto_msgTypes[138].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_ontology_ontology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   187,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_api_ontology_ontology_proto_goTypes,
		DependencyIndexes: file_api_ontology_ontology_proto_depIdxs,
		MessageInfos:      file_api_ontology_ontology_proto_msgTypes,
		ExtensionInfos:    file_api_ontology_ontology_proto_extTypes,
	}.Build()
	File_api_ontology_ontology_proto = out.File
	file_api_ontology_ontology_proto_rawDesc = nil
	file_api_ontology_ontology_proto_goTypes = nil
	file_api_ontology_ontology_proto_depIdxs = nil
}
