// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/ontology/service.proto

package ontology

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OntologyService_Noop_FullMethodName = "/clouditor.ontology.v1.OntologyService/Noop"
)

// OntologyServiceClient is the client API for OntologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// This service is a no-op, and is only necessary in order to generate the OpenAPI definitions for our ontology objects. It MUST not be implemented.
type OntologyServiceClient interface {
	Noop(ctx context.Context, in *NoopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type ontologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOntologyServiceClient(cc grpc.ClientConnInterface) OntologyServiceClient {
	return &ontologyServiceClient{cc}
}

func (c *ontologyServiceClient) Noop(ctx context.Context, in *NoopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OntologyService_Noop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OntologyServiceServer is the server API for OntologyService service.
// All implementations must embed UnimplementedOntologyServiceServer
// for forward compatibility.
//
// This service is a no-op, and is only necessary in order to generate the OpenAPI definitions for our ontology objects. It MUST not be implemented.
type OntologyServiceServer interface {
	Noop(context.Context, *NoopRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOntologyServiceServer()
}

// UnimplementedOntologyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOntologyServiceServer struct{}

func (UnimplementedOntologyServiceServer) Noop(context.Context, *NoopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Noop not implemented")
}
func (UnimplementedOntologyServiceServer) mustEmbedUnimplementedOntologyServiceServer() {}
func (UnimplementedOntologyServiceServer) testEmbeddedByValue()                         {}

// UnsafeOntologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OntologyServiceServer will
// result in compilation errors.
type UnsafeOntologyServiceServer interface {
	mustEmbedUnimplementedOntologyServiceServer()
}

func RegisterOntologyServiceServer(s grpc.ServiceRegistrar, srv OntologyServiceServer) {
	// If the following call pancis, it indicates UnimplementedOntologyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OntologyService_ServiceDesc, srv)
}

func _OntologyService_Noop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).Noop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OntologyService_Noop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).Noop(ctx, req.(*NoopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OntologyService_ServiceDesc is the grpc.ServiceDesc for OntologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OntologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouditor.ontology.v1.OntologyService",
	HandlerType: (*OntologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Noop",
			Handler:    _OntologyService_Noop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ontology/service.proto",
}
