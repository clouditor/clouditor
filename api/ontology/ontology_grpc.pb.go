// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/ontology/ontology.proto

package ontology

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OntologyServiceClient is the client API for OntologyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OntologyServiceClient interface {
	// List Ontology objects
	ListOntologyObjects(ctx context.Context, in *ListOntologyObjectsRequest, opts ...grpc.CallOption) (*ListOntologyObjectsResponse, error)
}

type ontologyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOntologyServiceClient(cc grpc.ClientConnInterface) OntologyServiceClient {
	return &ontologyServiceClient{cc}
}

func (c *ontologyServiceClient) ListOntologyObjects(ctx context.Context, in *ListOntologyObjectsRequest, opts ...grpc.CallOption) (*ListOntologyObjectsResponse, error) {
	out := new(ListOntologyObjectsResponse)
	err := c.cc.Invoke(ctx, "/clouditor.ontology.v1.OntologyService/ListOntologyObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OntologyServiceServer is the server API for OntologyService service.
// All implementations must embed UnimplementedOntologyServiceServer
// for forward compatibility
type OntologyServiceServer interface {
	// List Ontology objects
	ListOntologyObjects(context.Context, *ListOntologyObjectsRequest) (*ListOntologyObjectsResponse, error)
	mustEmbedUnimplementedOntologyServiceServer()
}

// UnimplementedOntologyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOntologyServiceServer struct {
}

func (UnimplementedOntologyServiceServer) ListOntologyObjects(context.Context, *ListOntologyObjectsRequest) (*ListOntologyObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOntologyObjects not implemented")
}
func (UnimplementedOntologyServiceServer) mustEmbedUnimplementedOntologyServiceServer() {}

// UnsafeOntologyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OntologyServiceServer will
// result in compilation errors.
type UnsafeOntologyServiceServer interface {
	mustEmbedUnimplementedOntologyServiceServer()
}

func RegisterOntologyServiceServer(s grpc.ServiceRegistrar, srv OntologyServiceServer) {
	s.RegisterService(&OntologyService_ServiceDesc, srv)
}

func _OntologyService_ListOntologyObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOntologyObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OntologyServiceServer).ListOntologyObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouditor.ontology.v1.OntologyService/ListOntologyObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OntologyServiceServer).ListOntologyObjects(ctx, req.(*ListOntologyObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OntologyService_ServiceDesc is the grpc.ServiceDesc for OntologyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OntologyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clouditor.ontology.v1.OntologyService",
	HandlerType: (*OntologyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOntologyObjects",
			Handler:    _OntologyService_ListOntologyObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ontology/ontology.proto",
}
