// Auto-generated code by owl2proto (https://github.com/oxisto/owl2proto)

// Copyright 2024 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

syntax = "proto3";

package clouditor.ontology.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "tagger/tagger.proto";

option go_package = "clouditor.io/clouditor/api/ontology";
extend google.protobuf.MessageOptions {
  repeated string resource_type_names = 50000;
}

// ABAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ABAC {
  option (resource_type_names) = "ABAC";
  option (resource_type_names) = "Authorization";
  option (resource_type_names) = "SecurityFeature";
}

// AccessRestriction is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message AccessRestriction {
  oneof type {
    L3Firewall l3_firewall = 1;
    WebApplicationFirewall web_application_firewall = 2;
  }
}

// Account is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This represents the cloud account as a whole, e.g., an Azure subscription.
message Account {
  option (resource_type_names) = "Account";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// ActivityLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ActivityLogging {
  option (resource_type_names) = "ActivityLogging";
  option (resource_type_names) = "Logging";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool monitoring_enabled = 2;
  google.protobuf.Duration retention_period = 3;
  bool security_alerts_enabled = 4;
  repeated string logging_service_ids = 5;
}

// AnomalyDetection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// Analyzes the activity of a NetworkService (which includes DatabaseServices).
// Scope contains the resource ID of the protected resource.
message AnomalyDetection {
  option (resource_type_names) = "AnomalyDetection";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  string scope = 2;
  ApplicationLogging application_logging = 3;
}

// Application is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This encapsulates the whole (source) code of an application.
message Application {
  option (resource_type_names) = "Application";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  string programming_language = 5;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  repeated string translation_units = 7;
  optional string compute_id = 8;
  repeated Functionality functionalities = 9;
  optional string parent_id = 10;
}

// ApplicationLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ApplicationLogging {
  option (resource_type_names) = "ApplicationLogging";
  option (resource_type_names) = "Logging";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool monitoring_enabled = 2;
  google.protobuf.Duration retention_period = 3;
  bool security_alerts_enabled = 4;
  repeated string logging_service_ids = 5;
}

// AtRestEncryption is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message AtRestEncryption {
  oneof type {
    CustomerKeyEncryption customer_key_encryption = 1;
    ManagedKeyEncryption managed_key_encryption = 2;
  }
}

// Auditing is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Auditing {
  oneof type {
    AnomalyDetection anomaly_detection = 1;
    ActivityLogging activity_logging = 2;
    ApplicationLogging application_logging = 3;
    BootLogging boot_logging = 4;
    OSLogging os_logging = 5;
    ResourceLogging resource_logging = 6;
    MalwareProtection malware_protection = 7;
  }
}

// Authenticity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Authenticity {
  oneof type {
    CertificateBasedAuthentication certificate_based_authentication = 1;
    TokenBasedAuthentication token_based_authentication = 2;
    MultiFactorAuthentiation multi_factor_authentiation = 3;
    NoAuthentication no_authentication = 4;
    OTPBasedAuthentication otp_based_authentication = 5;
    PasswordBasedAuthentication password_based_authentication = 6;
    SingleSignOn single_sign_on = 7;
  }
}

// Authorization is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Authorization {
  oneof type {
    ABAC abac = 1;
    L3Firewall l3_firewall = 2;
    WebApplicationFirewall web_application_firewall = 3;
    RBAC rbac = 4;
  }
}

// AutomaticUpdates is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This feature is, e.g., available on some VM services to automatically update their software. It ensures that a resource is protected from tampering with its state.
message AutomaticUpdates {
  option (resource_type_names) = "AutomaticUpdates";
  option (resource_type_names) = "Integrity";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  // The interval refers to the update interval in days.
  google.protobuf.Duration interval = 2;
  bool security_only = 3;
}

// Availability is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Availability {
  oneof type {
    Backup backup = 1;
    DDoSProtection d_do_s_protection = 2;
    GeoLocation geo_location = 3;
    Redundancy redundancy = 4;
  }
}

// Backup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// RetentionPeriod in hours
message Backup {
  option (resource_type_names) = "Backup";
  option (resource_type_names) = "Availability";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  // The interval refers to the update interval in days.
  google.protobuf.Duration interval = 2;
  google.protobuf.Duration retention_period = 3;
  optional string storage_id = 4;
  TransportEncryption transport_encryption = 5;
}

// Resource is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Resource {
  oneof type {
    Application application = 1;
    Account account = 2;
    Job job = 3;
    Workflow workflow = 4;
    Container container = 5;
    Function function = 6;
    VirtualMachine virtual_machine = 7;
    WebApp web_app = 8;
    ContainerOrchestration container_orchestration = 9;
    ContainerRegistry container_registry = 10;
    Identity identity = 11;
    RoleAssignment role_assignment = 12;
    ContainerImage container_image = 13;
    VMImage vm_image = 14;
    DeviceProvisioningService device_provisioning_service = 15;
    MessagingHub messaging_hub = 16;
    Key key = 17;
    KeyVault key_vault = 18;
    NetworkInterface network_interface = 19;
    NetworkSecurityGroup network_security_group = 20;
    GenericNetworkService generic_network_service = 21;
    LoadBalancer load_balancer = 22;
    LoggingService logging_service = 23;
    DocumentDatabaseService document_database_service = 24;
    KeyValueDatabaseService key_value_database_service = 25;
    MultiModalDatabaseService multi_modal_database_service = 26;
    RelationalDatabaseService relational_database_service = 27;
    FileStorageService file_storage_service = 28;
    ObjectStorageService object_storage_service = 29;
    VirtualNetwork virtual_network = 30;
    VirtualSubNetwork virtual_sub_network = 31;
    PasswordPolicy password_policy = 32;
    ResourceGroup resource_group = 33;
    BlockStorage block_storage = 34;
    DatabaseStorage database_storage = 35;
    FileStorage file_storage = 36;
    ObjectStorage object_storage = 37;
    Document document = 38;
  }
}

// BlockStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message BlockStorage {
  option (resource_type_names) = "BlockStorage";
  option (resource_type_names) = "Storage";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  AtRestEncryption at_rest_encryption = 6;
  repeated Backup backups = 7;
  GeoLocation geo_location = 8;
  Immutability immutability = 9;
  Redundancy redundancy = 10;
  optional string parent_id = 11;
  ResourceLogging resource_logging = 12;
}

// BootLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message BootLogging {
  option (resource_type_names) = "BootLogging";
  option (resource_type_names) = "Logging";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool monitoring_enabled = 2;
  google.protobuf.Duration retention_period = 3;
  bool security_alerts_enabled = 4;
  repeated string logging_service_ids = 5;
}

// CICDService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message CICDService {
  oneof type {
    Job job = 1;
    Workflow workflow = 2;
  }
}

// CertificateBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message CertificateBasedAuthentication {
  option (resource_type_names) = "CertificateBasedAuthentication";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool context_is_checked = 1;
  bool enabled = 2;
}

// CipherSuite is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message CipherSuite {
  option (resource_type_names) = "CipherSuite";
  option (resource_type_names) = "Functionality";

  // for example: RSA, ECDSA
  string authentication_mechanism = 1;
  string key_exchange_algorithm = 2;
  // naming schema: SHA-256
  string mac_algorithm = 3;
  // naming schema: AES-128-GCM
  string session_cipher = 4;
}

// CloudResource is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message CloudResource {
  oneof type {
    Account account = 1;
    Job job = 2;
    Workflow workflow = 3;
    Container container = 4;
    Function function = 5;
    VirtualMachine virtual_machine = 6;
    WebApp web_app = 7;
    ContainerOrchestration container_orchestration = 8;
    ContainerRegistry container_registry = 9;
    Identity identity = 10;
    RoleAssignment role_assignment = 11;
    ContainerImage container_image = 12;
    VMImage vm_image = 13;
    DeviceProvisioningService device_provisioning_service = 14;
    MessagingHub messaging_hub = 15;
    Key key = 16;
    KeyVault key_vault = 17;
    NetworkInterface network_interface = 18;
    NetworkSecurityGroup network_security_group = 19;
    GenericNetworkService generic_network_service = 20;
    LoadBalancer load_balancer = 21;
    LoggingService logging_service = 22;
    DocumentDatabaseService document_database_service = 23;
    KeyValueDatabaseService key_value_database_service = 24;
    MultiModalDatabaseService multi_modal_database_service = 25;
    RelationalDatabaseService relational_database_service = 26;
    FileStorageService file_storage_service = 27;
    ObjectStorageService object_storage_service = 28;
    VirtualNetwork virtual_network = 29;
    VirtualSubNetwork virtual_sub_network = 30;
    PasswordPolicy password_policy = 31;
    ResourceGroup resource_group = 32;
    BlockStorage block_storage = 33;
    DatabaseStorage database_storage = 34;
    FileStorage file_storage = 35;
    ObjectStorage object_storage = 36;
  }
}

// CloudSDK is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message CloudSDK {
  option (resource_type_names) = "CloudSDK";
  option (resource_type_names) = "Framework";
}

// Compute is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Compute {
  oneof type {
    Container container = 1;
    Function function = 2;
    VirtualMachine virtual_machine = 3;
    WebApp web_app = 4;
  }
}

// Confidentiality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Confidentiality {
  oneof type {
    CustomerKeyEncryption customer_key_encryption = 1;
    ManagedKeyEncryption managed_key_encryption = 2;
    EncryptionInUse encryption_in_use = 3;
    TransportEncryption transport_encryption = 4;
  }
}

// Container is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Container {
  option (resource_type_names) = "Container";
  option (resource_type_names) = "Compute";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  EncryptionInUse encryption_in_use = 6;
  GeoLocation geo_location = 7;
  optional string image_id = 8;
  repeated string network_interface_ids = 9;
  optional string parent_id = 10;
  ResourceLogging resource_logging = 11;
}

// ContainerImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ContainerImage {
  option (resource_type_names) = "ContainerImage";
  option (resource_type_names) = "Image";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  optional string application_id = 6;
  GeoLocation geo_location = 7;
  optional string parent_id = 8;
}

// ContainerOrchestration is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ContainerOrchestration {
  option (resource_type_names) = "ContainerOrchestration";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string management_url = 4;
  string name = 5 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  repeated string container_ids = 7;
  GeoLocation geo_location = 8;
  optional string parent_id = 9;
  ResourceLogging resource_logging = 10;
}

// ContainerRegistry is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ContainerRegistry {
  option (resource_type_names) = "ContainerRegistry";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// CustomerKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message CustomerKeyEncryption {
  option (resource_type_names) = "CustomerKeyEncryption";
  option (resource_type_names) = "AtRestEncryption";
  option (resource_type_names) = "Confidentiality";
  option (resource_type_names) = "SecurityFeature";

  string algorithm = 1;
  bool enabled = 2;
  string key_url = 3;
}

// DDoSProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message DDoSProtection {
  option (resource_type_names) = "DDoSProtection";
  option (resource_type_names) = "Availability";
  option (resource_type_names) = "SecurityFeature";
}

// DatabaseConnect is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message DatabaseConnect {
  option (resource_type_names) = "DatabaseConnect";
  option (resource_type_names) = "DatabaseOperation";
  option (resource_type_names) = "Operation";
  option (resource_type_names) = "Functionality";

  repeated string calls = 1;
  repeated string database_service_ids = 2;
  optional string database_storage_id = 3;
}

// DatabaseOperation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message DatabaseOperation {
  oneof type {
    DatabaseConnect database_connect = 1;
    DatabaseQuery database_query = 2;
  }
}

// DatabaseQuery is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message DatabaseQuery {
  option (resource_type_names) = "DatabaseQuery";
  option (resource_type_names) = "DatabaseOperation";
  option (resource_type_names) = "Operation";
  option (resource_type_names) = "Functionality";

  repeated string calls = 1;
  bool modify = 2;
  repeated string database_service_ids = 3;
  optional string database_storage_id = 4;
}

// DatabaseService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This class represents a database service. For example, a postgres SQL server would be modelled as a database service (with a host and IP) and the individual tables or collections would be modelled as a DatabaseStorage entity.
message DatabaseService {
  oneof type {
    DocumentDatabaseService document_database_service = 1;
    KeyValueDatabaseService key_value_database_service = 2;
    MultiModalDatabaseService multi_modal_database_service = 3;
    RelationalDatabaseService relational_database_service = 4;
  }
}

// DatabaseStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// describes the actual database or a table in a database
message DatabaseStorage {
  option (resource_type_names) = "DatabaseStorage";
  option (resource_type_names) = "Storage";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  AtRestEncryption at_rest_encryption = 6;
  repeated Backup backups = 7;
  GeoLocation geo_location = 8;
  Immutability immutability = 9;
  Redundancy redundancy = 10;
  optional string parent_id = 11;
  ResourceLogging resource_logging = 12;
}

// DeviceProvisioningService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message DeviceProvisioningService {
  option (resource_type_names) = "DeviceProvisioningService";
  option (resource_type_names) = "IoT";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// Document is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Document {
  option (resource_type_names) = "Document";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string filename = 2;
  string id = 3 [(buf.validate.field).required = true];
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  optional string parent_id = 7;
  repeated SecurityFeature security_features = 8;
}

// DocumentDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message DocumentDatabaseService {
  option (resource_type_names) = "DocumentDatabaseService";
  option (resource_type_names) = "DatabaseService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  repeated AnomalyDetection anomaly_detections = 8;
  Authenticity authenticity = 9;
  optional string compute_id = 10;
  GeoLocation geo_location = 11;
  HttpEndpoint http_endpoint = 12;
  MalwareProtection malware_protection = 13;
  optional string parent_id = 14;
  repeated string storage_ids = 15;
  TransportEncryption transport_encryption = 16;
}

// EncryptionInUse is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message EncryptionInUse {
  option (resource_type_names) = "EncryptionInUse";
  option (resource_type_names) = "Confidentiality";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
}

// FileStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message FileStorage {
  option (resource_type_names) = "FileStorage";
  option (resource_type_names) = "Storage";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  bool public_access = 5;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  AtRestEncryption at_rest_encryption = 7;
  repeated Backup backups = 8;
  GeoLocation geo_location = 9;
  Immutability immutability = 10;
  Redundancy redundancy = 11;
  optional string parent_id = 12;
  ResourceLogging resource_logging = 13;
}

// FileStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An file storage service represents the network service that is used to access a list of file storage shares. The storage itself is modelled as a FileStorage. The service has an http endpoint.
message FileStorageService {
  option (resource_type_names) = "FileStorageService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  Authenticity authenticity = 8;
  optional string compute_id = 9;
  GeoLocation geo_location = 10;
  HttpEndpoint http_endpoint = 11;
  optional string parent_id = 12;
  repeated string storage_ids = 13;
  TransportEncryption transport_encryption = 14;
}

// Firewall is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Firewall {
  oneof type {
    L3Firewall l3_firewall = 1;
    WebApplicationFirewall web_application_firewall = 2;
  }
}

// Framework is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Framework {
  oneof type {
    CloudSDK cloud_sdk = 1;
    HttpClientLibrary http_client_library = 2;
    HttpServer http_server = 3;
    Logger logger = 4;
  }
}

// Function is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Function {
  option (resource_type_names) = "Function";
  option (resource_type_names) = "Compute";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  string runtime_language = 6;
  string runtime_version = 7;
  EncryptionInUse encryption_in_use = 8;
  GeoLocation geo_location = 9;
  repeated string network_interface_ids = 10;
  optional string parent_id = 11;
  ResourceLogging resource_logging = 12;
}

// Functionality is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Functionality {
  oneof type {
    CipherSuite cipher_suite = 1;
    HttpEndpoint http_endpoint = 2;
    HttpRequestHandler http_request_handler = 3;
    DatabaseConnect database_connect = 4;
    DatabaseQuery database_query = 5;
    HttpRequest http_request = 6;
    LogOperation log_operation = 7;
    ObjectStorageRequest object_storage_request = 8;
  }
}

// GenericNetworkService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A generic network service.
message GenericNetworkService {
  option (resource_type_names) = "GenericNetworkService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  Authenticity authenticity = 8;
  optional string compute_id = 9;
  GeoLocation geo_location = 10;
  optional string parent_id = 11;
  TransportEncryption transport_encryption = 12;
}

// GeoLocation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message GeoLocation {
  option (resource_type_names) = "GeoLocation";
  option (resource_type_names) = "Availability";
  option (resource_type_names) = "SecurityFeature";

  string region = 1;
}

// HttpClientLibrary is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message HttpClientLibrary {
  option (resource_type_names) = "HttpClientLibrary";
  option (resource_type_names) = "Framework";
}

// HttpEndpoint is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An HTTP endpoint can set the "proxyTarget" property, in case that is routed through a (reverse) proxy, e.g. a load balancer.
// Via the Authenticity relationship, the access type can be specified, e.g. public access (no authentication), password-based, etc.
message HttpEndpoint {
  option (resource_type_names) = "HttpEndpoint";
  option (resource_type_names) = "Functionality";

  string handler = 1;
  string method = 2;
  string path = 3;
  string url = 4;
  Authenticity authenticity = 5;
  TransportEncryption transport_encryption = 7;
}

// HttpRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message HttpRequest {
  option (resource_type_names) = "HttpRequest";
  option (resource_type_names) = "Operation";
  option (resource_type_names) = "Functionality";

  string call = 1;
  string req_body = 2;
  repeated HttpEndpoint http_endpoints = 3;
}

// HttpRequestHandler is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message HttpRequestHandler {
  option (resource_type_names) = "HttpRequestHandler";
  option (resource_type_names) = "Functionality";

  string path = 1;
  optional string application_id = 2;
  repeated HttpEndpoint http_endpoints = 3;
}

// HttpServer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message HttpServer {
  option (resource_type_names) = "HttpServer";
  option (resource_type_names) = "Framework";

  HttpRequestHandler http_request_handler = 1;
}

// Identifiable is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Identifiable {
  oneof type {
    Identity identity = 1;
    RoleAssignment role_assignment = 2;
  }
}

// Identity is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Identity {
  option (resource_type_names) = "Identity";
  option (resource_type_names) = "Identifiable";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  bool activated = 1;
  google.protobuf.Timestamp creation_time = 2;
  bool disable_password_policy = 3;
  bool enforce_mfa = 4;
  string id = 5 [(buf.validate.field).required = true];
  map<string, string> labels = 6;
  google.protobuf.Timestamp last_activity = 7;
  bool login_defender_enabled = 8;
  string name = 9 [(buf.validate.field).required = true];
  bool privileged = 10;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 11;
  Authenticity authenticity = 12;
  Authorization authorization = 13;
  GeoLocation geo_location = 14;
  optional string parent_id = 15;
}

// Image is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Image {
  oneof type {
    ContainerImage container_image = 1;
    VMImage vm_image = 2;
  }
}

// Immutability is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Immutability {
  option (resource_type_names) = "Immutability";
  option (resource_type_names) = "Integrity";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
}

// Integrity is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Integrity {
  oneof type {
    AutomaticUpdates automatic_updates = 1;
    Immutability immutability = 2;
  }
}

// IoT is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message IoT {
  oneof type {
    DeviceProvisioningService device_provisioning_service = 1;
    MessagingHub messaging_hub = 2;
  }
}

// Job is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Job {
  option (resource_type_names) = "Job";
  option (resource_type_names) = "CICDService";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// TokenBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message TokenBasedAuthentication {
  option (resource_type_names) = "TokenBasedAuthentication";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool context_is_checked = 1;
  bool enabled = 2;
  bool enforced = 3;
}

// Key is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Key {
  option (resource_type_names) = "Key";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  bool enabled = 2;
  google.protobuf.Timestamp expiration_date = 3;
  string id = 4 [(buf.validate.field).required = true];
  bool is_managed = 5;
  map<string, string> labels = 6;
  int32 length = 7;
  string name = 8 [(buf.validate.field).required = true];
  int32 number_of_usages = 9;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 10;
  GeoLocation geo_location = 11;
  optional string parent_id = 12;
}

// KeyValueDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message KeyValueDatabaseService {
  option (resource_type_names) = "KeyValueDatabaseService";
  option (resource_type_names) = "DatabaseService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  repeated AnomalyDetection anomaly_detections = 8;
  Authenticity authenticity = 9;
  optional string compute_id = 10;
  GeoLocation geo_location = 11;
  HttpEndpoint http_endpoint = 12;
  MalwareProtection malware_protection = 13;
  optional string parent_id = 14;
  repeated string storage_ids = 15;
  TransportEncryption transport_encryption = 16;
}

// KeyVault is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message KeyVault {
  option (resource_type_names) = "KeyVault";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  bool is_active = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  GeoLocation geo_location = 7;
  repeated string key_ids = 8;
  optional string parent_id = 9;
}

// L3Firewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message L3Firewall {
  option (resource_type_names) = "L3Firewall";
  option (resource_type_names) = "Firewall";
  option (resource_type_names) = "AccessRestriction";
  option (resource_type_names) = "Authorization";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool inbound = 2;
  string restricted_ports = 3;
}

// LoadBalancer is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A Load Balancer may have multiple access restriction features, e.g. a L3 firewall and a WAF
message LoadBalancer {
  option (resource_type_names) = "LoadBalancer";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  string url = 8;
  AccessRestriction access_restriction = 9;
  Authenticity authenticity = 10;
  optional string compute_id = 11;
  GeoLocation geo_location = 12;
  repeated HttpEndpoint http_endpoints = 13;
  repeated string network_service_ids = 14;
  optional string parent_id = 15;
  TransportEncryption transport_encryption = 16;
}

// LogOperation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A LogOperation is used by an application
message LogOperation {
  option (resource_type_names) = "LogOperation";
  option (resource_type_names) = "Operation";
  option (resource_type_names) = "Functionality";

  string call = 1;
  string value = 2;
  Logging logging = 3;
}

// Logger is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Logger {
  option (resource_type_names) = "Logger";
  option (resource_type_names) = "Framework";
}

// Logging is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Logging {
  oneof type {
    ActivityLogging activity_logging = 1;
    ApplicationLogging application_logging = 2;
    BootLogging boot_logging = 3;
    OSLogging os_logging = 4;
    ResourceLogging resource_logging = 5;
  }
}

// LoggingService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A logging-as-a-service offering, e.g. for analyzing logs; has a Storage resource that stores the logs
message LoggingService {
  option (resource_type_names) = "LoggingService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  Authenticity authenticity = 8;
  optional string compute_id = 9;
  GeoLocation geo_location = 10;
  optional string parent_id = 11;
  repeated string storage_ids = 12;
  TransportEncryption transport_encryption = 13;
}

// MalwareProtection is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// analyzes the activity within a Compute resource
message MalwareProtection {
  option (resource_type_names) = "MalwareProtection";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  google.protobuf.Duration days_since_active = 1;
  bool enabled = 2;
  int32 number_of_threats_found = 3;
  ApplicationLogging application_logging = 4;
}

// ManagedKeyEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ManagedKeyEncryption {
  option (resource_type_names) = "ManagedKeyEncryption";
  option (resource_type_names) = "AtRestEncryption";
  option (resource_type_names) = "Confidentiality";
  option (resource_type_names) = "SecurityFeature";

  string algorithm = 1;
  bool enabled = 2;
  string key_url = 3;
}

// MessagingHub is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message MessagingHub {
  option (resource_type_names) = "MessagingHub";
  option (resource_type_names) = "IoT";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// MultiFactorAuthentiation is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message MultiFactorAuthentiation {
  option (resource_type_names) = "MultiFactorAuthentiation";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool context_is_checked = 1;
  repeated Authenticity authenticities = 2;
}

// MultiModalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// This class represents a database service that identifies itself as "multi-model", e.g., offers document storage as well as relational features.
message MultiModalDatabaseService {
  option (resource_type_names) = "MultiModalDatabaseService";
  option (resource_type_names) = "DatabaseService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  repeated AnomalyDetection anomaly_detections = 8;
  Authenticity authenticity = 9;
  optional string compute_id = 10;
  GeoLocation geo_location = 11;
  HttpEndpoint http_endpoint = 12;
  MalwareProtection malware_protection = 13;
  optional string parent_id = 14;
  repeated string storage_ids = 15;
  TransportEncryption transport_encryption = 16;
}

// NetworkInterface is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message NetworkInterface {
  option (resource_type_names) = "NetworkInterface";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  AccessRestriction access_restriction = 6;
  GeoLocation geo_location = 7;
  optional string network_service_id = 8;
  optional string parent_id = 9;
}

// NetworkSecurityGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message NetworkSecurityGroup {
  option (resource_type_names) = "NetworkSecurityGroup";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// NetworkService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// A NetworkService is an application (on the network layer) running on a Compute resource. It provides access to a resource
message NetworkService {
  oneof type {
    GenericNetworkService generic_network_service = 1;
    LoadBalancer load_balancer = 2;
    LoggingService logging_service = 3;
    DocumentDatabaseService document_database_service = 4;
    KeyValueDatabaseService key_value_database_service = 5;
    MultiModalDatabaseService multi_modal_database_service = 6;
    RelationalDatabaseService relational_database_service = 7;
    FileStorageService file_storage_service = 8;
    ObjectStorageService object_storage_service = 9;
  }
}

// Networking is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Networking {
  oneof type {
    NetworkInterface network_interface = 1;
    NetworkSecurityGroup network_security_group = 2;
    GenericNetworkService generic_network_service = 3;
    LoadBalancer load_balancer = 4;
    LoggingService logging_service = 5;
    DocumentDatabaseService document_database_service = 6;
    KeyValueDatabaseService key_value_database_service = 7;
    MultiModalDatabaseService multi_modal_database_service = 8;
    RelationalDatabaseService relational_database_service = 9;
    FileStorageService file_storage_service = 10;
    ObjectStorageService object_storage_service = 11;
    VirtualNetwork virtual_network = 12;
    VirtualSubNetwork virtual_sub_network = 13;
  }
}

// NoAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message NoAuthentication {
  option (resource_type_names) = "NoAuthentication";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool context_is_checked = 1;
}

// OSLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message OSLogging {
  option (resource_type_names) = "OSLogging";
  option (resource_type_names) = "Logging";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool monitoring_enabled = 2;
  google.protobuf.Duration retention_period = 3;
  bool security_alerts_enabled = 4;
  repeated string logging_service_ids = 5;
}

// OTPBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message OTPBasedAuthentication {
  option (resource_type_names) = "OTPBasedAuthentication";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool activated = 1;
  bool context_is_checked = 2;
}

// ObjectStorage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ObjectStorage {
  option (resource_type_names) = "ObjectStorage";
  option (resource_type_names) = "Storage";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  bool public_access = 5;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  AtRestEncryption at_rest_encryption = 7;
  repeated Backup backups = 8;
  GeoLocation geo_location = 9;
  Immutability immutability = 10;
  Redundancy redundancy = 11;
  optional string parent_id = 12;
  ResourceLogging resource_logging = 13;
}

// ObjectStorageRequest is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ObjectStorageRequest {
  option (resource_type_names) = "ObjectStorageRequest";
  option (resource_type_names) = "Operation";
  option (resource_type_names) = "Functionality";

  string source = 1;
  repeated string object_storage_ids = 2;
}

// ObjectStorageService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// An object storage service represents the network service that is used to access a list of object storage containers. The storage itself is modelled as a ObjectStorage. The service has an http endpoint.
message ObjectStorageService {
  option (resource_type_names) = "ObjectStorageService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  Authenticity authenticity = 8;
  optional string compute_id = 9;
  GeoLocation geo_location = 10;
  HttpEndpoint http_endpoint = 11;
  optional string parent_id = 12;
  repeated string storage_ids = 13;
  TransportEncryption transport_encryption = 14;
}

// Operation is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Operation {
  oneof type {
    DatabaseConnect database_connect = 1;
    DatabaseQuery database_query = 2;
    HttpRequest http_request = 3;
    LogOperation log_operation = 4;
    ObjectStorageRequest object_storage_request = 5;
  }
}

// PasswordBasedAuthentication is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message PasswordBasedAuthentication {
  option (resource_type_names) = "PasswordBasedAuthentication";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool activated = 1;
  bool context_is_checked = 2;
}

// PasswordPolicy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message PasswordPolicy {
  option (resource_type_names) = "PasswordPolicy";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// RBAC is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message RBAC {
  option (resource_type_names) = "RBAC";
  option (resource_type_names) = "Authorization";
  option (resource_type_names) = "SecurityFeature";

  // see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
  float broad_assignments = 1;
  // see Privacy Smells: Detecting Privacy Problems in Cloud Architectures (2020)
  float mixed_duties = 2;
}

// Redundancy is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Redundancy {
  option (resource_type_names) = "Redundancy";
  option (resource_type_names) = "Availability";
  option (resource_type_names) = "SecurityFeature";

  bool geo = 1;
  bool local = 2;
  bool zone = 3;
}

// RelationalDatabaseService is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message RelationalDatabaseService {
  option (resource_type_names) = "RelationalDatabaseService";
  option (resource_type_names) = "DatabaseService";
  option (resource_type_names) = "StorageService";
  option (resource_type_names) = "NetworkService";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  repeated string ips = 3;
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  repeated uint32 ports = 6;
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 7;
  repeated AnomalyDetection anomaly_detections = 8;
  Authenticity authenticity = 9;
  optional string compute_id = 10;
  GeoLocation geo_location = 11;
  HttpEndpoint http_endpoint = 12;
  MalwareProtection malware_protection = 13;
  optional string parent_id = 14;
  repeated string storage_ids = 15;
  TransportEncryption transport_encryption = 16;
}

// ResourceGroup is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ResourceGroup {
  option (resource_type_names) = "ResourceGroup";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// ResourceLogging is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message ResourceLogging {
  option (resource_type_names) = "ResourceLogging";
  option (resource_type_names) = "Logging";
  option (resource_type_names) = "Auditing";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool monitoring_enabled = 2;
  google.protobuf.Duration retention_period = 3;
  bool security_alerts_enabled = 4;
  repeated string logging_service_ids = 5;
}

// RoleAssignment is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message RoleAssignment {
  option (resource_type_names) = "RoleAssignment";
  option (resource_type_names) = "Identifiable";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  bool activated = 1;
  google.protobuf.Timestamp creation_time = 2;
  string id = 3 [(buf.validate.field).required = true];
  map<string, string> labels = 4;
  string name = 5 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 6;
  Authenticity authenticity = 7;
  Authorization authorization = 8;
  GeoLocation geo_location = 9;
  optional string parent_id = 10;
}

// SecurityFeature is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message SecurityFeature {
  oneof type {
    AnomalyDetection anomaly_detection = 1;
    ActivityLogging activity_logging = 2;
    ApplicationLogging application_logging = 3;
    BootLogging boot_logging = 4;
    OSLogging os_logging = 5;
    ResourceLogging resource_logging = 6;
    MalwareProtection malware_protection = 7;
    CertificateBasedAuthentication certificate_based_authentication = 8;
    TokenBasedAuthentication token_based_authentication = 9;
    MultiFactorAuthentiation multi_factor_authentiation = 10;
    NoAuthentication no_authentication = 11;
    OTPBasedAuthentication otp_based_authentication = 12;
    PasswordBasedAuthentication password_based_authentication = 13;
    SingleSignOn single_sign_on = 14;
    ABAC abac = 15;
    L3Firewall l3_firewall = 16;
    WebApplicationFirewall web_application_firewall = 17;
    RBAC rbac = 18;
    Backup backup = 19;
    DDoSProtection d_do_s_protection = 20;
    GeoLocation geo_location = 21;
    Redundancy redundancy = 22;
    CustomerKeyEncryption customer_key_encryption = 23;
    ManagedKeyEncryption managed_key_encryption = 24;
    EncryptionInUse encryption_in_use = 25;
    TransportEncryption transport_encryption = 26;
    AutomaticUpdates automatic_updates = 27;
    Immutability immutability = 28;
  }
}

// SingleSignOn is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message SingleSignOn {
  option (resource_type_names) = "SingleSignOn";
  option (resource_type_names) = "Authenticity";
  option (resource_type_names) = "SecurityFeature";

  bool context_is_checked = 1;
  bool enabled = 2;
}

// Storage is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
message Storage {
  oneof type {
    BlockStorage block_storage = 1;
    DatabaseStorage database_storage = 2;
    FileStorage file_storage = 3;
    ObjectStorage object_storage = 4;
  }
}

// StorageService is an abstract class in our ontology, it cannot be instantiated but acts as an "interface".
// This entity represents a network-based service that can be used to access a particular storage backend. It has multiple subclasses, e.g., for databases or object stores. It has a list of storage resources associated to it.
message StorageService {
  oneof type {
    DocumentDatabaseService document_database_service = 1;
    KeyValueDatabaseService key_value_database_service = 2;
    MultiModalDatabaseService multi_modal_database_service = 3;
    RelationalDatabaseService relational_database_service = 4;
    FileStorageService file_storage_service = 5;
    ObjectStorageService object_storage_service = 6;
  }
}

// TransportEncryption is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// enabled means the resource _can_ be reached via https, while enforced means it _can only_ be reached via https (or http traffic is redirected)
message TransportEncryption {
  option (resource_type_names) = "TransportEncryption";
  option (resource_type_names) = "Confidentiality";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
  bool enforced = 2;
  string protocol = 3;
  float protocol_version = 4;
  repeated CipherSuite cipher_suites = 5;
}

// VMImage is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message VMImage {
  option (resource_type_names) = "VMImage";
  option (resource_type_names) = "Image";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  optional string application_id = 6;
  GeoLocation geo_location = 7;
  optional string parent_id = 8;
}

// VirtualMachine is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message VirtualMachine {
  option (resource_type_names) = "VirtualMachine";
  option (resource_type_names) = "Compute";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  ActivityLogging activity_logging = 6;
  AutomaticUpdates automatic_updates = 7;
  repeated string block_storage_ids = 8;
  BootLogging boot_logging = 9;
  EncryptionInUse encryption_in_use = 10;
  GeoLocation geo_location = 11;
  MalwareProtection malware_protection = 12;
  repeated string network_interface_ids = 13;
  OSLogging os_logging = 14;
  optional string parent_id = 15;
  ResourceLogging resource_logging = 16;
}

// VirtualNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message VirtualNetwork {
  option (resource_type_names) = "VirtualNetwork";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// VirtualSubNetwork is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message VirtualSubNetwork {
  option (resource_type_names) = "VirtualSubNetwork";
  option (resource_type_names) = "Networking";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}

// WebApp is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message WebApp {
  option (resource_type_names) = "WebApp";
  option (resource_type_names) = "Compute";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  EncryptionInUse encryption_in_use = 6;
  GeoLocation geo_location = 7;
  repeated string network_interface_ids = 8;
  optional string parent_id = 9;
  ResourceLogging resource_logging = 10;
}

// WebApplicationFirewall is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
// A WAF is a L7 firewall that includes L3 capabilities
message WebApplicationFirewall {
  option (resource_type_names) = "WebApplicationFirewall";
  option (resource_type_names) = "Firewall";
  option (resource_type_names) = "AccessRestriction";
  option (resource_type_names) = "Authorization";
  option (resource_type_names) = "SecurityFeature";

  bool enabled = 1;
}

// Workflow is an entity class in our ontology. It can be instantiated and contains all of its properties as well of its implemented interfaces.
message Workflow {
  option (resource_type_names) = "Workflow";
  option (resource_type_names) = "CICDService";
  option (resource_type_names) = "CloudResource";
  option (resource_type_names) = "Resource";

  google.protobuf.Timestamp creation_time = 1;
  string id = 2 [(buf.validate.field).required = true];
  map<string, string> labels = 3;
  string name = 4 [(buf.validate.field).required = true];
  // The raw field contains the raw information that is used to fill in the fields of the ontology.
  string raw = 5;
  GeoLocation geo_location = 6;
  optional string parent_id = 7;
}
