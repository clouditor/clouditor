/*
 * Copyright 2022 Fraunhofer AISEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *           $$\                           $$\ $$\   $$\
 *           $$ |                          $$ |\__|  $$ |
 *  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 * $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 * $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
 * $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 * \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 * This file is part of Clouditor Community Edition.
 */
 syntax = "proto3";

 package clouditor.evaluation.v1;

 import "google/api/annotations.proto";
 import "google/protobuf/timestamp.proto";
 import "api/assessment/assessment.proto";
 import "api/orchestrator/orchestrator.proto";
 import "tagger/tagger.proto";
 import "validate/validate.proto";

 option go_package = "clouditor.io/clouditor/api/evaluation";

 // This service represents the Evaluation Interface
 service Evaluation {
  // Evaluates periodically all assessment results of an cloud service id based on the given catalog id.
  rpc StartEvaluation(StartEvaluationRequest) returns (StartEvaluationResponse) {
  option (google.api.http) = {
      post : "/v1/evaluation/evaluate/{cloud_service_id}/{catalog_id}/start"
    };
    } 

  // StopEvaluation stops the evaluation for the given target of evaluation
  rpc StopEvaluation(StopEvaluationRequest) returns (StopEvaluationResponse) {
  option (google.api.http) = {
      post : "/v1/evaluation/evaluate/{cloud_service_id}/{catalog_id}/stop"
      };
  } 

  // List all evaluation results. Part of the public API, also exposed as REST.
  rpc ListEvaluationResults(ListEvaluationResultsRequest)
      returns (ListEvaluationResultsResponse) {
      option (google.api.http) = {
          get : "/v1/evaluation/results"
      };
  }
}

message ListEvaluationResultsRequest {
  // Optional. List only evaluation results for a specific cloud service.
  optional string filtered_cloud_service_id = 1
    [ (validate.rules).string.uuid = true ];

  // Optional. List only evaluation results for a specific control id.
  optional string filtered_control_id = 2
    [(validate.rules).string.min_len = 1];

  // Optional. List only sub-control evaluation results for a specific control id.
  optional string filtered_sub_controls = 3
    [(validate.rules).string.min_len = 1];

  // Optional. Latest results grouped by resource_id and metric_id.
  optional bool latest_by_resource_id = 4;

  int32 page_size = 10;
  string page_token = 11;
  string order_by = 12;
  bool asc = 13;
}

message ListEvaluationResultsResponse {
  repeated EvaluationResult results = 1;
  string next_page_token = 2;
}

message StartEvaluationRequest {
  string cloud_service_id = 1
    [ (validate.rules).string.uuid = true ];
  string catalog_id = 2
    [ (validate.rules).string.min_len = 1 ]; 

  // The interval time in minutes the evaluation executes periodically. The default interval is set to 5 minutes.
  optional int32 interval = 3
    [ (validate.rules).int32.gt = 0 ];
}

message StartEvaluationResponse {
  bool status = 1; 
  string status_message = 2; 
}

message StopEvaluationRequest {
  string cloud_service_id = 1
    [ (validate.rules).string.uuid = true ];

  string catalog_id = 2
    [ (validate.rules).string.min_len = 1 ]; 
}

message StopEvaluationResponse {}
 
// A evaluation result resource, representing the result after evaluating the cloud service with a specific control
// cloud_service_id, category_name and catalog_id are necessary to get the corresponding TargetOfEvaluation
message EvaluationResult {
  // Evaluation result id
  string id = 1
    [(validate.rules).string = {ignore_empty : true, uuid : true}]; 

  // The Cloud Service ID the evaluation belongs to
  string cloud_service_id = 2
  [(validate.rules).string = {ignore_empty : true, uuid : true}]; 

  // The control id the evaluation was based on
  string control_id = 3
    [(validate.rules).string.min_len = 1];
  
  // The category the evaluated control belongs to
  string control_category_name = 4
    [(validate.rules).string.min_len = 1]; 

  // The catalog the evaluated control belongs to
  string control_catalog_id = 5
    [(validate.rules).string.min_len = 1]; 

  // The evaluated resource 
  string resource_id = 6
    [(validate.rules).string.min_len = 1]; 
  
    enum EvaluationStatus {
    EVALUATION_STATUS_UNSPECIFIED = 0;
    EVALUATION_STATUS_COMPLIANT = 1;
    EVALUATION_STATUS_NOT_COMPLIANT = 2;
    EVALUATION_STATUS_PENDING = 3;
  }
  
  // Evaluation status
  EvaluationStatus status = 7 
    [(validate.rules).enum.defined_only = true];
  
  
  // Time of evaluation
  google.protobuf.Timestamp timestamp = 8
    [(tagger.tags) = "gorm:\"serializer:timestamppb;type:time\"" ];

  // List of assessment results because of which the evaluation status is not 'compliant'
  repeated string failing_assessment_result_ids = 9 [
      (tagger.tags) = "gorm:\"serializer:json\"",
      (validate.rules).repeated.items.message.required = true];
}