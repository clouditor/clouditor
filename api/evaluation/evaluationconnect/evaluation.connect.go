// Copyright 2023 Fraunhofer AISEC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//           $$\                           $$\ $$\   $$\
//           $$ |                          $$ |\__|  $$ |
//  $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
// $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
// $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ | \__|
// $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
// \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
//  \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
//
// This file is part of Clouditor Community Edition.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/evaluation/evaluation.proto

package evaluationconnect

import (
	evaluation "clouditor.io/clouditor/v2/api/evaluation"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EvaluationName is the fully-qualified name of the Evaluation service.
	EvaluationName = "clouditor.evaluation.v1.Evaluation"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EvaluationStartEvaluationProcedure is the fully-qualified name of the Evaluation's
	// StartEvaluation RPC.
	EvaluationStartEvaluationProcedure = "/clouditor.evaluation.v1.Evaluation/StartEvaluation"
	// EvaluationStopEvaluationProcedure is the fully-qualified name of the Evaluation's StopEvaluation
	// RPC.
	EvaluationStopEvaluationProcedure = "/clouditor.evaluation.v1.Evaluation/StopEvaluation"
	// EvaluationListEvaluationResultsProcedure is the fully-qualified name of the Evaluation's
	// ListEvaluationResults RPC.
	EvaluationListEvaluationResultsProcedure = "/clouditor.evaluation.v1.Evaluation/ListEvaluationResults"
	// EvaluationCreateEvaluationResultProcedure is the fully-qualified name of the Evaluation's
	// CreateEvaluationResult RPC.
	EvaluationCreateEvaluationResultProcedure = "/clouditor.evaluation.v1.Evaluation/CreateEvaluationResult"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	evaluationServiceDescriptor                      = evaluation.File_api_evaluation_evaluation_proto.Services().ByName("Evaluation")
	evaluationStartEvaluationMethodDescriptor        = evaluationServiceDescriptor.Methods().ByName("StartEvaluation")
	evaluationStopEvaluationMethodDescriptor         = evaluationServiceDescriptor.Methods().ByName("StopEvaluation")
	evaluationListEvaluationResultsMethodDescriptor  = evaluationServiceDescriptor.Methods().ByName("ListEvaluationResults")
	evaluationCreateEvaluationResultMethodDescriptor = evaluationServiceDescriptor.Methods().ByName("CreateEvaluationResult")
)

// EvaluationClient is a client for the clouditor.evaluation.v1.Evaluation service.
type EvaluationClient interface {
	// Evaluates periodically all assessment results of a cloud service id based
	// on the given catalog id. Part of the public API, also exposed as REST.
	StartEvaluation(context.Context, *connect.Request[evaluation.StartEvaluationRequest]) (*connect.Response[evaluation.StartEvaluationResponse], error)
	// StopEvaluation stops the evaluation for the given target of evaluation.
	// Part of the public API, also exposed as REST.
	StopEvaluation(context.Context, *connect.Request[evaluation.StopEvaluationRequest]) (*connect.Response[evaluation.StopEvaluationResponse], error)
	// List all evaluation results that the user can access. It can further be
	// restricted by various filtering options. Part of the public API, also
	// exposed as REST.
	ListEvaluationResults(context.Context, *connect.Request[evaluation.ListEvaluationResultsRequest]) (*connect.Response[evaluation.ListEvaluationResultsResponse], error)
	// Creates an evaluation result
	CreateEvaluationResult(context.Context, *connect.Request[evaluation.CreateEvaluationResultRequest]) (*connect.Response[evaluation.EvaluationResult], error)
}

// NewEvaluationClient constructs a client for the clouditor.evaluation.v1.Evaluation service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEvaluationClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EvaluationClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &evaluationClient{
		startEvaluation: connect.NewClient[evaluation.StartEvaluationRequest, evaluation.StartEvaluationResponse](
			httpClient,
			baseURL+EvaluationStartEvaluationProcedure,
			connect.WithSchema(evaluationStartEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopEvaluation: connect.NewClient[evaluation.StopEvaluationRequest, evaluation.StopEvaluationResponse](
			httpClient,
			baseURL+EvaluationStopEvaluationProcedure,
			connect.WithSchema(evaluationStopEvaluationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listEvaluationResults: connect.NewClient[evaluation.ListEvaluationResultsRequest, evaluation.ListEvaluationResultsResponse](
			httpClient,
			baseURL+EvaluationListEvaluationResultsProcedure,
			connect.WithSchema(evaluationListEvaluationResultsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEvaluationResult: connect.NewClient[evaluation.CreateEvaluationResultRequest, evaluation.EvaluationResult](
			httpClient,
			baseURL+EvaluationCreateEvaluationResultProcedure,
			connect.WithSchema(evaluationCreateEvaluationResultMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// evaluationClient implements EvaluationClient.
type evaluationClient struct {
	startEvaluation        *connect.Client[evaluation.StartEvaluationRequest, evaluation.StartEvaluationResponse]
	stopEvaluation         *connect.Client[evaluation.StopEvaluationRequest, evaluation.StopEvaluationResponse]
	listEvaluationResults  *connect.Client[evaluation.ListEvaluationResultsRequest, evaluation.ListEvaluationResultsResponse]
	createEvaluationResult *connect.Client[evaluation.CreateEvaluationResultRequest, evaluation.EvaluationResult]
}

// StartEvaluation calls clouditor.evaluation.v1.Evaluation.StartEvaluation.
func (c *evaluationClient) StartEvaluation(ctx context.Context, req *connect.Request[evaluation.StartEvaluationRequest]) (*connect.Response[evaluation.StartEvaluationResponse], error) {
	return c.startEvaluation.CallUnary(ctx, req)
}

// StopEvaluation calls clouditor.evaluation.v1.Evaluation.StopEvaluation.
func (c *evaluationClient) StopEvaluation(ctx context.Context, req *connect.Request[evaluation.StopEvaluationRequest]) (*connect.Response[evaluation.StopEvaluationResponse], error) {
	return c.stopEvaluation.CallUnary(ctx, req)
}

// ListEvaluationResults calls clouditor.evaluation.v1.Evaluation.ListEvaluationResults.
func (c *evaluationClient) ListEvaluationResults(ctx context.Context, req *connect.Request[evaluation.ListEvaluationResultsRequest]) (*connect.Response[evaluation.ListEvaluationResultsResponse], error) {
	return c.listEvaluationResults.CallUnary(ctx, req)
}

// CreateEvaluationResult calls clouditor.evaluation.v1.Evaluation.CreateEvaluationResult.
func (c *evaluationClient) CreateEvaluationResult(ctx context.Context, req *connect.Request[evaluation.CreateEvaluationResultRequest]) (*connect.Response[evaluation.EvaluationResult], error) {
	return c.createEvaluationResult.CallUnary(ctx, req)
}

// EvaluationHandler is an implementation of the clouditor.evaluation.v1.Evaluation service.
type EvaluationHandler interface {
	// Evaluates periodically all assessment results of a cloud service id based
	// on the given catalog id. Part of the public API, also exposed as REST.
	StartEvaluation(context.Context, *connect.Request[evaluation.StartEvaluationRequest]) (*connect.Response[evaluation.StartEvaluationResponse], error)
	// StopEvaluation stops the evaluation for the given target of evaluation.
	// Part of the public API, also exposed as REST.
	StopEvaluation(context.Context, *connect.Request[evaluation.StopEvaluationRequest]) (*connect.Response[evaluation.StopEvaluationResponse], error)
	// List all evaluation results that the user can access. It can further be
	// restricted by various filtering options. Part of the public API, also
	// exposed as REST.
	ListEvaluationResults(context.Context, *connect.Request[evaluation.ListEvaluationResultsRequest]) (*connect.Response[evaluation.ListEvaluationResultsResponse], error)
	// Creates an evaluation result
	CreateEvaluationResult(context.Context, *connect.Request[evaluation.CreateEvaluationResultRequest]) (*connect.Response[evaluation.EvaluationResult], error)
}

// NewEvaluationHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEvaluationHandler(svc EvaluationHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	evaluationStartEvaluationHandler := connect.NewUnaryHandler(
		EvaluationStartEvaluationProcedure,
		svc.StartEvaluation,
		connect.WithSchema(evaluationStartEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationStopEvaluationHandler := connect.NewUnaryHandler(
		EvaluationStopEvaluationProcedure,
		svc.StopEvaluation,
		connect.WithSchema(evaluationStopEvaluationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationListEvaluationResultsHandler := connect.NewUnaryHandler(
		EvaluationListEvaluationResultsProcedure,
		svc.ListEvaluationResults,
		connect.WithSchema(evaluationListEvaluationResultsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	evaluationCreateEvaluationResultHandler := connect.NewUnaryHandler(
		EvaluationCreateEvaluationResultProcedure,
		svc.CreateEvaluationResult,
		connect.WithSchema(evaluationCreateEvaluationResultMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/clouditor.evaluation.v1.Evaluation/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EvaluationStartEvaluationProcedure:
			evaluationStartEvaluationHandler.ServeHTTP(w, r)
		case EvaluationStopEvaluationProcedure:
			evaluationStopEvaluationHandler.ServeHTTP(w, r)
		case EvaluationListEvaluationResultsProcedure:
			evaluationListEvaluationResultsHandler.ServeHTTP(w, r)
		case EvaluationCreateEvaluationResultProcedure:
			evaluationCreateEvaluationResultHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEvaluationHandler returns CodeUnimplemented from all methods.
type UnimplementedEvaluationHandler struct{}

func (UnimplementedEvaluationHandler) StartEvaluation(context.Context, *connect.Request[evaluation.StartEvaluationRequest]) (*connect.Response[evaluation.StartEvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evaluation.v1.Evaluation.StartEvaluation is not implemented"))
}

func (UnimplementedEvaluationHandler) StopEvaluation(context.Context, *connect.Request[evaluation.StopEvaluationRequest]) (*connect.Response[evaluation.StopEvaluationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evaluation.v1.Evaluation.StopEvaluation is not implemented"))
}

func (UnimplementedEvaluationHandler) ListEvaluationResults(context.Context, *connect.Request[evaluation.ListEvaluationResultsRequest]) (*connect.Response[evaluation.ListEvaluationResultsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evaluation.v1.Evaluation.ListEvaluationResults is not implemented"))
}

func (UnimplementedEvaluationHandler) CreateEvaluationResult(context.Context, *connect.Request[evaluation.CreateEvaluationResultRequest]) (*connect.Response[evaluation.EvaluationResult], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clouditor.evaluation.v1.Evaluation.CreateEvaluationResult is not implemented"))
}
