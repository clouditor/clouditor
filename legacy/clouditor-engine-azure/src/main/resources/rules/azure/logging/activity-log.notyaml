/*
 * Copyright (c) 2016-2019, Fraunhofer AISEC. All rights reserved.
 *
 *
 *            $$\                           $$\ $$\   $$\
 *            $$ |                          $$ |\__|  $$ |
 *   $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 *  $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 *  $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ |  \__|
 *  $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 *  \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *   \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 */

package io.clouditor.checks.azure.logging;

import com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner;
import io.clouditor.Result;
import io.clouditor.annotations.CheckMetaInfo;
import io.clouditor.checks.azure.AzureCheck;
import io.clouditor.checks.azure.AzureCheckConfiguration;
import java.util.List;

@CheckMetaInfo(
    name = "Azure Activity Log: Common Alerts",
    description = "Checks if all log alerts defined by CIS benchmark are enabled.",
    controlIds = {
      "Azure 5.3",
      "Azure 5.4",
      "Azure 5.5",
      "Azure 5.6",
      "Azure 5.7",
      "Azure 5.8",
      "Azure 5.9",
      "Azure 5.10",
      "Azure 5.11",
      "Azure 5.12"
    },
    assetType = String.class)
public class AzureActivityLogAlertsCheck extends AzureCheck<AzureCheckConfiguration, String> {

  AzureActivityLogAlertsCheck() {
    super(AzureCheckConfiguration::new);
  }

  private boolean hasOperation(ActivityLogAlertResourceInner log, String s) {
    return log.condition().allOf().stream()
        .anyMatch(leaf -> leaf.field().equals("operationName") && leaf.equals().equals(s));
  }

  @Override
  public void execute(AzureCheckConfiguration config, Result<String> result) {
    var logs = this.monitor.inner().activityLogAlerts().list();

    for (var asset : result.getAssets()) {
      var operation = asset.getId();

      var found = false;
      for (var log : logs) {
        // check, if a log exists with an action for the operation
        if (hasOperation(log, operation)) {
          LOGGER.info("Activity log for operation {} exists in {}.", operation, log.id());

          result.addDetail(asset, new AzureActivityLogAlertsDetail(log.id()));
          found = true;
          break;
        }
      }

      if (found) {
        result.addValidAsset(asset);
      } else {
        LOGGER.info("No activity log exists for operation {}.", operation);
        result.addInvalidAsset(asset);
      }
    }
  }

  @Override
  public void prepare(AzureCheckConfiguration config, Result<String> result) {
    var operations =
        List.of(
            "Microsoft.Authorization/policyAssignments/write", // CIS 5.3
            "Microsoft.Network/networkSecurityGroups/write", // CIS 5.4
            "Microsoft.Network/networkSecurityGroups/delete", // CIS 5.5
            "Microsoft.Network/networkSecurityGroups/securityRules/write", // CIS 5.6
            "Microsoft.Network/networkSecurityGroups/securityRules/delete", // CIS 5.7
            "Microsoft.Security/securitySolutions/write", // CIS 5.8
            "Microsoft.Security/securitySolutions/delete", // CIS 5.9
            "Microsoft.Sql/servers/firewallRules/write", // CIS 5.10
            "Microsoft.Sql/servers/firewallRules/delete", // CIS 5.11
            "Microsoft.Security/policies/write"); // CIS 5.12

    result.prepareAssets(operations, x -> x, null);
  }
}
