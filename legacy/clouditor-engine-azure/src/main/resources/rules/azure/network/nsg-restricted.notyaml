/*
 * Copyright (c) 2016-2019, Fraunhofer AISEC. All rights reserved.
 *
 *
 *            $$\                           $$\ $$\   $$\
 *            $$ |                          $$ |\__|  $$ |
 *   $$$$$$$\ $$ | $$$$$$\  $$\   $$\  $$$$$$$ |$$\ $$$$$$\    $$$$$$\   $$$$$$\
 *  $$  _____|$$ |$$  __$$\ $$ |  $$ |$$  __$$ |$$ |\_$$  _|  $$  __$$\ $$  __$$\
 *  $$ /      $$ |$$ /  $$ |$$ |  $$ |$$ /  $$ |$$ |  $$ |    $$ /  $$ |$$ |  \__|
 *  $$ |      $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$\ $$ |  $$ |$$ |
 *  \$$$$$$\  $$ |\$$$$$   |\$$$$$   |\$$$$$$  |$$ |  \$$$   |\$$$$$   |$$ |
 *   \_______|\__| \______/  \______/  \_______|\__|   \____/  \______/ \__|
 *
 */

package io.clouditor.checks.azure.network;

import com.microsoft.azure.management.network.NetworkSecurityGroup;
import com.microsoft.azure.management.network.SecurityRuleAccess;
import com.microsoft.azure.management.network.SecurityRuleDirection;
import com.microsoft.azure.management.network.SecurityRuleProtocol;
import io.clouditor.Result;
import io.clouditor.annotations.CheckMetaInfo;
import io.clouditor.checks.azure.AzureCheckConfiguration;
import java.net.InetSocketAddress;

@CheckMetaInfo(
    name = "Azure VM: Restricted RDP and SSH Access",
    description =
        "Checks if RDP access from Internet is disabled by Network Security Groups and checks if SSH access is disabled.",
    controlIds = {"Azure 6.1", "Azure 6.2"},
    assetType = NetworkSecurityGroup.class)
public class AzureNetworkRestrictedRDPSSHCheck extends AzureNetworkCheck<AzureCheckConfiguration> {

  private static final int PORT_RDP = 3389; // CIS 6.1
  private static final int PORT_SSH = 22; // CIS 6.2

  AzureNetworkRestrictedRDPSSHCheck() {
    super(AzureCheckConfiguration::new);
  }

  private static boolean isAny(String prefix) {
    return prefix.equals("*")
        || prefix.equals(new InetSocketAddress(0).toString())
        || prefix.endsWith("/0")
        || prefix.equals("internet")
        || prefix.equals("any");
  }

  private static boolean includes(String portRange, int port) {
    var rangeSplit = portRange.split("-");
    return portRange.equals("*")
        || rangeSplit.length == 2
            && (Integer.parseInt(rangeSplit[0]) <= port && Integer.parseInt(rangeSplit[1]) >= port)
        || Integer.parseInt(rangeSplit[0]) == port;
  }

  @Override
  public void execute(AzureCheckConfiguration config, Result<NetworkSecurityGroup> result) {
    for (var asset : result.getAssets()) {
      var hasInsecureRule = false;

      var nsg = asset.getObject();

      for (var nsr : nsg.securityRules().values()) {
        if (isAny(nsr.sourceAddressPrefix())
            && nsr.direction().equals(SecurityRuleDirection.INBOUND)
            && (nsr.protocol().equals(SecurityRuleProtocol.TCP)
                || nsr.protocol().equals(SecurityRuleProtocol.ASTERISK))
            && (includes(nsr.destinationPortRange(), PORT_RDP)
                || includes(nsr.destinationPortRange(), PORT_SSH))
            && nsr.access().equals(SecurityRuleAccess.ALLOW)) {
          LOGGER.debug(
              "Network security rule {} within group {} contains at least one rule that allows traffic to port(s) {} from any source.",
              nsr.name(),
              nsg,
              nsr.destinationPortRange());
          // one insecure rule is enough to fail
          hasInsecureRule = true;
          break;
        }
      }

      if (hasInsecureRule) {
        result.addInvalidAsset(asset);
      } else {
        LOGGER.debug(
            "Network security group {} does not contain any unrestricted access to SSH or RDP",
            nsg.id());
        result.addValidAsset(asset);
      }
    }
  }
}
